/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 00:15:13 GMT 2023
 */

package ResultSetColumnReaderSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ResultSetColumnReaderSourceCode.ResultSetColumnReader;
import java.sql.Date;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Time;
import java.sql.Timestamp;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultSetColumnReader_ESTest extends ResultSetColumnReader_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      boolean boolean0 = resultSetColumnReader0.next();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("").when(resultSet0).getString(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getString(1);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1221), 1, (-6)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte)100);
      Long long0 = new Long((-6));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0, byte0, long0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean(1);
      resultSetColumnReader0.getBoolean(1);
      resultSetColumnReader0.getLong((byte)100);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(7, 7, 7).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float((float) 7);
      Byte byte0 = new Byte((byte) (-7));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0, date0, byte0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDouble(0);
      resultSetColumnReader0.getBoolean(16);
      resultSetColumnReader0.getDouble((-2651));
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      doReturn(resultSetColumnReader0).when(resultSet1).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader1 = new ResultSetColumnReader(resultSet1);
      // Undeclared exception!
      try { 
        resultSetColumnReader1.getLong((-820));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ResultSetColumnReaderSourceCode.ResultSetColumnReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Float float0 = new Float((-108.4033F));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      Boolean boolean0 = resultSetColumnReader0.getBoolean(1032);
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      doReturn(float0, (Object) null, boolean0).when(resultSet1).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader1 = new ResultSetColumnReader(resultSet1);
      resultSetColumnReader1.getObject((-3279));
      resultSetColumnReader1.getObject((-3279));
      // Undeclared exception!
      try { 
        resultSetColumnReader1.getDouble(318);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ResultSetColumnReaderSourceCode.ResultSetColumnReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Byte byte0 = new Byte((byte)16);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(byte0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getBoolean((byte)16);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ResultSetColumnReaderSourceCode.ResultSetColumnReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Timestamp) null).when(resultSet0).getTimestamp(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getTimeStamp((-1864));
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Timestamp timestamp0 = mock(Timestamp.class, new ViolatedAssumptionAnswer());
      doReturn("rGh&2h1_(lz").when(timestamp0).toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(timestamp0).when(resultSet0).getTimestamp(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getTimeStamp(2980);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Time) null).when(resultSet0).getTime(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getTime(0);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Time time0 = mock(Time.class, new ViolatedAssumptionAnswer());
      doReturn("@owNzIif@_z=2").when(time0).toString();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(time0).when(resultSet0).getTime(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getTime(9);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((String) null).when(resultSet0).getString(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getString(1630);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("MW{_Pg$q+c1U*Hw").when(resultSet0).getString(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getString(0);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(16).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float(0.0F);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(16);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3).when(resultSetMetaData0).getColumnType(anyInt());
      Object object0 = new Object();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(object0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2).when(resultSetMetaData0).getColumnType(anyInt());
      Byte byte0 = new Byte((byte)1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(byte0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong((-1558));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Byte@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float(0.0F);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(1);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Float@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(date0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(0);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"codegen.java.sql.Date$MockitoMock$27398847@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1221), 1, (-2)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte)100);
      Object object0 = new Object();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0, byte0, object0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean(1);
      resultSetColumnReader0.getBoolean((-1));
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong((byte)100);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Object@0000000004\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-3)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(1029);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Boolean@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1221), 1, (-4)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte)100);
      Integer integer0 = new Integer(0);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0, byte0, integer0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean((-2031));
      resultSetColumnReader0.getBoolean((-2031));
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong((byte)100);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Integer@0000000004\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-5)).when(resultSetMetaData0).getColumnType(anyInt());
      Byte byte0 = new Byte((byte)1);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(byte0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getLong((-1558));
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 1, (-6)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte)100);
      Long long0 = new Long(0L);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0, byte0, long0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean(1);
      assertTrue(resultSetColumnReader0.wasNull());
      
      resultSetColumnReader0.getBoolean(1);
      resultSetColumnReader0.getLong((byte)100);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(5).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getLong(1029);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"java.lang.Boolean@0000000002\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float(1443.1277F);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getLong(2559);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-7)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      Long long0 = resultSetColumnReader0.getLong(9);
      assertFalse(resultSetColumnReader0.wasNull());
      assertEquals(0L, (long)long0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getLong(0);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(7, 7, 8).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float((float) 7);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0, date0, "w").when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDouble(0);
      resultSetColumnReader0.getBoolean(16);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getDouble((-2651));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(6).when(resultSetMetaData0).getColumnType(anyInt());
      Object object0 = new Object();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(object0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getDouble((-7));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float(1443.1277F);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDouble(0);
      boolean boolean0 = resultSetColumnReader0.wasNull();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-7)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      // Undeclared exception!
      try { 
        resultSetColumnReader0.getDouble((-1));
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDouble(0);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((Date) null).when(resultSet0).getDate(anyInt());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDate((byte)16);
      assertTrue(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Date date0 = mock(Date.class, new ViolatedAssumptionAnswer());
      doReturn("").when(date0).toString();
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(date0).when(resultSet0).getDate(anyInt());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getDate(4846);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(16).when(resultSetMetaData0).getColumnType(anyInt());
      Float float0 = new Float(0.0F);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(float0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      Boolean boolean0 = resultSetColumnReader0.getBoolean(16);
      assertFalse(resultSetColumnReader0.wasNull());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-7), (-7), (-1563)).when(resultSetMetaData0).getColumnType(anyInt());
      Boolean boolean0 = Boolean.TRUE;
      Byte byte0 = new Byte((byte)100);
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(boolean0, byte0, byte0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean(1);
      Boolean boolean1 = resultSetColumnReader0.getBoolean(1);
      assertTrue(boolean1);
      
      resultSetColumnReader0.getBoolean((byte)100);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(16).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(resultSetMetaData0).when(resultSet0).getObject(anyInt());
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      resultSetColumnReader0.getBoolean(219);
      assertFalse(resultSetColumnReader0.wasNull());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultSetColumnReader resultSetColumnReader0 = null;
      try {
        resultSetColumnReader0 = new ResultSetColumnReader((ResultSet) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // ResultSet == null
         //
         verifyException("ResultSetColumnReaderSourceCode.ResultSetColumnReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(true).when(resultSet0).next();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      boolean boolean0 = resultSetColumnReader0.next();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      ResultSetColumnReader resultSetColumnReader0 = new ResultSetColumnReader(resultSet0);
      boolean boolean0 = resultSetColumnReader0.wasNull();
      assertFalse(boolean0);
  }
}
