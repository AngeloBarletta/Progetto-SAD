/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 02:35:15 GMT 2023
 */

package XMLParserSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import XMLParserSourceCode.XMLParser;
import java.util.Hashtable;
import java.util.Vector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XMLParser_ESTest extends XMLParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = XMLParser.returnSpecial("&lt;");
      assertEquals("<", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("Y", "");
      xMLParser0.setProperty("Y", "", hashtable0);
      Vector vector0 = xMLParser0.getProperty("Y");
      assertEquals("[{Y=, id=}, {id=}]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("n", "");
      xMLParser0.addProperty("n", "", hashtable0);
      String string0 = xMLParser0.getSingleProperty("n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      xMLParser0.setProperty("Y", "", hashtable0);
      xMLParser0.addProperty("Y", "", hashtable0);
      xMLParser0.setProperty("Y", "", hashtable0);
      assertEquals(0, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      xMLParser0.addProperty("Y", "Y", hashtable0);
      xMLParser0.setProperty("Y", "", hashtable0);
      Vector vector0 = xMLParser0.getProperty("Y");
      assertEquals("[{id=Y}, {id=}]", vector0.toString());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XMLParser xMLParser0 = null;
      try {
        xMLParser0 = new XMLParser("(");
        fail("Expecting exception: Exception");
      
      } catch(Throwable e) {
         //
         // Not A Valid Format!
         //
         verifyException("XMLParserSourceCode.XMLParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = XMLParser.returnSpecial("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser((String) null);
      String string0 = xMLParser0.getXML();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      xMLParser0.store();
      String string0 = xMLParser0.getXML();
      assertEquals("<?xml version=\"1.0\" encoding=\"UTF-8\"?><data/>", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      String string0 = xMLParser0.getXML();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Hashtable<String, Object> hashtable0 = new Hashtable<String, Object>();
      hashtable0.put("y", "~");
      xMLParser0.setProperty("Y", "", hashtable0);
      String string0 = xMLParser0.getSingleProperty("y");
      assertEquals("~", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      String string0 = xMLParser0.getSingleProperty("n");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XMLParser xMLParser0 = new XMLParser("");
      Vector vector0 = xMLParser0.getProperty("Y");
      assertEquals("[]", vector0.toString());
  }
}
