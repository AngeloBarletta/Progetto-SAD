/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 04 11:12:53 GMT 2023
 */

package CalcolatriceSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import CalcolatriceSourceCode.Calcolatrice;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calcolatrice_ESTest extends Calcolatrice_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.subtract(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.subtract(0, (-2605));
      assertEquals(2605, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.subtract((-1280), 0);
      assertEquals((-1280), int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.multiply(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.multiply(2605, 2605);
      assertEquals(6786025, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.multiply(1, (-454));
      assertEquals((-454), int0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.factorial(800);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.factorial(0);
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.factorial(33);
      assertEquals(Integer.MIN_VALUE, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      double double0 = calcolatrice0.divide(0.0, (-2938.7753));
      assertEquals(-0.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      double double0 = calcolatrice0.divide(1, 1.0);
      assertEquals(1.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      double double0 = calcolatrice0.divide(1574.857378069, (-1.0));
      assertEquals((-1574.857378069), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.add(0, 0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.add(2, 0);
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Calcolatrice calcolatrice0 = new Calcolatrice();
      int int0 = calcolatrice0.add((-1521), (-1521));
      assertEquals((-3042), int0);
  }
}
