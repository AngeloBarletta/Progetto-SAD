/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 10:38:05 GMT 2023
 */

package ByteArrayHashMapSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ByteArrayHashMapSourceCode.ByteArrayHashMap;
import java.lang.reflect.Array;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayHashMap_ESTest extends ByteArrayHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry0 = new ByteArrayHashMap.Entry<String>((-2831), byteArray0, "", (ByteArrayHashMap.Entry<String>) null);
      String string0 = byteArrayHashMap_Entry0.getValue();
      assertEquals((-2831), byteArrayHashMap_Entry0.hash);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      Integer integer0 = new Integer((-3134));
      ByteArrayHashMap.Entry<Integer> byteArrayHashMap_Entry0 = new ByteArrayHashMap.Entry<Integer>(403, byteArray0, integer0, (ByteArrayHashMap.Entry<Integer>) null);
      byteArrayHashMap_Entry0.getKey();
      assertEquals(403, byteArrayHashMap_Entry0.hash);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(2154);
      Integer integer0 = new Integer(2154);
      byteArrayHashMap0.addEntry(2154, (byte[]) null, integer0, 2154);
      byteArrayHashMap0.values();
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      List<Object> list0 = byteArrayHashMap0.values();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      int int0 = byteArrayHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>();
      ByteArrayHashMap<Object> byteArrayHashMap1 = new ByteArrayHashMap<Object>(0);
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap1.put(byteArray0, byteArrayHashMap0);
      byteArray0[0] = (byte)32;
      byteArrayHashMap1.put(byteArray0, byteArrayHashMap0);
      byteArrayHashMap1.remove(byteArray0);
      assertEquals(1, byteArrayHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>();
      ByteArrayHashMap<Object> byteArrayHashMap1 = new ByteArrayHashMap<Object>(0);
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap1.put(byteArray0, byteArrayHashMap0);
      byteArrayHashMap1.put(byteArray0, byteArrayHashMap0);
      assertFalse(byteArrayHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(2154);
      Integer integer0 = new Integer(2154);
      byteArrayHashMap0.addEntry(2154, (byte[]) null, integer0, 2154);
      byteArrayHashMap0.keys();
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(665);
      boolean boolean0 = byteArrayHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>(0);
      String string0 = byteArrayHashMap0.get(byteArray0, 0, 0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byte[] byteArray0 = new byte[0];
      Object object0 = new Object();
      byteArrayHashMap0.put(byteArray0, object0);
      ByteArrayHashMap.Entry<Object> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      ByteArrayHashMap<String> byteArrayHashMap1 = new ByteArrayHashMap<String>(0);
      ByteArrayHashMap.Entry<String>[] byteArrayHashMap_EntryArray0 = (ByteArrayHashMap.Entry<String>[]) Array.newInstance(ByteArrayHashMap.Entry.class, 4);
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry1 = new ByteArrayHashMap.Entry<String>(0, byteArrayHashMap_Entry0.key, (String) null, (ByteArrayHashMap.Entry<String>) null);
      byteArrayHashMap_EntryArray0[0] = byteArrayHashMap_Entry1;
      byteArrayHashMap1.table = byteArrayHashMap_EntryArray0;
      String string0 = byteArrayHashMap1.get(byteArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byte[] byteArray0 = new byte[1];
      Object object0 = new Object();
      byteArrayHashMap0.put(byteArray0, object0);
      ByteArrayHashMap.Entry<Object> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      ByteArrayHashMap<String> byteArrayHashMap1 = new ByteArrayHashMap<String>(0);
      ByteArrayHashMap.Entry<String>[] byteArrayHashMap_EntryArray0 = (ByteArrayHashMap.Entry<String>[]) Array.newInstance(ByteArrayHashMap.Entry.class, 4);
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry1 = new ByteArrayHashMap.Entry<String>(1, byteArrayHashMap_Entry0.key, (String) null, (ByteArrayHashMap.Entry<String>) null);
      byteArrayHashMap_EntryArray0[0] = byteArrayHashMap_Entry1;
      byteArrayHashMap1.table = byteArrayHashMap_EntryArray0;
      String string0 = byteArrayHashMap1.get(byteArray0);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(0, 133.83F);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      byteArray1[1] = (byte) (-88);
      Integer integer0 = new Integer(0);
      byteArrayHashMap0.addEntry(0, byteArray1, integer0, 0);
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray0);
      assertFalse(byteArrayHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(0, 133.83F);
      byte[] byteArray0 = new byte[0];
      Integer integer0 = byteArrayHashMap0.remove(byteArray0);
      byte[] byteArray1 = new byte[3];
      byteArrayHashMap0.addEntry(0, byteArray1, integer0, 0);
      byteArrayHashMap0.removeEntryForKey(byteArray0);
      assertEquals(1, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(0, 133.83F);
      byte[] byteArray0 = new byte[3];
      byte[] byteArray1 = new byte[3];
      Integer integer0 = new Integer(0);
      byteArrayHashMap0.addEntry(0, byteArray1, integer0, 0);
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray0);
      assertEquals(1, byteArrayHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(665);
      ByteArrayHashMap<Object> byteArrayHashMap1 = byteArrayHashMap0.duplicate();
      assertNotSame(byteArrayHashMap0, byteArrayHashMap1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(665);
      byte[] byteArray0 = new byte[3];
      byteArrayHashMap0.createEntry(665, byteArray0, "", (byte)0);
      assertEquals(1, byteArrayHashMap0.size());
      
      ByteArrayHashMap<Object> byteArrayHashMap1 = byteArrayHashMap0.duplicate();
      assertFalse(byteArrayHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(665);
      byteArrayHashMap0.clear();
      assertEquals(0, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = null;
      try {
        byteArrayHashMap0 = new ByteArrayHashMap<Object>(2147483645, (byte)0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: 0.0
         //
         verifyException("ByteArrayHashMapSourceCode.ByteArrayHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = null;
      try {
        byteArrayHashMap0 = new ByteArrayHashMap<String>((-26));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -26
         //
         verifyException("ByteArrayHashMapSourceCode.ByteArrayHashMap", e);
      }
  }
}
