/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 10:45:17 GMT 2023
 */

package ByteArrayHashMapSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ByteArrayHashMapSourceCode.ByteArrayHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteArrayHashMap_ESTest extends ByteArrayHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      ByteArrayHashMap<Object> byteArrayHashMap1 = new ByteArrayHashMap<Object>();
      ByteArrayHashMap<Object> byteArrayHashMap2 = byteArrayHashMap1.duplicate();
      byteArrayHashMap2.put(byteArray0, (Object) null);
      byte[] byteArray1 = new byte[14];
      byteArrayHashMap2.put(byteArray1, byteArrayHashMap0);
      assertFalse(byteArrayHashMap2.isEmpty());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.createEntry(14, byteArray0, "", (byte)0);
      byteArrayHashMap0.createEntry(14, byteArray0, "", (byte)0);
      byteArrayHashMap0.removeEntryForKey(byteArray0);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[3];
      byteArrayHashMap0.put(byteArray0, "%OILsb<");
      byteArrayHashMap0.resize(2615);
      byteArray0[2] = (byte)1;
      byteArrayHashMap0.removeEntryForKey(byteArray0);
      assertEquals(1, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>(293);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArrayHashMap0.put(byteArray0, "");
      byteArrayHashMap0.resize(293);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(2, 2);
      byteArrayHashMap0.resize(2);
      assertEquals(0, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(2, 2);
      ByteArrayHashMap<Object> byteArrayHashMap1 = byteArrayHashMap0.duplicate();
      assertNotSame(byteArrayHashMap1, byteArrayHashMap0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byteArrayHashMap0.clear();
      assertEquals(0, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-1);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte) (-44);
      byteArray0[4] = (byte)53;
      byteArrayHashMap0.put(byteArray0, "");
      byte[] byteArray1 = new byte[0];
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray1);
      assertFalse(byteArrayHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>(293);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArrayHashMap0.put(byteArray0, "");
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray0);
      assertEquals(1, byteArrayHashMap0.size());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[3];
      byteArrayHashMap0.put(byteArray0, "%OILsb<");
      byteArrayHashMap0.resize(2615);
      byteArray0[2] = (byte)1;
      byteArrayHashMap0.put(byteArray0, "");
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      byteArrayHashMap0.get(byteArrayHashMap_Entry0.key);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>(293);
      byte[] byteArray0 = new byte[2];
      byteArray0[0] = (byte) (-20);
      byteArrayHashMap0.put(byteArray0, "");
      byteArrayHashMap0.get(byteArray0);
      assertEquals(1, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(2);
      assertTrue(byteArrayHashMap0.isEmpty());
      
      byteArrayHashMap0.size = (-1);
      boolean boolean0 = byteArrayHashMap0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byteArrayHashMap0.put(byteArray0, (Object) null);
      byte[] byteArray1 = new byte[1];
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray1);
      assertFalse(byteArrayHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[8];
      byteArrayHashMap0.put(byteArray0, "~mG88@k;d{Z?{_7$");
      byte[] byteArray1 = new byte[0];
      byteArrayHashMap0.remove(byteArray1);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byteArrayHashMap0.put(byteArray0, (Object) null);
      assertEquals(1, byteArrayHashMap0.size());
      
      ByteArrayHashMap<Object> byteArrayHashMap1 = byteArrayHashMap0.duplicate();
      assertEquals(1, byteArrayHashMap1.size());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      ByteArrayHashMap<String> byteArrayHashMap1 = byteArrayHashMap0.duplicate();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap1.createEntry(14, byteArray0, "", (byte)0);
      byteArrayHashMap1.put(byteArray0, "@SW");
      byteArrayHashMap1.removeEntryForKey(byteArray0);
      assertFalse(byteArrayHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.createEntry(14, byteArray0, "", (byte)0);
      byteArrayHashMap0.values();
      assertEquals(1, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(1, 1);
      byte[] byteArray0 = new byte[7];
      Integer integer0 = new Integer((byte) (-92));
      byteArrayHashMap0.put(byteArray0, integer0);
      byteArrayHashMap0.keys();
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      ByteArrayHashMap<Object> byteArrayHashMap1 = new ByteArrayHashMap<Object>();
      byteArrayHashMap1.put(byteArray0, (Object) null);
      byteArrayHashMap1.put(byteArray0, byteArrayHashMap0);
      assertFalse(byteArrayHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      byte[] byteArray0 = new byte[1];
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>();
      byteArrayHashMap0.put(byteArray0, (Object) null);
      byte[] byteArray1 = new byte[14];
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray1);
      assertFalse(byteArrayHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.createEntry(14, byteArray0, "", (byte)0);
      boolean boolean0 = byteArrayHashMap0.containsKey(byteArray0);
      assertFalse(byteArrayHashMap0.isEmpty());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(1, 1);
      byte[] byteArray0 = new byte[7];
      Integer integer0 = new Integer((byte) (-92));
      byteArrayHashMap0.put(byteArray0, integer0);
      byteArrayHashMap0.get(byteArray0, 0, 1);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>();
      boolean boolean0 = byteArrayHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[19];
      byteArrayHashMap0.put(byteArray0, "YN({NYft_D{>");
      boolean boolean0 = byteArrayHashMap0.isEmpty();
      assertEquals(1, byteArrayHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = null;
      try {
        byteArrayHashMap0 = new ByteArrayHashMap<Object>(1073741831, (-50.5F));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal load factor: -50.5
         //
         verifyException("ByteArrayHashMapSourceCode.ByteArrayHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = null;
      try {
        byteArrayHashMap0 = new ByteArrayHashMap<Object>((-2148));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal initial capacity: -2148
         //
         verifyException("ByteArrayHashMapSourceCode.ByteArrayHashMap", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.put(byteArray0, "@SW");
      assertFalse(byteArrayHashMap0.isEmpty());
      
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      byteArrayHashMap_Entry0.getValue();
      assertEquals(0, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.put(byteArray0, "@SW");
      assertFalse(byteArrayHashMap0.isEmpty());
      
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      byteArrayHashMap_Entry0.getKey();
      assertEquals(0, byteArrayHashMap_Entry0.hash);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>();
      int int0 = byteArrayHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ByteArrayHashMap<String> byteArrayHashMap0 = new ByteArrayHashMap<String>();
      byte[] byteArray0 = new byte[1];
      byteArrayHashMap0.createEntry(14, byteArray0, "", (byte)0);
      byteArrayHashMap0.put(byteArray0, "@SW");
      ByteArrayHashMap.Entry<String> byteArrayHashMap_Entry0 = byteArrayHashMap0.removeEntryForKey(byteArray0);
      byteArrayHashMap0.get(byteArrayHashMap_Entry0.key);
      assertFalse(byteArrayHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ByteArrayHashMap<Integer> byteArrayHashMap0 = new ByteArrayHashMap<Integer>(72);
      byte[] byteArray0 = new byte[2];
      Integer integer0 = new Integer(72);
      byteArrayHashMap0.put(byteArray0, integer0);
      assertFalse(byteArrayHashMap0.isEmpty());
      
      byteArrayHashMap0.remove(byteArray0);
      assertEquals(0, byteArrayHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ByteArrayHashMap<Object> byteArrayHashMap0 = new ByteArrayHashMap<Object>(1, 1);
      byte[] byteArray0 = new byte[7];
      Object object0 = byteArrayHashMap0.get(byteArray0, 0, 1);
      assertNull(object0);
  }
}
