/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 12:06:52 GMT 2023
 */

package IntHashMapSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import IntHashMapSourceCode.IntHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class IntHashMap_ESTest extends IntHashMap_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20, 1.0F);
      int int0 = intHashMap0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      intHashMap0.put((-4347), (Object) null);
      int int0 = intHashMap0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      Object object0 = intHashMap0.remove(20);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap();
      intHashMap0.put(3229, "B8jO;Jrl\"f%B$!z");
      intHashMap0.remove(3229);
      assertEquals(0, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap();
      Object object0 = new Object();
      intHashMap0.put(678, object0);
      intHashMap0.put(678, "");
      assertFalse(intHashMap0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap();
      boolean boolean0 = intHashMap0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      intHashMap0.put((-4347), (Object) null);
      boolean boolean0 = intHashMap0.isEmpty();
      assertEquals(1, intHashMap0.size());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      Object object0 = intHashMap0.get((-4347));
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20, 1.0F);
      Object object0 = new Object();
      intHashMap0.put(0, object0);
      intHashMap0.get(0);
      assertEquals(1, intHashMap0.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(1007);
      intHashMap0.put(1007, "#\"O!|.;]BAUcSXx4Hx");
      boolean boolean0 = intHashMap0.containsValue("#\"O!|.;]BAUcSXx4Hx");
      assertFalse(intHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(423);
      boolean boolean0 = intHashMap0.containsValue("i+io?`1r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      intHashMap0.put(0, (Object) null);
      boolean boolean0 = intHashMap0.containsKey(0);
      assertFalse(intHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      boolean boolean0 = intHashMap0.containsKey((-435));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      intHashMap0.put((-1), "");
      boolean boolean0 = intHashMap0.contains("");
      assertFalse(intHashMap0.isEmpty());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      IntHashMap intHashMap0 = new IntHashMap(20);
      boolean boolean0 = intHashMap0.contains("");
      assertFalse(boolean0);
  }
}
