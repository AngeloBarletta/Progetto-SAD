/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 00:53:06 GMT 2023
 */

package ResultSetHelperSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import ResultSetHelperSourceCode.ResultSetHelper;
import java.lang.reflect.Array;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.Time;
import java.sql.Timestamp;
import java.util.Arrays;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ResultSetHelper_ESTest extends ResultSetHelper_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(12);
      //  // Unstable assertion: assertNotNull(class0);
      //  // Unstable assertion: assertEquals("class java.lang.String", class0.toString());
      //  // Unstable assertion: assertFalse(class0.isAnnotation());
      //  // Unstable assertion: assertFalse(class0.isPrimitive());
      //  // Unstable assertion: assertEquals(17, class0.getModifiers());
      //  // Unstable assertion: assertFalse(class0.isEnum());
      //  // Unstable assertion: assertFalse(class0.isSynthetic());
      //  // Unstable assertion: assertFalse(class0.isArray());
      //  // Unstable assertion: assertFalse(class0.isInterface());
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-359)).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(true, true, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0, resultSetMetaData1).when(resultSet0).getMetaData();
      doReturn(0, 0, 0, 0, 0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(true, true, true, true, true).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 7;
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      //  // Unstable assertion: assertNull(booleanArray0);
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      //  // Unstable assertion: assertNotNull(resultSet1);
      //  // Unstable assertion: assertSame(resultSet1, resultSet0);
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(7, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 0;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(4998, objectArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray1);
      //  // Unstable assertion: assertFalse(objectArray1.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray1, objectArray0);
      //  // Unstable assertion: assertEquals(4998, objectArray1.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass(0);
      //  // Unstable assertion: assertNotNull(class1);
      //  // Unstable assertion: assertSame(class1, class0);
      //  // Unstable assertion: assertFalse(class1.isEnum());
      //  // Unstable assertion: assertFalse(class1.isSynthetic());
      //  // Unstable assertion: assertFalse(class1.isInterface());
      //  // Unstable assertion: assertFalse(class1.isArray());
      //  // Unstable assertion: assertEquals(17, class1.getModifiers());
      //  // Unstable assertion: assertEquals("class java.lang.String", class1.toString());
      //  // Unstable assertion: assertFalse(class1.isPrimitive());
      //  // Unstable assertion: assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3029, 3029, 3029, 3029, 3032).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(false, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(0, objectArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      //  // Unstable assertion: assertEquals((-7), int0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(3032, stringArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(1664);
      //  // Unstable assertion: assertNull(class0);
      
      Class class1 = ResultSetHelper.typeToClass((-7));
      //  // Unstable assertion: assertNotNull(class1);
      //  // Unstable assertion: assertEquals("class java.lang.Boolean", class1.toString());
      //  // Unstable assertion: assertEquals(17, class1.getModifiers());
      //  // Unstable assertion: assertFalse(class1.isAnnotation());
      //  // Unstable assertion: assertFalse(class1.isArray());
      //  // Unstable assertion: assertFalse(class1.isInterface());
      //  // Unstable assertion: assertFalse(class1.isPrimitive());
      //  // Unstable assertion: assertFalse(class1.isEnum());
      //  // Unstable assertion: assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(3032);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric((-7));
      //  // Unstable assertion: assertFalse(boolean1);
      //  // Unstable assertion: assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric((-2428));
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertTrue(boolean2 == boolean1);
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray1);
      //  // Unstable assertion: assertFalse(objectArray1.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray1, objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray1.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray2);
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray0));
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray1));
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray0);
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray1);
      //  // Unstable assertion: assertEquals(0, objectArray2.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(646, 0, 0, (-3), (-3)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1616).when(resultSet0).getRow();
      doReturn("@tW", "@tW", (String) null, "", "").when(resultSet0).getString(anyInt());
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(true).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(1616, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3042;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(646, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(646, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1616, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(646, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray1);
      assertEquals(646, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray4 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray4);
      assertSame(stringArray4, stringArray1);
      assertSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray0);
      assertSame(stringArray4, stringArray3);
      assertEquals(646, stringArray4.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      assertFalse(boolean0);
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(91, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(646, 646, 3637, (-3114), (-4)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1616).when(resultSet0).getRow();
      doReturn("", "u8Mmmi>eh", "", "", "").when(resultSet0).getString(anyInt());
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(1616, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3042;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(646, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(646, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1616, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(646, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertEquals(646, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray4 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray4);
      assertSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray1);
      assertSame(stringArray4, stringArray0);
      assertSame(stringArray4, stringArray3);
      assertEquals(646, stringArray4.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      assertFalse(boolean0);
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(91, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(4469, 1, 1, 1918, 1306).when(resultSetMetaData0).getColumnCount();
      doReturn(";").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(1, 52, 6, 6, 1).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1306).when(resultSet0).getRow();
      doReturn(1).when(resultSet0).getType();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 273);
      assertNotNull(resultSetHelper0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(1306, int0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_NumericColumns = null;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1306, 1306, 1918, 273, (-2838)).when(resultSetMetaData1).getColumnCount();
      doReturn(";", "", "").when(resultSetMetaData1).getColumnLabel(anyInt());
      ResultSetMetaData resultSetMetaData2 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData2).getColumnCount();
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet1).toString();
      doReturn(false).when(resultSet1).absolute(anyInt());
      doReturn(false, false).when(resultSet1).first();
      doReturn(resultSetMetaData1, resultSetMetaData2).when(resultSet1).getMetaData();
      doReturn(0).when(resultSet1).getRow();
      doReturn(0).when(resultSet1).getType();
      resultSetHelper0.m_ResultSet = resultSet1;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(12);
      assertNotNull(class0);
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isAnnotation());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(4469, stringArray0.length);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = 273;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertEquals(0, booleanArray1.length);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      classArray0[1] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[2] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[3] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[4] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[5] = class5;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet2 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet2);
      assertFalse(resultSet2.equals((Object)resultSet0));
      assertSame(resultSet2, resultSet1);
      assertNotSame(resultSet2, resultSet0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertFalse(stringArray1.equals((Object)stringArray0));
      assertNotSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = 273;
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int2 = resultSetHelper0.getColumnCount();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertFalse(int2 == int0);
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class6 = ResultSetHelper.typeToClass(0);
      assertNotNull(class6);
      assertSame(class6, class0);
      assertFalse(class6.isInterface());
      assertFalse(class6.isArray());
      assertEquals(17, class6.getModifiers());
      assertFalse(class6.isPrimitive());
      assertFalse(class6.isEnum());
      assertFalse(class6.isSynthetic());
      assertEquals("class java.lang.String", class6.toString());
      assertFalse(class6.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(25, 5, 25, 25, 5).when(resultSetMetaData0).getColumnCount();
      doReturn("", ";n\"cR}|SzDDDp", "A!1jN8wj4%3}", ";n\"cR}|SzDDDp", (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(25, 5, 5, 25, 5).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(92).when(resultSet0).getRow();
      doReturn(5).when(resultSet0).getType();
      doReturn(true).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(92, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = 0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(5, classArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      resultSetHelper0.m_ResultSet = resultSet1;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      stringArray0[1] = "^!ucv1jkzu\"C&[rz2";
      stringArray0[2] = "ResultSetHelperSourceCode.ResultSetHelper";
      resultSetHelper0.m_NumericColumns = null;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      stringArray0[3] = "AV.m&";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-42);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getMaxRows();
      assertEquals((-42), int1);
      assertFalse(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray1);
      assertSame(classArray1, classArray0);
      assertEquals(5, classArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      int int2 = resultSetHelper0.getRowCount();
      assertEquals(0, int2);
      assertFalse(int2 == int1);
      assertFalse(int2 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(4, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-42));
      assertNull(class0);
      
      boolean boolean2 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-42), resultSetHelper0.getMaxRows());
      
      Boolean boolean3 = new Boolean("AV.m&");
      assertFalse(boolean3);
      assertNotNull(boolean3);
      assertTrue(boolean3.equals((Object)boolean1));
      assertTrue(boolean3.equals((Object)boolean0));
      assertTrue(boolean3.equals((Object)boolean2));
      
      boolean boolean4 = ResultSetHelper.typeIsNumeric((-1266));
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      
      boolean boolean5 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean5);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-1)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, true).when(resultSet0).first();
      doReturn(resultSetMetaData0, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(false, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      //  // Unstable assertion: assertEquals(93, int0);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(453, stringArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(1664);
      //  // Unstable assertion: assertNull(class0);
      
      Class class1 = ResultSetHelper.typeToClass(1);
      //  // Unstable assertion: assertNotNull(class1);
      //  // Unstable assertion: assertFalse(class1.isArray());
      //  // Unstable assertion: assertEquals("class java.lang.Character", class1.toString());
      //  // Unstable assertion: assertFalse(class1.isEnum());
      //  // Unstable assertion: assertFalse(class1.isSynthetic());
      //  // Unstable assertion: assertFalse(class1.isAnnotation());
      //  // Unstable assertion: assertFalse(class1.isInterface());
      //  // Unstable assertion: assertFalse(class1.isPrimitive());
      //  // Unstable assertion: assertEquals(17, class1.getModifiers());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(2227);
      //  // Unstable assertion: assertFalse(boolean0);
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(93);
      //  // Unstable assertion: assertTrue(boolean1);
      //  // Unstable assertion: assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric((-2428));
      //  // Unstable assertion: assertFalse(boolean2);
      //  // Unstable assertion: assertTrue(boolean2 == boolean0);
      //  // Unstable assertion: assertFalse(boolean2 == boolean1);
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray1);
      //  // Unstable assertion: assertFalse(objectArray1.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray1, objectArray0);
      //  // Unstable assertion: assertEquals(0, objectArray1.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(1616, (-1447), 2532, 3024, (-2)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1616).when(resultSet0).getRow();
      doReturn((String) null, "g.5ROy74=pZc", "kboN>#`%q[n(=", (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(true).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Object>[] classArray0 = (Class<Object>[]) Array.newInstance(Class.class, 1);
      Class<Object> class0 = Object.class;
      classArray0[0] = class0;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(1616, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3042;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(646, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(646, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1616, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(2, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(646, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray0);
      assertEquals(646, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray4 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray4);
      assertSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray3);
      assertSame(stringArray4, stringArray0);
      assertSame(stringArray4, stringArray1);
      assertEquals(646, stringArray4.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      assertFalse(boolean0);
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray1);
      assertEquals(91, classArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1806);
      assertFalse(boolean0);
      
      Class class0 = ResultSetHelper.typeToClass(1806);
      assertNull(class0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).first();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-6));
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-6), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-6), resultSetHelper0.getMaxRows());
      
      Class<Time>[] classArray0 = (Class<Time>[]) Array.newInstance(Class.class, 8);
      Class<Time> class1 = Time.class;
      classArray0[0] = class1;
      Class<Time> class2 = Time.class;
      classArray0[1] = class2;
      Class<Time> class3 = Time.class;
      classArray0[2] = class3;
      Class<Time> class4 = Time.class;
      classArray0[3] = class4;
      Class<Time> class5 = Time.class;
      classArray0[4] = class5;
      Class<Time> class6 = Time.class;
      classArray0[5] = class6;
      Class<Time> class7 = Time.class;
      classArray0[6] = class7;
      Class<Time> class8 = Time.class;
      classArray0[7] = class8;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-6), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-6), resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-6), resultSetHelper0.getMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric((-501));
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class class9 = ResultSetHelper.typeToClass((-6));
      assertNotNull(class9);
      assertFalse(class9.isPrimitive());
      assertFalse(class9.isAnnotation());
      assertEquals("class java.lang.Short", class9.toString());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertEquals(17, class9.getModifiers());
      assertFalse(class9.isInterface());
      assertFalse(class9.isArray());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = 7;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(7, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[U:XrzZ";
      stringArray0[1] = "#-%\"0L8pp*kx-]!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~1*9iav%AGL7KT0%";
      stringArray0[5] = "bAW?@)";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 483;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(483, int1);
      assertFalse(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(93);
      assertNotNull(class0);
      assertEquals("class java.sql.Timestamp", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1));
      assertFalse(boolean0);
      
      Class class1 = ResultSetHelper.typeToClass((-1));
      assertNotNull(class1);
      assertFalse(class1.equals((Object)class0));
      assertNotSame(class1, class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(resultSet1).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet1).getMetaData();
      resultSetHelper0.m_ResultSet = resultSet1;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = false;
      booleanArray0[8] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int2 = resultSetHelper0.getColumnCount();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int3 = resultSetHelper0.getRowCount();
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int4 = resultSetHelper0.getRowCount();
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int3);
      assertTrue(int4 == int2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-3));
      assertFalse(boolean0);
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(1589);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      assertNotNull(objectArray2);
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertNotSame(objectArray2, objectArray0);
      assertNotSame(objectArray2, objectArray1);
      assertEquals(0, objectArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(252);
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(646, (-7), 1, 91, 1616).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(1616).when(resultSet0).getRow();
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(1616, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3042;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(646, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(646, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1616, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(646, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray1);
      assertEquals(646, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray4 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray4);
      assertSame(stringArray4, stringArray1);
      assertSame(stringArray4, stringArray0);
      assertSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray3);
      assertEquals(646, stringArray4.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      assertFalse(boolean0);
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(91, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass((-1744));
      //  // Unstable assertion: assertNull(class0);
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-1744);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray1);
      //  // Unstable assertion: assertSame(stringArray1, stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray1.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray1);
      //  // Unstable assertion: assertFalse(objectArray1.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray1, objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray1.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass((-630));
      //  // Unstable assertion: assertNull(class1);
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(12);
      //  // Unstable assertion: assertFalse(boolean0);
      
      int int0 = resultSetHelper0.getRowCount();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray2);
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray0));
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray1));
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray0);
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray1);
      //  // Unstable assertion: assertEquals(1, objectArray2.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray3 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray3);
      //  // Unstable assertion: assertFalse(objectArray3.equals((Object)objectArray1));
      //  // Unstable assertion: assertFalse(objectArray3.equals((Object)objectArray2));
      //  // Unstable assertion: assertFalse(objectArray3.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray3, objectArray1);
      //  // Unstable assertion: assertNotSame(objectArray3, objectArray2);
      //  // Unstable assertion: assertNotSame(objectArray3, objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray3.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray4 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray4);
      //  // Unstable assertion: assertFalse(objectArray4.equals((Object)objectArray1));
      //  // Unstable assertion: assertFalse(objectArray4.equals((Object)objectArray0));
      //  // Unstable assertion: assertFalse(objectArray4.equals((Object)objectArray3));
      //  // Unstable assertion: assertFalse(objectArray4.equals((Object)objectArray2));
      //  // Unstable assertion: assertNotSame(objectArray4, objectArray1);
      //  // Unstable assertion: assertNotSame(objectArray4, objectArray0);
      //  // Unstable assertion: assertNotSame(objectArray4, objectArray3);
      //  // Unstable assertion: assertNotSame(objectArray4, objectArray2);
      //  // Unstable assertion: assertEquals(1, objectArray4.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Class class0 = ResultSetHelper.typeToClass(0);
      assertNotNull(class0);
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class class1 = ResultSetHelper.typeToClass((-4));
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(3623, 1111, 419, 1111, 3623).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1003).when(resultSet0).getType();
      doReturn(true, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(3623, stringArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      //  // Unstable assertion: assertNotNull(classArray0);
      //  // Unstable assertion: assertEquals(3623, classArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray1);
      //  // Unstable assertion: assertSame(stringArray1, stringArray0);
      //  // Unstable assertion: assertEquals(3623, stringArray1.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(4997, objectArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(0);
      //  // Unstable assertion: assertNotNull(class0);
      //  // Unstable assertion: assertFalse(class0.isPrimitive());
      //  // Unstable assertion: assertFalse(class0.isAnnotation());
      //  // Unstable assertion: assertEquals("class java.lang.String", class0.toString());
      //  // Unstable assertion: assertFalse(class0.isEnum());
      //  // Unstable assertion: assertEquals(17, class0.getModifiers());
      //  // Unstable assertion: assertFalse(class0.isArray());
      //  // Unstable assertion: assertFalse(class0.isInterface());
      //  // Unstable assertion: assertFalse(class0.isSynthetic());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 2330);
      assertNotNull(resultSetHelper0);
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(2330, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(2330, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(92);
      assertFalse(boolean0);
      
      Class class0 = ResultSetHelper.typeToClass(92);
      assertNotNull(class0);
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.sql.Time", class0.toString());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-468)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).first();
      doReturn(resultSetMetaData0, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      //  // Unstable assertion: assertNull(classArray0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray1);
      //  // Unstable assertion: assertEquals(715, stringArray1.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(0, objectArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(0);
      //  // Unstable assertion: assertNotNull(class0);
      //  // Unstable assertion: assertFalse(class0.isEnum());
      //  // Unstable assertion: assertFalse(class0.isSynthetic());
      //  // Unstable assertion: assertEquals(17, class0.getModifiers());
      //  // Unstable assertion: assertFalse(class0.isInterface());
      //  // Unstable assertion: assertFalse(class0.isArray());
      //  // Unstable assertion: assertFalse(class0.isAnnotation());
      //  // Unstable assertion: assertFalse(class0.isPrimitive());
      //  // Unstable assertion: assertEquals("class java.lang.String", class0.toString());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-6));
      assertNotNull(resultSetHelper0);
      assertEquals((-6), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      resultSetHelper0.m_ResultSet = resultSet1;
      assertEquals((-6), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertEquals((-6), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric((-6));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(1909, 1909, 1909, 1909, 1909).when(resultSetMetaData0).getColumnCount();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0, resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(3031, 3030).when(resultSet0).getRow();
      doReturn(1110, 93).when(resultSet0).getType();
      doReturn(true, false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-2995));
      assertNotNull(resultSetHelper0);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(1909, classArray0.length);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-1);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-2995);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-2995);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-2995);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = (-2995);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-2995);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1909, booleanArray0.length);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(1909, int0);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(1909, stringArray0.length);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean0);
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(1909, stringArray1.length);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Class class0 = ResultSetHelper.typeToClass((-1016));
      assertNull(class0);
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1909, booleanArray1.length);
      assertEquals((-2995), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(0);
      assertNotNull(class0);
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      String[] stringArray0 = new String[8];
      stringArray0[0] = "nYM?'GOm};Ew\"0";
      stringArray0[1] = "";
      stringArray0[2] = "1NM;_+#";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "k%&Dm=uFZcK";
      stringArray0[6] = "";
      stringArray0[7] = "";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-467));
      assertFalse(boolean0);
      
      Class class1 = ResultSetHelper.typeToClass((-2));
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals("class java.lang.String", class1.toString());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isAnnotation());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class2 = ResultSetHelper.typeToClass(8);
      assertNotNull(class2);
      assertFalse(class2.equals((Object)class1));
      assertFalse(class2.equals((Object)class0));
      assertNotSame(class2, class1);
      assertNotSame(class2, class0);
      assertFalse(class2.isInterface());
      assertFalse(class2.isArray());
      assertEquals(17, class2.getModifiers());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertEquals("class java.lang.Double", class2.toString());
      assertFalse(class2.isAnnotation());
      assertFalse(class2.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-324)).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true).when(resultSet0).first();
      doReturn(resultSetMetaData0, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(true, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      //  // Unstable assertion: assertNull(classArray0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNull(stringArray1);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(4997, objectArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(0);
      //  // Unstable assertion: assertNotNull(class0);
      //  // Unstable assertion: assertFalse(class0.isPrimitive());
      //  // Unstable assertion: assertEquals(17, class0.getModifiers());
      //  // Unstable assertion: assertEquals("class java.lang.String", class0.toString());
      //  // Unstable assertion: assertFalse(class0.isInterface());
      //  // Unstable assertion: assertFalse(class0.isArray());
      //  // Unstable assertion: assertFalse(class0.isEnum());
      //  // Unstable assertion: assertFalse(class0.isSynthetic());
      //  // Unstable assertion: assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(1616).when(resultSet0).getRow();
      doReturn((String) null, (String) null, (String) null, (String) null, (String) null).when(resultSet0).getString(anyInt());
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(1616, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3042;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(646, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(646, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray0);
      assertEquals(1616, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(646, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray1);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray0);
      assertEquals(646, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray4 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray4);
      assertSame(stringArray4, stringArray1);
      assertSame(stringArray4, stringArray2);
      assertSame(stringArray4, stringArray0);
      assertSame(stringArray4, stringArray3);
      assertEquals(646, stringArray4.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      assertFalse(boolean0);
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(91, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Float>[] classArray0 = (Class<Float>[]) Array.newInstance(Class.class, 2);
      Class<Float> class0 = Float.class;
      resultSetHelper0.m_ColumnCount = 1;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      classArray0[0] = class0;
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Float> class1 = Float.class;
      classArray0[1] = class1;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      assertNotNull(objectArray2);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(0, objectArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class2 = ResultSetHelper.typeToClass(91);
      assertNotNull(class2);
      assertFalse(class2.isArray());
      assertFalse(class2.isInterface());
      assertEquals(1, class2.getModifiers());
      assertEquals("class java.sql.Date", class2.toString());
      assertFalse(class2.isSynthetic());
      assertFalse(class2.isEnum());
      assertFalse(class2.isPrimitive());
      assertFalse(class2.isAnnotation());
      
      Class class3 = ResultSetHelper.typeToClass(2190);
      assertNull(class3);
      
      Class class4 = ResultSetHelper.typeToClass(822);
      assertNull(class4);
      
      Class class5 = ResultSetHelper.typeToClass((-899));
      assertNull(class5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-2376)).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, true, false).when(resultSet0).first();
      doReturn(resultSetMetaData0, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn((Object) null, (Object) null, (Object) null, (Object) null, (Object) null).when(resultSet0).getObject(anyInt());
      doReturn(false, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 2634;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Long>[] classArray0 = (Class<Long>[]) Array.newInstance(Class.class, 7);
      Class<Long> class0 = Long.class;
      classArray0[0] = class0;
      Class<Long> class1 = Long.class;
      classArray0[1] = class1;
      Class<Long> class2 = Long.class;
      resultSetHelper0.m_ColumnCount = 2634;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      classArray0[2] = class2;
      Class<Long> class3 = Long.class;
      classArray0[3] = class3;
      Class<Long> class4 = Long.class;
      classArray0[4] = class4;
      Class<Long> class5 = Long.class;
      classArray0[5] = class5;
      Class<Long> class6 = Long.class;
      classArray0[6] = class6;
      resultSetHelper0.m_ColumnClasses = classArray0;
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray1);
      //  // Unstable assertion: assertFalse(objectArray1.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray1, objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray1.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray2);
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray1));
      //  // Unstable assertion: assertFalse(objectArray2.equals((Object)objectArray0));
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray1);
      //  // Unstable assertion: assertNotSame(objectArray2, objectArray0);
      //  // Unstable assertion: assertEquals(0, objectArray2.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(6, stringArray0.length);
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 2634;
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(2634, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-409));
      //  // Unstable assertion: assertFalse(boolean0);
      
      Class class7 = ResultSetHelper.typeToClass(2634);
      //  // Unstable assertion: assertNull(class7);
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      //  // Unstable assertion: assertNull(booleanArray0);
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      //  // Unstable assertion: assertEquals(2634, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(true, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 1);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      //  // Unstable assertion: assertEquals(1, int0);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      //  // Unstable assertion: assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      //  // Unstable assertion: assertNotNull(booleanArray0);
      //  // Unstable assertion: assertEquals(0, booleanArray0.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 1;
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      Class<Timestamp>[] classArray0 = (Class<Timestamp>[]) Array.newInstance(Class.class, 6);
      Class<Timestamp> class0 = Timestamp.class;
      classArray0[0] = class0;
      Class<Timestamp> class1 = Timestamp.class;
      classArray0[1] = class1;
      Class<Timestamp> class2 = Timestamp.class;
      classArray0[2] = class2;
      Class<Timestamp> class3 = Timestamp.class;
      classArray0[3] = class3;
      Class<Timestamp> class4 = Timestamp.class;
      classArray0[4] = class4;
      Class<Timestamp> class5 = Timestamp.class;
      classArray0[5] = class5;
      resultSetHelper0.m_ColumnCount = 1;
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnClasses = classArray0;
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      //  // Unstable assertion: assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      //  // Unstable assertion: assertNotNull(booleanArray1);
      //  // Unstable assertion: assertSame(booleanArray1, booleanArray0);
      //  // Unstable assertion: assertEquals(0, booleanArray1.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      //  // Unstable assertion: assertNotNull(classArray1);
      //  // Unstable assertion: assertEquals(6, classArray1.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      //  // Unstable assertion: assertNotNull(classArray2);
      //  // Unstable assertion: assertSame(classArray2, classArray1);
      //  // Unstable assertion: assertEquals(6, classArray2.length);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getMaxRows();
      //  // Unstable assertion: assertEquals(1, int1);
      //  // Unstable assertion: assertTrue(int1 == int0);
      //  // Unstable assertion: assertEquals(1, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class6 = ResultSetHelper.typeToClass(1003);
      //  // Unstable assertion: assertNull(class6);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      resultSetHelper0.m_RowCount = (-2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ResultSet = resultSet0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSetMetaData resultSetMetaData2 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSetMetaData resultSetMetaData3 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet2).toString();
      doReturn(true, true).when(resultSet2).first();
      doReturn(false, false).when(resultSet2).next();
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray1);
      assertSame(stringArray2, stringArray0);
      assertEquals(0, stringArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ResultSet = resultSet2;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(1, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals((-2), int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray1);
      assertSame(classArray1, classArray0);
      assertEquals(0, classArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray3 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray3);
      assertSame(stringArray3, stringArray0);
      assertSame(stringArray3, stringArray2);
      assertSame(stringArray3, stringArray1);
      assertEquals(0, stringArray3.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(1, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals((-2), int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet3 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet3);
      assertFalse(resultSet3.equals((Object)resultSet1));
      assertFalse(resultSet3.equals((Object)resultSet0));
      assertNotSame(resultSet3, resultSet1);
      assertNotSame(resultSet3, resultSet0);
      assertSame(resultSet3, resultSet2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet4 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet4);
      assertFalse(resultSet4.equals((Object)resultSet1));
      assertFalse(resultSet4.equals((Object)resultSet0));
      assertSame(resultSet4, resultSet3);
      assertNotSame(resultSet4, resultSet1);
      assertNotSame(resultSet4, resultSet0);
      assertSame(resultSet4, resultSet2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-2));
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray2);
      assertSame(classArray2, classArray0);
      assertSame(classArray2, classArray1);
      assertEquals(0, classArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray2 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertEquals(0, booleanArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass((-2));
      assertNotNull(class1);
      assertSame(class1, class0);
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isEnum());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 715);
      assertNotNull(resultSetHelper0);
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnClasses = null;
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 715;
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(715, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      //  // Unstable assertion: assertNotNull(resultSetHelper0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      //  // Unstable assertion: assertNotNull(objectArray0);
      //  // Unstable assertion: assertEquals(1, objectArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      //  // Unstable assertion: assertEquals(0, int0);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      //  // Unstable assertion: assertNotNull(stringArray0);
      //  // Unstable assertion: assertEquals(0, stringArray0.length);
      //  // Unstable assertion: assertEquals(0, resultSetHelper0.getMaxRows());
      //  // Unstable assertion: assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-4420));
      //  // Unstable assertion: assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = 0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = (-346);
      assertEquals((-346), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = 2805;
      assertEquals(2805, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      int int1 = resultSetHelper0.getMaxRows();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(2);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-1));
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = new boolean[9];
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      booleanArray0[0] = false;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      resultSetHelper0.m_MaxRows = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      booleanArray0[5] = true;
      booleanArray0[6] = false;
      booleanArray0[7] = true;
      booleanArray0[8] = false;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, true, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(9, booleanArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(4);
      assertNotNull(class0);
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Integer", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      int int1 = resultSetHelper0.getMaxRows();
      assertEquals((-1), int1);
      assertFalse(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray2 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {false, true, true, true, true, true, false, true, false}, booleanArray2));
      assertNotNull(booleanArray2);
      assertSame(booleanArray2, booleanArray1);
      assertSame(booleanArray2, booleanArray0);
      assertEquals(9, booleanArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-1), resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 91;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-5);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = new String[0];
      boolean[] booleanArray0 = new boolean[1];
      booleanArray0[0] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {true}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(1, booleanArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_NumericColumns = booleanArray1;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals((-5), int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-5));
      assertNotNull(class0);
      assertEquals("class java.lang.Long", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet2 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet2);
      assertSame(resultSet2, resultSet1);
      assertSame(resultSet2, resultSet0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray0);
      assertEquals(0, classArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getMaxRows();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(12);
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 7;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = 0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass(0);
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(8);
      assertTrue(boolean0);
      
      Class class0 = ResultSetHelper.typeToClass(4241);
      assertNull(class0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet0).toString();
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 4241;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean1 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean1);
      assertFalse(boolean1 == boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 8;
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = new String[6];
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      stringArray0[0] = "|E";
      stringArray0[1] = "";
      stringArray0[2] = "-w";
      stringArray0[3] = "";
      stringArray0[4] = "";
      stringArray0[5] = "uP5>:\"P[NJ_Vt9\"DwT(";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(6, stringArray1.length);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(4241, int0);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet2 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet2);
      assertSame(resultSet2, resultSet1);
      assertSame(resultSet2, resultSet0);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray1);
      assertEquals(8, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(1111);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isArray());
      assertFalse(class0.isInterface());
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[8];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      Class<Timestamp>[] classArray0 = (Class<Timestamp>[]) Array.newInstance(Class.class, 9);
      Class<Timestamp> class1 = Timestamp.class;
      classArray0[0] = class1;
      Class<Timestamp> class2 = Timestamp.class;
      classArray0[1] = class2;
      Class<Timestamp> class3 = Timestamp.class;
      classArray0[2] = class3;
      Class<Timestamp> class4 = Timestamp.class;
      classArray0[3] = class4;
      Class<Timestamp> class5 = Timestamp.class;
      classArray0[4] = class5;
      Class<Timestamp> class6 = Timestamp.class;
      classArray0[5] = class6;
      Class<Timestamp> class7 = Timestamp.class;
      classArray0[6] = class7;
      Class<Timestamp> class8 = Timestamp.class;
      classArray0[7] = class8;
      Class<Timestamp> class9 = Timestamp.class;
      classArray0[8] = class9;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = false;
      booleanArray0[6] = false;
      booleanArray0[7] = false;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray1);
      assertEquals(9, classArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1111);
      assertFalse(boolean0);
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = new boolean[0];
      assertFalse(booleanArray1.equals((Object)booleanArray0));
      
      resultSetHelper0.m_NumericColumns = booleanArray1;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray2 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray2));
      assertNotNull(booleanArray2);
      assertFalse(booleanArray2.equals((Object)booleanArray0));
      assertNotSame(booleanArray2, booleanArray0);
      assertSame(booleanArray2, booleanArray1);
      assertEquals(0, booleanArray2.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class10 = ResultSetHelper.typeToClass((-320));
      assertNull(class10);
      
      boolean boolean1 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(1111);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray3 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray3));
      assertNotNull(booleanArray3);
      assertFalse(booleanArray3.equals((Object)booleanArray0));
      assertSame(booleanArray3, booleanArray1);
      assertNotSame(booleanArray3, booleanArray0);
      assertSame(booleanArray3, booleanArray2);
      assertEquals(0, booleanArray3.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(3106);
      assertNull(class0);
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1444);
      assertFalse(boolean0);
      
      Class class1 = ResultSetHelper.typeToClass(7);
      assertNotNull(class1);
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals("class java.lang.Double", class1.toString());
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isAnnotation());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(7);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(1444);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 645;
      assertEquals(645, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(645, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(645, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1111);
      assertFalse(boolean0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ResultSet = null;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ResultSet = null;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-778));
      assertNull(class0);
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNull(stringArray1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getMaxRows();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-778);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric((-5));
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      int int2 = resultSetHelper0.getColumnCount();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      int int3 = resultSetHelper0.getRowCount();
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      boolean boolean2 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean2);
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass(0);
      assertNotNull(class1);
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isPrimitive());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNull(stringArray2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      int int4 = resultSetHelper0.getRowCount();
      assertEquals(0, int4);
      assertTrue(int4 == int1);
      assertTrue(int4 == int0);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      int int5 = resultSetHelper0.getRowCount();
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int4);
      assertTrue(int5 == int3);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      boolean boolean3 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean3);
      assertFalse(boolean3 == boolean1);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-778), resultSetHelper0.getMaxRows());
      
      boolean boolean4 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean4);
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4 == boolean1);
      assertTrue(boolean4 == boolean2);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      doReturn(false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = new String[4];
      stringArray0[0] = "";
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      stringArray0[1] = "";
      stringArray0[2] = "";
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNull(stringArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      stringArray0[3] = "W$?9I";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      assertNotNull(objectArray2);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(0, objectArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(0);
      assertNotNull(class0);
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int2 = resultSetHelper0.getColumnCount();
      assertEquals(0, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int3 = resultSetHelper0.getRowCount();
      assertEquals((-1), int3);
      assertFalse(int3 == int0);
      assertFalse(int3 == int1);
      assertFalse(int3 == int2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet1).getMetaData();
      resultSetHelper0.m_RowCount = (-2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ResultSet = resultSet1;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet2 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null).when(resultSet2).toString();
      doReturn(false, false).when(resultSet2).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet2).getMetaData();
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNull(stringArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ResultSet = resultSet2;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals((-2), int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNull(stringArray2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals((-2), int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet3 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet3);
      assertFalse(resultSet3.equals((Object)resultSet1));
      assertFalse(resultSet3.equals((Object)resultSet0));
      assertNotSame(resultSet3, resultSet1);
      assertNotSame(resultSet3, resultSet0);
      assertSame(resultSet3, resultSet2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet4 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet4);
      assertFalse(resultSet4.equals((Object)resultSet0));
      assertFalse(resultSet4.equals((Object)resultSet1));
      assertNotSame(resultSet4, resultSet0);
      assertSame(resultSet4, resultSet3);
      assertNotSame(resultSet4, resultSet1);
      assertSame(resultSet4, resultSet2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-2));
      assertNotNull(class0);
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      assertEquals("class java.lang.String", class0.toString());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      assertNull(classArray2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray2 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray2);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(5);
      assertTrue(boolean0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 1746);
      assertNotNull(resultSetHelper0);
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1746, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = 0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = (-1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 1);
      Class<Timestamp>[] classArray1 = (Class<Timestamp>[]) Array.newInstance(Class.class, 0);
      resultSetHelper0.m_ColumnClasses = classArray1;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class<Integer> class0 = Integer.class;
      classArray0[0] = class0;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray2);
      assertEquals(1, classArray2.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass((-1));
      assertNotNull(class1);
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isAnnotation());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 1);
      assertNotNull(resultSetHelper0);
      assertEquals(1, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(1, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(1);
      assertNotNull(class0);
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals("class java.lang.Character", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1));
      assertFalse(boolean0);
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(2);
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isPrimitive());
      assertEquals("class java.lang.Double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1361));
      assertFalse(boolean0);
      
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-1361));
      assertNotNull(resultSetHelper0);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 695;
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[0];
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(2006);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(4);
      assertTrue(boolean2);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      
      Class class1 = ResultSetHelper.typeToClass((-2736));
      assertNull(class1);
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(0, booleanArray1.length);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      assertNotNull(objectArray2);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(0, objectArray2.length);
      assertEquals((-1361), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class2 = ResultSetHelper.typeToClass((-3197));
      assertNull(class2);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-3539);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-3539);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals((-3539), int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = (-3539);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals((-3539), int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = (-3539);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-3539), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = (-3539);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-3539), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 1148;
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1148, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1148, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1148, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1148, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertTrue(resultSetHelper0.hasMaxRows());
      assertEquals(1148, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass((-3539));
      assertNull(class0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = (-2996);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 2536;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = (-2996);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(2536, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getMaxRows();
      assertEquals((-2996), int1);
      assertFalse(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals((-2996), resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(0);
      assertFalse(boolean0);
      
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, (-1));
      assertNotNull(resultSetHelper0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ResultSet = null;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet0 = resultSetHelper0.getResultSet();
      assertNull(resultSet0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean1 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = new String[0];
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray1);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNull(resultSet1);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric((-1425));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      boolean[] booleanArray2 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray2);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray3 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray3);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray2);
      assertSame(stringArray2, stringArray0);
      assertSame(stringArray2, stringArray1);
      assertEquals(0, stringArray2.length);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(3);
      assertNotNull(class0);
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.lang.Double", class0.toString());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isPrimitive());
      assertEquals(17, class0.getModifiers());
      
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = new String[0];
      boolean[] booleanArray0 = new boolean[9];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      booleanArray0[4] = true;
      booleanArray0[5] = true;
      booleanArray0[6] = true;
      booleanArray0[7] = true;
      booleanArray0[8] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = (-2292);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals((-2292), int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet0 = resultSetHelper0.getResultSet();
      assertNull(resultSet0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(0, stringArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNull(resultSet1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = 4883;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(4883, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1806));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, 0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      ResultSet resultSet0 = resultSetHelper0.getResultSet();
      assertNull(resultSet0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(1141);
      assertNull(class0);
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNull(stringArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int2 = resultSetHelper0.getMaxRows();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int3 = resultSetHelper0.getMaxRows();
      assertEquals(0, int3);
      assertTrue(int3 == int2);
      assertTrue(int3 == int1);
      assertTrue(int3 == int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-2941));
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int2 = resultSetHelper0.getRowCount();
      assertEquals(0, int2);
      assertTrue(int2 == int0);
      assertTrue(int2 == int1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int3 = resultSetHelper0.getRowCount();
      assertEquals(0, int3);
      assertTrue(int3 == int0);
      assertTrue(int3 == int1);
      assertTrue(int3 == int2);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      assertNull(classArray2);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray3 = resultSetHelper0.getColumnClasses();
      assertNull(classArray3);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int4 = resultSetHelper0.getColumnCount();
      assertEquals(0, int4);
      assertTrue(int4 == int0);
      assertTrue(int4 == int1);
      assertTrue(int4 == int2);
      assertTrue(int4 == int3);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int5 = resultSetHelper0.getMaxRows();
      assertEquals(0, int5);
      assertTrue(int5 == int1);
      assertTrue(int5 == int2);
      assertTrue(int5 == int0);
      assertTrue(int5 == int3);
      assertTrue(int5 == int4);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, 0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class<String>[] classArray1 = (Class<String>[]) Array.newInstance(Class.class, 1);
      Class<String> class0 = String.class;
      classArray1[0] = class0;
      resultSetHelper0.m_ColumnClasses = classArray1;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnClasses = null;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_RowCount = 3773;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNull(stringArray1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass(512);
      assertNull(class1);
      
      ResultSet resultSet0 = resultSetHelper0.getResultSet();
      assertNull(resultSet0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray2 = resultSetHelper0.getColumnNames();
      assertNull(stringArray2);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertFalse(boolean0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[4];
      booleanArray0[0] = true;
      booleanArray0[1] = false;
      booleanArray0[2] = false;
      booleanArray0[3] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 2);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      Class<Character> class1 = Character.class;
      classArray0[1] = class1;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNotNull(classArray1);
      assertEquals(2, classArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getRowCount();
      assertEquals(0, int1);
      assertTrue(int1 == int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      boolean boolean0 = ResultSetHelper.typeIsNumeric(318);
      assertFalse(boolean0);
      
      ResultSetHelper resultSetHelper0 = new ResultSetHelper((ResultSet) null, 1898);
      assertNotNull(resultSetHelper0);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getMaxRows();
      assertEquals(1898, int0);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[5];
      booleanArray0[0] = false;
      resultSetHelper0.m_ResultSet = null;
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray0 = resultSetHelper0.getColumnClasses();
      assertNull(classArray0);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      booleanArray0[1] = false;
      Class[] classArray1 = resultSetHelper0.getColumnClasses();
      assertNull(classArray1);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      booleanArray0[2] = false;
      booleanArray0[3] = false;
      String[] stringArray0 = new String[5];
      stringArray0[0] = "ResultSetHelperSourceCode.ResultSetHelper";
      stringArray0[1] = "t.'";
      stringArray0[2] = "";
      stringArray0[3] = "9h{'W1{`e-We";
      stringArray0[4] = "";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      booleanArray0[4] = false;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(3);
      assertTrue(boolean1);
      assertFalse(boolean1 == boolean0);
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric(1898);
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = false;
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray1);
      assertSame(stringArray1, stringArray0);
      assertEquals(5, stringArray1.length);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray2 = resultSetHelper0.getColumnClasses();
      assertNull(classArray2);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {false, false, false, false, false}, booleanArray1));
      assertNotNull(booleanArray1);
      assertSame(booleanArray1, booleanArray0);
      assertEquals(5, booleanArray1.length);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray3 = resultSetHelper0.getColumnClasses();
      assertNull(classArray3);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class[] classArray4 = resultSetHelper0.getColumnClasses();
      assertNull(classArray4);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(0, int1);
      assertFalse(int1 == int0);
      assertEquals(1898, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = 0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray1);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class<Character>[] classArray0 = (Class<Character>[]) Array.newInstance(Class.class, 9);
      Class<Character> class0 = Character.class;
      classArray0[0] = class0;
      Class<Character> class1 = Character.class;
      classArray0[1] = class1;
      Class<Character> class2 = Character.class;
      classArray0[2] = class2;
      Class<Character> class3 = Character.class;
      classArray0[3] = class3;
      Class<Character> class4 = Character.class;
      classArray0[4] = class4;
      Class<Character> class5 = Character.class;
      classArray0[5] = class5;
      Class<Character> class6 = Character.class;
      classArray0[6] = class6;
      Class<Character> class7 = Character.class;
      classArray0[7] = class7;
      Class<Character> class8 = Character.class;
      classArray0[8] = class8;
      resultSetHelper0.m_ColumnClasses = classArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 3;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false, false, false, false).when(resultSet1).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet1).getMetaData();
      resultSetHelper0.m_ResultSet = resultSet1;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[0];
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(3, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = 3417;
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNull(stringArray0);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(3, int1);
      assertTrue(int1 == int0);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class9 = ResultSetHelper.typeToClass((-5));
      assertNotNull(class9);
      assertFalse(class9.isAnnotation());
      assertFalse(class9.isPrimitive());
      assertEquals("class java.lang.Long", class9.toString());
      assertFalse(class9.isEnum());
      assertFalse(class9.isSynthetic());
      assertEquals(17, class9.getModifiers());
      assertFalse(class9.isInterface());
      assertFalse(class9.isArray());
      
      resultSetHelper0.m_RowCount = 3;
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnNames = null;
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray2 = resultSetHelper0.getCells();
      assertNotNull(objectArray2);
      assertFalse(objectArray2.equals((Object)objectArray1));
      assertFalse(objectArray2.equals((Object)objectArray0));
      assertNotSame(objectArray2, objectArray1);
      assertNotSame(objectArray2, objectArray0);
      assertEquals(0, objectArray2.length);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int2 = resultSetHelper0.getColumnCount();
      assertEquals(3, int2);
      assertTrue(int2 == int1);
      assertTrue(int2 == int0);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      Class class10 = ResultSetHelper.typeToClass(3);
      assertNotNull(class10);
      assertFalse(class10.equals((Object)class9));
      assertNotSame(class10, class9);
      assertFalse(class10.isArray());
      assertFalse(class10.isInterface());
      assertFalse(class10.isPrimitive());
      assertEquals("class java.lang.Double", class10.toString());
      assertEquals(17, class10.getModifiers());
      assertFalse(class10.isEnum());
      assertFalse(class10.isSynthetic());
      assertFalse(class10.isAnnotation());
      
      Object[][] objectArray3 = resultSetHelper0.getCells();
      assertNotNull(objectArray3);
      assertFalse(objectArray3.equals((Object)objectArray0));
      assertFalse(objectArray3.equals((Object)objectArray2));
      assertFalse(objectArray3.equals((Object)objectArray1));
      assertNotSame(objectArray3, objectArray0);
      assertNotSame(objectArray3, objectArray2);
      assertNotSame(objectArray3, objectArray1);
      assertEquals(0, objectArray3.length);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      System.setCurrentTimeMillis(3);
      Object[][] objectArray4 = resultSetHelper0.getCells();
      assertNotNull(objectArray4);
      assertFalse(objectArray4.equals((Object)objectArray3));
      assertFalse(objectArray4.equals((Object)objectArray2));
      assertFalse(objectArray4.equals((Object)objectArray0));
      assertFalse(objectArray4.equals((Object)objectArray1));
      assertNotSame(objectArray4, objectArray3);
      assertNotSame(objectArray4, objectArray2);
      assertNotSame(objectArray4, objectArray0);
      assertNotSame(objectArray4, objectArray1);
      assertEquals(0, objectArray4.length);
      assertEquals(3417, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Class class0 = ResultSetHelper.typeToClass(12);
      assertNotNull(class0);
      assertEquals("class java.lang.String", class0.toString());
      assertEquals(17, class0.getModifiers());
      assertFalse(class0.isAnnotation());
      assertFalse(class0.isInterface());
      assertFalse(class0.isArray());
      assertFalse(class0.isPrimitive());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn((-359)).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData1).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(true, true, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0, resultSetMetaData1).when(resultSet0).getMetaData();
      doReturn(0, 0, 0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(true, true, false).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = 7;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_ColumnCount = 0;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      assertNotNull(resultSet1);
      assertSame(resultSet1, resultSet0);
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(7, resultSetHelper0.getMaxRows());
      assertTrue(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_MaxRows = 0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      Class class1 = ResultSetHelper.typeToClass(0);
      assertNotNull(class1);
      assertSame(class1, class0);
      assertFalse(class1.isAnnotation());
      assertEquals(17, class1.getModifiers());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isInterface());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isPrimitive());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertTrue(Arrays.equals(new boolean[] {}, booleanArray0));
      assertNotNull(booleanArray0);
      assertEquals(0, booleanArray0.length);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_RowCount = 7;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(7, int0);
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "[U:XrzZ";
      stringArray0[1] = "#-%\"0L8pp*kx-]!";
      stringArray0[2] = "";
      stringArray0[3] = "";
      stringArray0[4] = "~1*9iav%AGL7KT0%";
      stringArray0[5] = "bAW?@)";
      resultSetHelper0.m_ColumnNames = stringArray0;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_ColumnCount = 483;
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.initialize();
      assertFalse(resultSetHelper0.hasMaxRows());
      assertEquals(0, resultSetHelper0.getMaxRows());
      
      resultSetHelper0.m_MaxRows = (-1);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int1 = resultSetHelper0.getColumnCount();
      assertEquals(483, int1);
      assertFalse(int1 == int0);
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.m_Initialized = true;
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals((-1), resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(93);
      assertNotNull(class0);
      assertFalse(class0.isArray());
      assertFalse(class0.isEnum());
      assertFalse(class0.isSynthetic());
      assertFalse(class0.isAnnotation());
      assertEquals("class java.sql.Timestamp", class0.toString());
      assertFalse(class0.isInterface());
      assertEquals(1, class0.getModifiers());
      assertFalse(class0.isPrimitive());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric((-1));
      assertFalse(boolean0);
      
      Class class1 = ResultSetHelper.typeToClass((-1));
      assertNotNull(class1);
      assertFalse(class1.equals((Object)class0));
      assertNotSame(class1, class0);
      assertFalse(class1.isPrimitive());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.String", class1.toString());
      assertFalse(class1.isArray());
      assertFalse(class1.isInterface());
      assertFalse(class1.isSynthetic());
      assertFalse(class1.isEnum());
      assertFalse(class1.isAnnotation());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(true, false, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      assertNotNull(resultSetHelper0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertNotNull(objectArray0);
      assertEquals(0, objectArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = false;
      booleanArray0[1] = false;
      booleanArray0[2] = true;
      booleanArray0[3] = false;
      booleanArray0[4] = false;
      booleanArray0[5] = true;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      int int0 = resultSetHelper0.getRowCount();
      assertEquals(0, int0);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      assertEquals(0, stringArray0.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      resultSetHelper0.initialize();
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
      
      Class class0 = ResultSetHelper.typeToClass(1664);
      assertNull(class0);
      
      Class class1 = ResultSetHelper.typeToClass(1);
      assertNotNull(class1);
      assertFalse(class1.isAnnotation());
      assertFalse(class1.isPrimitive());
      assertFalse(class1.isInterface());
      assertFalse(class1.isArray());
      assertEquals(17, class1.getModifiers());
      assertEquals("class java.lang.Character", class1.toString());
      assertFalse(class1.isEnum());
      assertFalse(class1.isSynthetic());
      
      boolean boolean0 = ResultSetHelper.typeIsNumeric(2227);
      assertFalse(boolean0);
      
      boolean boolean1 = ResultSetHelper.typeIsNumeric(1);
      assertFalse(boolean1);
      assertTrue(boolean1 == boolean0);
      
      boolean boolean2 = ResultSetHelper.typeIsNumeric((-2428));
      assertFalse(boolean2);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      
      Object[][] objectArray1 = resultSetHelper0.getCells();
      assertNotNull(objectArray1);
      assertFalse(objectArray1.equals((Object)objectArray0));
      assertNotSame(objectArray1, objectArray0);
      assertEquals(0, objectArray1.length);
      assertEquals(0, resultSetHelper0.getMaxRows());
      assertFalse(resultSetHelper0.hasMaxRows());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(646, (-7), 1616, 646, 91).when(resultSetMetaData0).getColumnCount();
      doReturn(646, 2168, 0, 91, (-2581)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      Float float0 = new Float((float) (-2581));
      Long long0 = new Long((-1L));
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, true).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn("", "", resultSetMetaData1, float0, long0).when(resultSet0).getObject(anyInt());
      doReturn(1616).when(resultSet0).getRow();
      doReturn(1616).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      doReturn(true).when(resultSet0).next();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      resultSetHelper0.getRowCount();
      resultSetHelper0.m_ColumnCount = 3042;
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getNumericColumns();
      resultSetHelper0.getCells();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.m_ColumnCount = (-7);
      boolean boolean0 = ResultSetHelper.typeIsNumeric(1616);
      resultSetHelper0.getColumnClasses();
      boolean boolean1 = ResultSetHelper.typeIsNumeric((-2861));
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(2181, 2181, 2181, 2181, 2181).when(resultSetMetaData0).getColumnCount();
      doReturn("[S{q", "[S{q", "[S{q", "[S{q", "=q]?GsK").when(resultSetMetaData0).getColumnLabel(anyInt());
      doReturn(0, 2954, 8, (-5), (-962)).when(resultSetMetaData0).getColumnType(anyInt());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet0).toString();
      doReturn(true, false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, (-2958));
      resultSetHelper0.getRowCount();
      resultSetHelper0.getColumnNames();
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      resultSetHelper0.m_MaxRows = 93;
      resultSetHelper0.getCells();
      resultSetHelper0.getRowCount();
      ResultSet resultSet1 = resultSetHelper0.getResultSet();
      resultSetHelper0.m_RowCount = (-2958);
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnCount();
      resultSetHelper0.getRowCount();
      resultSetHelper0.m_ResultSet = resultSet1;
      resultSetHelper0.getMaxRows();
      resultSetHelper0.m_Initialized = true;
      resultSetHelper0.hasMaxRows();
      resultSetHelper0.getMaxRows();
      resultSetHelper0.getColumnClasses();
      resultSetHelper0.m_NumericColumns = booleanArray0;
      resultSetHelper0.getColumnCount();
      resultSetHelper0.getColumnCount();
      resultSetHelper0.getColumnClasses();
      resultSetHelper0.getRowCount();
      ResultSetHelper.typeToClass(1);
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getColumnClasses();
      resultSetHelper0.getNumericColumns();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.getNumericColumns();
      resultSetHelper0.hasMaxRows();
      Class class0 = ResultSetHelper.typeToClass(93);
      assertEquals("class java.sql.Timestamp", class0.toString());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn((ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null, (ResultSetMetaData) null).when(resultSet0).getMetaData();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 1599);
      resultSetHelper0.getColumnNames();
      resultSetHelper0.m_MaxRows = 1599;
      resultSetHelper0.m_Initialized = false;
      resultSetHelper0.m_NumericColumns = null;
      resultSetHelper0.m_NumericColumns = null;
      resultSetHelper0.m_NumericColumns = null;
      resultSetHelper0.getNumericColumns();
      resultSetHelper0.getColumnClasses();
      resultSetHelper0.getColumnNames();
      resultSetHelper0.m_ColumnNames = null;
      resultSetHelper0.getNumericColumns();
      resultSetHelper0.getColumnClasses();
      resultSetHelper0.hasMaxRows();
      resultSetHelper0.initialize();
      resultSetHelper0.getRowCount();
      int int0 = resultSetHelper0.getColumnCount();
      resultSetHelper0.m_NumericColumns = null;
      resultSetHelper0.getMaxRows();
      resultSetHelper0.getMaxRows();
      int int1 = resultSetHelper0.getRowCount();
      assertTrue(int1 == int0);
      
      boolean boolean0 = resultSetHelper0.hasMaxRows();
      assertTrue(boolean0);
      
      resultSetHelper0.getCells();
      resultSetHelper0.getRowCount();
      Object[][] objectArray0 = resultSetHelper0.getCells();
      assertEquals(0, objectArray0.length);
      
      Class class0 = ResultSetHelper.typeToClass(0);
      assertEquals("class java.lang.String", class0.toString());
      
      resultSetHelper0.getColumnCount();
      int int2 = resultSetHelper0.getRowCount();
      assertEquals(1599, resultSetHelper0.getMaxRows());
      assertEquals(0, int2);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0);
      resultSetHelper0.m_ColumnCount = 1;
      assertEquals(0, resultSetHelper0.getMaxRows());
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      doReturn(false).when(resultSet0).last();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 0);
      int int0 = resultSetHelper0.getRowCount();
      resultSetHelper0.getColumnNames();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      resultSetHelper0.m_ColumnClasses = null;
      resultSetHelper0.m_ResultSet = resultSet1;
      resultSetHelper0.m_RowCount = 0;
      int int1 = resultSetHelper0.getMaxRows();
      assertTrue(int1 == int0);
      
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      
      Class class0 = ResultSetHelper.typeToClass(0);
      assertEquals("class java.lang.String", class0.toString());
      
      resultSetHelper0.getColumnClasses();
      boolean[] booleanArray0 = new boolean[6];
      booleanArray0[0] = true;
      booleanArray0[1] = true;
      booleanArray0[2] = true;
      booleanArray0[3] = true;
      booleanArray0[2] = true;
      booleanArray0[5] = false;
      resultSetHelper0.m_NumericColumns = booleanArray0;
      resultSetHelper0.getNumericColumns();
      boolean boolean0 = ResultSetHelper.typeIsNumeric(0);
      boolean boolean1 = resultSetHelper0.hasMaxRows();
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      ResultSetMetaData resultSetMetaData0 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData0).getColumnCount();
      ResultSetMetaData resultSetMetaData1 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet0 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn(false).when(resultSet0).absolute(anyInt());
      doReturn(false, false).when(resultSet0).first();
      doReturn(resultSetMetaData0).when(resultSet0).getMetaData();
      doReturn(0).when(resultSet0).getRow();
      doReturn(0).when(resultSet0).getType();
      ResultSetHelper resultSetHelper0 = new ResultSetHelper(resultSet0, 273);
      resultSetHelper0.getColumnCount();
      resultSetHelper0.m_NumericColumns = null;
      resultSetHelper0.initialize();
      boolean[] booleanArray0 = resultSetHelper0.getNumericColumns();
      assertNull(booleanArray0);
      
      resultSetHelper0.m_Initialized = true;
      ResultSetMetaData resultSetMetaData2 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, 0, 0).when(resultSetMetaData2).getColumnCount();
      ResultSetMetaData resultSetMetaData3 = mock(ResultSetMetaData.class, new ViolatedAssumptionAnswer());
      ResultSet resultSet1 = mock(ResultSet.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(resultSet1).toString();
      doReturn(false).when(resultSet1).absolute(anyInt());
      doReturn(false, false).when(resultSet1).first();
      doReturn(resultSetMetaData2).when(resultSet1).getMetaData();
      doReturn(0).when(resultSet1).getRow();
      doReturn(0).when(resultSet1).getType();
      resultSetHelper0.m_ResultSet = resultSet1;
      Class class0 = ResultSetHelper.typeToClass(12);
      assertNotNull(class0);
      
      resultSetHelper0.initialize();
      String[] stringArray0 = resultSetHelper0.getColumnNames();
      assertNotNull(stringArray0);
      
      resultSetHelper0.m_RowCount = 273;
      resultSetHelper0.m_Initialized = false;
      resultSetHelper0.initialize();
      boolean[] booleanArray1 = resultSetHelper0.getNumericColumns();
      assertNotNull(booleanArray1);
      
      Class<Integer>[] classArray0 = (Class<Integer>[]) Array.newInstance(Class.class, 6);
      Class<Integer> class1 = Integer.class;
      classArray0[0] = class1;
      Class<Integer> class2 = Integer.class;
      classArray0[1] = class2;
      Class<Integer> class3 = Integer.class;
      classArray0[2] = class3;
      Class<Integer> class4 = Integer.class;
      classArray0[3] = class4;
      Class<Integer> class5 = Integer.class;
      classArray0[4] = class5;
      Class<Integer> class6 = Integer.class;
      classArray0[5] = class6;
      resultSetHelper0.m_ColumnClasses = classArray0;
      resultSetHelper0.getResultSet();
      resultSetHelper0.initialize();
      resultSetHelper0.initialize();
      String[] stringArray1 = resultSetHelper0.getColumnNames();
      assertNotSame(stringArray1, stringArray0);
      
      resultSetHelper0.getColumnCount();
      resultSetHelper0.m_RowCount = 273;
      int int0 = resultSetHelper0.getColumnCount();
      assertEquals(0, int0);
      
      resultSetHelper0.initialize();
      assertEquals(273, resultSetHelper0.getMaxRows());
      
      Class class7 = ResultSetHelper.typeToClass(0);
      assertEquals("class java.lang.String", class7.toString());
  }
}
