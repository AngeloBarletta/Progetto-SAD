/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 19:33:33 GMT 2023
 */

package FontInfoSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import FontInfoSourceCode.FontInfo;
import java.awt.Font;
import java.awt.geom.AffineTransform;
import java.text.AttributedCharacterIterator;
import java.util.HashMap;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FontInfo_ESTest extends FontInfo_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsItalic(true);
      fontInfo0.toString();
      assertTrue(fontInfo0.isItalic());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsBold(true);
      fontInfo0.toString();
      assertTrue(fontInfo0.isBold());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      try { 
        fontInfo0.setFont((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Font passed
         //
         verifyException("FontInfoSourceCode.FontInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.hashCode();
      assertEquals(12, fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsItalic(true);
      fontInfo0.setSize(1231);
      FontInfo fontInfo1 = new FontInfo();
      fontInfo1.setIsItalic(true);
      boolean boolean0 = fontInfo0.equals(fontInfo1);
      assertEquals(2, fontInfo1.generateStyle());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      Object object0 = fontInfo0.clone();
      fontInfo0.setIsItalic(true);
      boolean boolean0 = fontInfo0.equals(object0);
      assertTrue(fontInfo0.isItalic());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsBold(true);
      FontInfo fontInfo1 = new FontInfo();
      boolean boolean0 = fontInfo0.equals(fontInfo1);
      assertEquals(1, fontInfo0.generateStyle());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      FontInfo fontInfo1 = (FontInfo)fontInfo0.clone();
      fontInfo1.setFamily("t");
      boolean boolean0 = fontInfo0.equals(fontInfo1);
      assertEquals("t", fontInfo1.getFamily());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      FontInfo fontInfo0 = new FontInfo(font0);
      boolean boolean0 = fontInfo0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      boolean boolean0 = fontInfo0.doesFontMatch((Font) null);
      assertEquals(12, fontInfo0.getSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FontInfo fontInfo0 = null;
      try {
        fontInfo0 = new FontInfo((Font) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null Font passed
         //
         verifyException("FontInfoSourceCode.FontInfo", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Font font0 = new Font("", 31, 31);
      AffineTransform affineTransform0 = new AffineTransform((float) 31, (float) 31, (float) 31, (float) 31, (float) 31, 443.3625F);
      Font font1 = font0.deriveFont(31, affineTransform0);
      FontInfo fontInfo0 = new FontInfo(font1);
      boolean boolean0 = fontInfo0.isItalic();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.isItalic();
      assertEquals(12, fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsBold(true);
      boolean boolean0 = fontInfo0.isBold();
      assertEquals(1, fontInfo0.generateStyle());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.isBold();
      assertEquals(12, fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Font font0 = new Font(",n^PNx4hXk7|M(n", (-373), (-1));
      Font font1 = font0.deriveFont(1360);
      FontInfo fontInfo0 = new FontInfo(font1);
      int int0 = fontInfo0.getSize();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      int int0 = fontInfo0.getSize();
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setSize((-1828));
      int int0 = fontInfo0.getSize();
      assertEquals((-1828), int0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Font font0 = new Font("", 0, (-4486));
      FontInfo fontInfo0 = new FontInfo(font0);
      String string0 = fontInfo0.getFamily();
      assertEquals("Dialog", string0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, AttributedCharacterIterator.Attribute>();
      Font font0 = Font.getFont((Map<? extends AttributedCharacterIterator.Attribute, ?>) hashMap0);
      FontInfo fontInfo0 = new FontInfo(font0);
      fontInfo0.setFamily("");
      String string0 = fontInfo0.getFamily();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Font font0 = new Font("", 0, (-4486));
      FontInfo fontInfo0 = new FontInfo(font0);
      int int0 = fontInfo0.generateStyle();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsBold(true);
      int int0 = fontInfo0.generateStyle();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      boolean boolean0 = fontInfo0.equals(fontInfo0);
      assertTrue(boolean0);
      assertEquals(12, fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      boolean boolean0 = fontInfo0.equals("isItalic");
      assertFalse(boolean0);
      assertEquals(12, fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      HashMap<AttributedCharacterIterator.Attribute, Object> hashMap0 = new HashMap<AttributedCharacterIterator.Attribute, Object>();
      Font font0 = new Font(hashMap0);
      FontInfo fontInfo0 = new FontInfo(font0);
      boolean boolean0 = fontInfo0.doesFontMatch(font0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Font font0 = new Font("(L]", 1, 1);
      FontInfo fontInfo0 = new FontInfo(font0);
      Font font1 = fontInfo0.createFont();
      assertEquals(1, font1.getStyle());
      assertEquals(1.0F, font1.getSize2D(), 0.01F);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setIsItalic(true);
      fontInfo0.createFont();
      assertTrue(fontInfo0.isItalic());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      assertEquals(12, fontInfo0.getSize());
      
      fontInfo0.setSize(0);
      fontInfo0.createFont();
      assertEquals(0, fontInfo0.generateStyle());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      fontInfo0.setSize((-2131));
      fontInfo0.createFont();
      assertEquals((-2131), fontInfo0.getSize());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FontInfo fontInfo0 = new FontInfo();
      FontInfo fontInfo1 = (FontInfo)fontInfo0.clone();
      boolean boolean0 = fontInfo0.equals(fontInfo1);
      assertTrue(boolean0);
      assertEquals(12, fontInfo1.getSize());
  }
}
