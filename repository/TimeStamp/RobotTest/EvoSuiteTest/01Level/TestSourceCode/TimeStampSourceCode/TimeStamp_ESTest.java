/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 01:40:49 GMT 2023
 */

package TimeStampSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TimeStampSourceCode.TimeStamp;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeStamp_ESTest extends TimeStamp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-342L));
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals((-1), int0);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals(0, int0);
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      timeStamp0.toUTCString();
      String string0 = timeStamp0.toUTCString();
      assertEquals("Thu, Feb 07 2036 06:28:16.000 UTC", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      timeStamp0.toDateString();
      String string0 = timeStamp0.toDateString();
      assertEquals("Thu, Feb 07 2036 06:28:16.000", string0);
      assertEquals(4294965215L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = TimeStamp.toString(0L);
      assertEquals("00000000.00000000", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      TimeStamp timeStamp1 = TimeStamp.getNtpTime(1688L);
      boolean boolean0 = timeStamp0.equals(timeStamp1);
      assertEquals((-8959209413229362021L), timeStamp1.ntpValue());
      assertFalse(boolean0);
      assertFalse(timeStamp1.equals((Object)timeStamp0));
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496000L);
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertTrue(boolean0);
      assertEquals(0L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      Object object0 = new Object();
      boolean boolean0 = timeStamp0.equals(object0);
      assertFalse(boolean0);
      assertEquals((-2081L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString("UTC");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"UTC\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        TimeStamp.decodeNtpHexString("EEE, MMM dd yyyy HH:mm:ss.SSS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"EEE, MMM dd yyyy HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("TimeStampSourceCode.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = TimeStamp.getTime(3881L);
      assertEquals(2085978496000L, long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      assertEquals(0L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      MockDate mockDate0 = new MockDate(2842, 32, 2842, 32, 32);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      assertEquals((-771970962152226816L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals(0L, timeStamp0.ntpValue());
      assertEquals(1, int0);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      String string0 = timeStamp0.toString();
      assertEquals("ffffffff.fffff7df", string0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      timeStamp0.hashCode();
      assertEquals(4294965215L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      long long0 = timeStamp0.getFraction();
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      long long0 = timeStamp0.getTime();
      assertEquals((-2081L), timeStamp0.ntpValue());
      assertEquals(2085978496000L, long0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-2081L));
      long long0 = timeStamp0.getSeconds();
      assertEquals(4294967295L, long0);
  }
}
