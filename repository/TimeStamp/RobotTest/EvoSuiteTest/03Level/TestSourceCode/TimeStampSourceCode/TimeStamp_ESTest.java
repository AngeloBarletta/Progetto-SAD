/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 01:39:54 GMT 2023
 */

package TimeStampSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TimeStampSourceCode.TimeStamp;
import java.time.Instant;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.System;
import org.evosuite.runtime.mock.java.time.MockInstant;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeStamp_ESTest extends TimeStamp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime((-8959209410910079681L));
      assertEquals((-2924872728L), long0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(5614618320000L);
      assertEquals((-3291351430266355712L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(2085978496000L);
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(2085978496040L);
      assertEquals(171798691L, long0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      long long0 = TimeStamp.toNtpTime(0L);
      assertEquals((-8959209420479266816L), long0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("");
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      assertEquals(0L, timeStamp0.getFraction());
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("83aa7e7e.28b43958");
      assertEquals((-8959209428386301608L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("00000000.000002b1");
      assertEquals(689L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496000L);
      long long0 = timeStamp0.ntpValue();
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496039L);
      long long0 = timeStamp0.ntpValue();
      assertEquals(167503724L, long0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      long long0 = TimeStamp.getTime((-8959209420539396359L));
      assertEquals((-14L), long0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      MockDate mockDate0 = new MockDate();
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      long long0 = timeStamp0.getTime();
      assertEquals(1392409281320L, long0);
      assertEquals(1374389534L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-495L));
      long long0 = timeStamp0.getTime();
      assertEquals((-495L), long0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(2085978496000L);
      long long0 = timeStamp0.getSeconds();
      assertEquals(0L, long0);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Instant instant0 = MockInstant.ofEpochSecond(122L, 823L);
      Date date0 = Date.from(instant0);
      TimeStamp timeStamp0 = new TimeStamp(date0);
      long long0 = timeStamp0.getFraction();
      assertEquals((-8959208896493256704L), timeStamp0.ntpValue());
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      System.setCurrentTimeMillis(2085978981680L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(2085979716321L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      System.setCurrentTimeMillis(0L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(0L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      System.setCurrentTimeMillis((-1942L));
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals((-1942L), timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      System.setCurrentTimeMillis(2085978496000L);
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      assertEquals(0L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("00000000.0000093c");
      assertEquals(2364L, long0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("83aa7e81.96041893");
      assertEquals((-8959209413667448685L), long0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      try { 
        TimeStamp.decodeNtpHexString("faT:q.");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"faT:q\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0, (-1), 0, 3972, 0, 0);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      // Undeclared exception!
      try { 
        timeStamp0.compareTo((TimeStamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TimeStampSourceCode.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      long long0 = TimeStamp.getTime((-8959209420479266816L));
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      String string0 = TimeStamp.toString(3688L);
      assertEquals("00000000.00000e68", string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(3300L);
      Date date0 = timeStamp0.getDate();
      assertEquals(1288490188L, timeStamp0.getFraction());
      assertEquals(3300L, timeStamp0.getTime());
      assertEquals("Thu Jan 01 00:00:03 GMT 1970", date0.toString());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp(339L);
      assertEquals(0L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      int int0 = timeStamp1.compareTo(timeStamp0);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(1, int0);
      assertEquals(0L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals((-1), int0);
      assertEquals(2208988800L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals(0, int0);
      assertEquals(0L, timeStamp0.getTime());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(15L);
      timeStamp0.toUTCString();
      String string0 = timeStamp0.toUTCString();
      assertEquals("Thu, Jan 01 1970 00:00:00.015 UTC", string0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      timeStamp0.toDateString();
      String string0 = timeStamp0.toDateString();
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals("Thu, Jan 01 1970 00:00:00.000", string0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertEquals(2208988800L, timeStamp0.getSeconds());
      assertFalse(boolean0);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertTrue(boolean0);
      assertEquals((-8959209420479266816L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(4227L);
      Object object0 = new Object();
      timeStamp0.equals(object0);
      assertEquals((-8959209402324440056L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      long long0 = TimeStamp.decodeNtpHexString("");
      assertEquals(0L, long0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("TimeStampSourceCode.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      long long0 = TimeStamp.getTime(2085978496040L);
      assertEquals(2085978981680L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      TimeStamp timeStamp0 = null;
      try {
        timeStamp0 = new TimeStamp("~v7)PMb`Xo:oI");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"~v7)PMb`Xo:oI\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(0L);
      String string0 = timeStamp0.toString();
      assertEquals("83aa7e80.00000000", string0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(15L);
      timeStamp0.hashCode();
      assertEquals((-8959209420414842307L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(15L);
      long long0 = timeStamp0.getFraction();
      assertEquals(64424509L, long0);
      assertEquals((-8959209420414842307L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      MockDate mockDate0 = new MockDate(0L);
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      long long0 = timeStamp0.getTime();
      assertEquals(0L, long0);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime((-2942L));
      long long0 = timeStamp0.ntpValue();
      assertEquals((-8959209433115060601L), long0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getSeconds();
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
      assertEquals(3601398081L, long0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("a");
      assertEquals(42949672960L, timeStamp0.ntpValue());
  }
}
