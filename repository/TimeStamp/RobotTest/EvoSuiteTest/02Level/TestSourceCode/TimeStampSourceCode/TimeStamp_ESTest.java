/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 01:48:22 GMT 2023
 */

package TimeStampSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import TimeStampSourceCode.TimeStamp;
import java.util.Date;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockDate;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class TimeStamp_ESTest extends TimeStamp_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.parseNtpString("ffffffff.fffff969");
      assertEquals((-1687L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp("");
      // Undeclared exception!
      try { 
        timeStamp0.compareTo((TimeStamp) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("TimeStampSourceCode.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-1L));
      TimeStamp timeStamp1 = TimeStamp.getCurrentTime();
      int int0 = timeStamp0.compareTo(timeStamp1);
      assertEquals((-2978857094563003106L), timeStamp1.ntpValue());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      TimeStamp timeStamp1 = TimeStamp.getNtpTime((-2322L));
      int int0 = timeStamp1.compareTo(timeStamp0);
      assertEquals((-8959209430452180878L), timeStamp1.ntpValue());
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      int int0 = timeStamp0.compareTo(timeStamp0);
      assertEquals((-8959209416184299520L), timeStamp0.ntpValue());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      timeStamp0.toUTCString();
      String string0 = timeStamp0.toUTCString();
      assertEquals("Thu, Feb 07 2036 06:28:16.000 UTC", string0);
      assertEquals(0L, timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      TimeStamp timeStamp1 = TimeStamp.getNtpTime((-2322L));
      boolean boolean0 = timeStamp1.equals(timeStamp0);
      assertFalse(timeStamp0.equals((Object)timeStamp1));
      assertFalse(boolean0);
      assertEquals((-8959209430452180878L), timeStamp1.ntpValue());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((Date) null);
      boolean boolean0 = timeStamp0.equals("Thu, Feb 07 2036 06:28:16.000 UTC");
      assertFalse(boolean0);
      assertEquals(0L, timeStamp0.getFraction());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      try { 
        TimeStamp.decodeNtpHexString("k:2%'`*]DFfSMpg");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"k:2%'`*]DFfSMpg\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      try { 
        TimeStamp.parseNtpString((String) null);
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // null
         //
         verifyException("TimeStampSourceCode.TimeStamp", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      MockDate mockDate0 = new MockDate(3355, (-1), 3355, (-1292), (-1292), (-1292));
      TimeStamp timeStamp0 = new TimeStamp(mockDate0);
      assertEquals((-5232110313670705152L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      TimeStamp timeStamp0 = null;
      try {
        timeStamp0 = new TimeStamp("EEE, MMM dd yyyy HH:mm:ss.SSS");
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"EEE, MMM dd yyyy HH:mm:ss\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      String string0 = timeStamp0.toString();
      assertEquals("83aa7e81.00000000", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.hashCode();
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      long long0 = timeStamp0.getFraction();
      assertEquals(1374389534L, long0);
      assertEquals((-2978857094563003106L), timeStamp0.ntpValue());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      TimeStamp timeStamp0 = new TimeStamp((-1L));
      long long0 = timeStamp0.getTime();
      assertEquals(2085978496000L, long0);
      assertEquals(4294967295L, timeStamp0.getSeconds());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      boolean boolean0 = timeStamp0.equals(timeStamp0);
      assertEquals((-8959209416184299520L), timeStamp0.ntpValue());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getNtpTime(1000L);
      long long0 = timeStamp0.getSeconds();
      assertEquals(0L, timeStamp0.getFraction());
      assertEquals(2208988801L, long0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      TimeStamp timeStamp0 = TimeStamp.getCurrentTime();
      timeStamp0.toDateString();
      String string0 = timeStamp0.toDateString();
      assertEquals("Fri, Feb 14 2014 20:21:21.320", string0);
  }
}
