/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 11:01:46 GMT 2023
 */

package ByteVectorSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ByteVectorSourceCode.ByteVector;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ByteVector_ESTest extends ByteVector_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      byteVector0.putByte(0);
      byte[] byteArray0 = new byte[4];
      ByteVector byteVector1 = byteVector0.putByteArray(byteArray0, 0, 0);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      byte[] byteArray0 = new byte[0];
      // Undeclared exception!
      try { 
        byteVector0.putByteArray(byteArray0, 0, 810);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(2);
      ByteVector byteVector1 = byteVector0.putInt(2);
      ByteVector byteVector2 = byteVector0.putByteArray((byte[]) null, 2, 2);
      assertSame(byteVector2, byteVector1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.put11(0, 0);
      ByteVector byteVector2 = byteVector1.putUTF8("");
      byteVector2.putShort(0);
      ByteVector byteVector3 = byteVector2.putUTF8("");
      assertSame(byteVector1, byteVector3);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putUTF8("*q)pk Ifhgs");
      ByteVector byteVector2 = byteVector1.putByte(0);
      byteVector2.putLong(0);
      ByteVector byteVector3 = byteVector2.putByte((-77));
      byteVector1.putUTF8("ByteVectorSourceCode.ByteVector");
      ByteVector byteVector4 = byteVector1.putLong((-77));
      assertSame(byteVector4, byteVector3);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putInt((-423));
      assertSame(byteVector0, byteVector1);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putByte(0);
      ByteVector byteVector2 = byteVector1.putUTF8("$S?5)aR]f");
      byteVector2.putLong(0);
      ByteVector byteVector3 = byteVector1.putInt(0);
      assertSame(byteVector3, byteVector1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putShort(32);
      byteVector1.putShort(0);
      byteVector0.length = 0;
      ByteVector byteVector2 = byteVector0.putInt(0);
      assertSame(byteVector0, byteVector2);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.putShort((-423));
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putLong(1245L);
      ByteVector byteVector2 = byteVector1.putInt(0);
      ByteVector byteVector3 = byteVector2.putByte((-1));
      ByteVector byteVector4 = byteVector3.put12(1, (-1));
      byteVector3.put11(0, (-1));
      ByteVector byteVector5 = byteVector4.putUTF8("ft+PNQE8");
      byteVector5.putUTF8("");
      ByteVector byteVector6 = byteVector1.putShort(0);
      assertSame(byteVector6, byteVector1);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.put12(0, 0);
      ByteVector byteVector2 = byteVector1.put11(0, 0);
      byteVector2.putShort(0);
      ByteVector byteVector3 = byteVector0.putByte(0);
      assertSame(byteVector0, byteVector3);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(1);
      ByteVector byteVector1 = byteVector0.putByte(1);
      assertSame(byteVector1, byteVector0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector(0);
      ByteVector byteVector1 = byteVector0.putByte(0);
      ByteVector byteVector2 = byteVector1.putInt(0);
      ByteVector byteVector3 = byteVector2.putByte((-1));
      byteVector2.putByteArray((byte[]) null, (-1110), (-1));
      byteVector3.put12(1, (-1));
      ByteVector byteVector4 = byteVector3.put11(0, (-1));
      assertSame(byteVector4, byteVector1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ByteVector byteVector0 = new ByteVector();
      ByteVector byteVector1 = byteVector0.put11(69, 69);
      assertSame(byteVector0, byteVector1);
  }
}
