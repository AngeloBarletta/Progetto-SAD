/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:37:47 GMT 2023
 */

package ParameterParserSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ParameterParserSourceCode.ParameterParser;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterParser_ESTest extends ParameterParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[5];
      // Undeclared exception!
      try { 
        parameterParser0.parse(charArray0, (-3057), (-1), ')');
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -3057
         //
         verifyException("ParameterParserSourceCode.ParameterParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.setLowerCaseNames(true);
      parameterParser0.parse("P,Te 3.uh@=\",", '#');
      assertTrue(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, 0, 0, 'U');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, '\u0000');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      charArray0[3] = ',';
      charArray0[4] = 's';
      Map map0 = parameterParser0.parse(",QkdsT-", charArray0);
      assertEquals(1, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[1];
      parameterParser0.parse((String) null, charArray0);
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[0];
      parameterParser0.parse((String) null, charArray0);
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse("E<-:", (char[]) null);
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      Map map0 = parameterParser0.parse("=+\"f <XEJ\"]G:", ' ');
      assertFalse(parameterParser0.isLowerCaseNames());
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[4];
      charArray0[0] = '=';
      charArray0[1] = '\\';
      Map map0 = parameterParser0.parse(charArray0, 'O');
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      charArray0[5] = 'o';
      Map map0 = parameterParser0.parse("=3Eh@[oZ~", charArray0);
      assertEquals(1, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      charArray0[0] = '4';
      charArray0[1] = ' ';
      Map map0 = parameterParser0.parse(charArray0, '\u0000');
      assertFalse(parameterParser0.isLowerCaseNames());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      charArray0[5] = ' ';
      Map map0 = parameterParser0.parse(charArray0, '\u0000');
      assertEquals(0, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      Map map0 = parameterParser0.parse("+=", '%');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      boolean boolean0 = parameterParser0.isLowerCaseNames();
      assertFalse(boolean0);
  }
}
