/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:29:57 GMT 2023
 */

package ParameterParserSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import ParameterParserSourceCode.ParameterParser;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterParser_ESTest extends ParameterParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, 0, 0, 'V');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[9];
      Map map0 = parameterParser0.parse(charArray0, 0, 1, '4');
      assertEquals(1, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, 'd');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[1];
      Map map0 = parameterParser0.parse(charArray0, 'R');
      assertEquals(1, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[9];
      Map map0 = parameterParser0.parse("=*9@) iV@}Ji", charArray0);
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[2];
      Map map0 = parameterParser0.parse("}", charArray0);
      assertFalse(map0.isEmpty());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse("", 'U');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      Map map0 = parameterParser0.parse("v)7;meKr]JvV", 'I');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      assertFalse(parameterParser0.isLowerCaseNames());
      
      parameterParser0.setLowerCaseNames(true);
      boolean boolean0 = parameterParser0.isLowerCaseNames();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test9()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      boolean boolean0 = parameterParser0.isLowerCaseNames();
      assertFalse(boolean0);
  }
}
