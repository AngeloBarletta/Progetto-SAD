/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:39:04 GMT 2023
 */

package ParameterParserSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import ParameterParserSourceCode.ParameterParser;
import java.util.Map;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ParameterParser_ESTest extends ParameterParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[8];
      charArray0[0] = 't';
      charArray0[5] = 'O';
      Map map0 = parameterParser0.parse("^tk%_POb4D '5{*", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      charArray0[3] = '=';
      charArray0[0] = '=';
      Map map0 = parameterParser0.parse("z0,=\"^hI8bSj&&>IK\"=.", charArray0);
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      Map map0 = parameterParser0.parse("}ZTdT6Y=Znxw", 'z');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[8];
      charArray0[2] = '=';
      Map map0 = parameterParser0.parse(charArray0, '~');
      assertFalse(parameterParser0.isLowerCaseNames());
      assertFalse(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      Map map0 = parameterParser0.parse("_NR#tWZOkuxUZa8=4/", 'w');
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[8];
      charArray0[3] = '=';
      Map map0 = parameterParser0.parse(charArray0, '\u0000');
      assertEquals(0, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      parameterParser0.parse(charArray0, 0, (-611), '`');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.setLowerCaseNames(true);
      char[] charArray0 = new char[5];
      parameterParser0.parse("arameterParserSourceoe.ParameterParser", charArray0);
      assertTrue(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[0];
      parameterParser0.parse("Y", charArray0);
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[8];
      charArray0[2] = ' ';
      charArray0[3] = '-';
      Map map0 = parameterParser0.parse(charArray0, '-');
      assertEquals(2, map0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[8];
      charArray0[1] = 'F';
      charArray0[2] = ' ';
      Map map0 = parameterParser0.parse(charArray0, 'F');
      assertEquals(2, map0.size());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, (int) '2', (int) '2', '2');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[9];
      Map map0 = parameterParser0.parse(charArray0, 0, 1, '3');
      assertFalse(map0.isEmpty());
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((char[]) null, '2');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[2];
      parameterParser0.parse((String) null, charArray0);
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      char[] charArray0 = new char[6];
      Map map0 = parameterParser0.parse("z0,=\"^hI8bSj&&>IK\"=.", charArray0);
      assertEquals(1, map0.size());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      parameterParser0.parse((String) null, ':');
      assertFalse(parameterParser0.isLowerCaseNames());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      assertFalse(parameterParser0.isLowerCaseNames());
      
      parameterParser0.setLowerCaseNames(true);
      boolean boolean0 = parameterParser0.isLowerCaseNames();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      ParameterParser parameterParser0 = new ParameterParser();
      boolean boolean0 = parameterParser0.isLowerCaseNames();
      assertFalse(boolean0);
  }
}
