/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 02:19:13 GMT 2023
 */

package WeakHashtableSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import WeakHashtableSourceCode.WeakHashtable;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakHashtable_ESTest extends WeakHashtable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Integer integer0 = new Integer(0);
      weakHashtable0.put(integer0, integer0);
      HashMap<Object, Object> hashMap0 = new HashMap<Object, Object>();
      Integer integer1 = new Integer(0);
      hashMap0.put(integer1, integer1);
      weakHashtable0.putAll(hashMap0);
      Set set0 = weakHashtable0.entrySet();
      assertEquals(1, set0.size());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      weakHashtable0.put(set0, "[bNP");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put("", integer0);
      hashMap0.put("{[]=[bNP}", integer0);
      Integer integer1 = new Integer(3);
      hashMap0.put("[bNP", integer1);
      weakHashtable0.putAll(hashMap0);
      weakHashtable0.remove((Object) null);
      Set set1 = weakHashtable0.entrySet();
      assertEquals(4, set1.size());
      assertNotSame(set1, set0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      Object object0 = weakHashtable0.put(set0, "[bNP");
      weakHashtable0.remove((Object) "");
      weakHashtable0.remove((Object) "[bNP");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put("", integer0);
      hashMap0.put("=yB>5D)#ET&`LUd}l", integer0);
      hashMap0.put("{[]=[bNP}", integer0);
      hashMap0.put("[bNP", integer0);
      weakHashtable0.putAll(hashMap0);
      weakHashtable0.remove(object0);
      weakHashtable0.put(integer0, set0);
      Object object1 = weakHashtable0.remove((Object) null);
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      Object object0 = weakHashtable0.put(set0, "[bNP");
      weakHashtable0.remove((Object) "");
      weakHashtable0.remove((Object) "[bNP");
      HashMap<String, Integer> hashMap0 = new HashMap<String, Integer>();
      Integer integer0 = new Integer(3);
      hashMap0.put("", integer0);
      hashMap0.put("{[]=[bNP}", integer0);
      Integer integer1 = new Integer(3);
      hashMap0.put("[bNP", integer1);
      weakHashtable0.putAll(hashMap0);
      weakHashtable0.remove(object0);
      weakHashtable0.put(integer0, set0);
      weakHashtable0.remove((Object) null);
      Object object1 = weakHashtable0.put(integer1, "Fa");
      assertNull(object1);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      // Undeclared exception!
      try { 
        weakHashtable0.put("[b3P", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null values are not allowed
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      // Undeclared exception!
      try { 
        weakHashtable0.put((Object) null, collection0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null keys are not allowed
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      String string0 = weakHashtable0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      int int0 = weakHashtable0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      weakHashtable0.put(collection0, weakHashtable0);
      int int0 = weakHashtable0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      Integer integer0 = new Integer(3);
      weakHashtable0.put(integer0, set0);
      HashSet hashSet0 = (HashSet)weakHashtable0.remove((Object) integer0);
      assertTrue(hashSet0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      weakHashtable0.put(collection0, weakHashtable0);
      Object object0 = weakHashtable0.put(collection0, "][7{_H\"/MZ");
      assertSame(object0, weakHashtable0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.keys();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.keySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      weakHashtable0.put(set0, "[bNP");
      assertTrue(set0.isEmpty());
      
      Set set1 = weakHashtable0.keySet();
      assertEquals(1, set1.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      boolean boolean0 = weakHashtable0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Object object0 = weakHashtable0.get("][7{_H\"/MZ");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      weakHashtable0.put(set0, "[bNP");
      boolean boolean0 = weakHashtable0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.elements();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      boolean boolean0 = weakHashtable0.containsKey("{}");
      assertFalse(boolean0);
  }
}
