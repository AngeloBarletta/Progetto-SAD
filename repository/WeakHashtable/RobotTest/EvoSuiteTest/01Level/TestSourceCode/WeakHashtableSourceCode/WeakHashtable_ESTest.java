/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 02:13:05 GMT 2023
 */

package WeakHashtableSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import WeakHashtableSourceCode.WeakHashtable;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Set;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakHashtable_ESTest extends WeakHashtable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      String string0 = weakHashtable0.toString();
      assertEquals("{}", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      int int0 = weakHashtable0.size();
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Object object0 = weakHashtable0.remove((Object) "{}");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1477));
      hashMap0.put(integer0, integer0);
      weakHashtable0.putAll(hashMap0);
      Object object0 = weakHashtable0.remove((Object) integer0);
      assertEquals((-1477), object0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      weakHashtable0.put(collection0, "");
      Object object0 = weakHashtable0.put(collection0, collection0);
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.keys();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1477));
      hashMap0.put(integer0, integer0);
      weakHashtable0.putAll(hashMap0);
      Set set0 = weakHashtable0.keySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      boolean boolean0 = weakHashtable0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Integer integer0 = new Integer(0);
      weakHashtable0.putIfAbsent(integer0, "");
      boolean boolean0 = weakHashtable0.isEmpty();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.keySet();
      Object object0 = weakHashtable0.get(set0);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.entrySet();
      assertEquals(0, set0.size());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      HashMap<Integer, Integer> hashMap0 = new HashMap<Integer, Integer>();
      Integer integer0 = new Integer((-1477));
      hashMap0.put(integer0, integer0);
      weakHashtable0.putAll(hashMap0);
      Set set0 = weakHashtable0.entrySet();
      assertFalse(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.elements();
      Integer integer0 = new Integer(0);
      weakHashtable0.put(enumeration0, integer0);
      int int0 = weakHashtable0.size();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      boolean boolean0 = weakHashtable0.containsKey("");
      assertFalse(boolean0);
  }
}
