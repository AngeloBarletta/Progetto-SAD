/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 02:21:44 GMT 2023
 */

package WeakHashtableSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import WeakHashtableSourceCode.WeakHashtable;
import java.util.Collection;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class WeakHashtable_ESTest extends WeakHashtable_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      Integer integer0 = new Integer(100);
      weakHashtable0.put(integer0, collection0);
      // Undeclared exception!
      try { 
        weakHashtable0.toString();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashtable0.merge(integer0, object0, biFunction0);
      // Undeclared exception!
      try { 
        weakHashtable0.toString();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Integer cannot be cast to WeakHashtableSourceCode.WeakHashtable$Referenced
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      HashMap<Integer, String> hashMap0 = new HashMap<Integer, String>();
      Integer integer0 = new Integer(0);
      hashMap0.put(integer0, (String) null);
      // Undeclared exception!
      try { 
        weakHashtable0.putAll(hashMap0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null values are not allowed
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Object object0 = new Object();
      weakHashtable0.putIfAbsent(object0, object0);
      // Undeclared exception!
      try { 
        weakHashtable0.putAll(weakHashtable0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to WeakHashtableSourceCode.WeakHashtable$Referenced
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      BiFunction<Integer, String, Integer> biFunction0 = (BiFunction<Integer, String, Integer>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      weakHashtable0.merge(weakHashtable0, weakHashtable0, biFunction0);
      // Undeclared exception!
      try { 
        weakHashtable0.keySet();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // WeakHashtableSourceCode.WeakHashtable cannot be cast to WeakHashtableSourceCode.WeakHashtable$Referenced
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      weakHashtable0.putIfAbsent(weakHashtable0, weakHashtable0);
      // Undeclared exception!
      try { 
        weakHashtable0.entrySet();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // WeakHashtableSourceCode.WeakHashtable cannot be cast to WeakHashtableSourceCode.WeakHashtable$Referenced
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Integer integer0 = new Integer(0);
      weakHashtable0.put(integer0, weakHashtable0);
      BiFunction<String, String, Object> biFunction0 = (BiFunction<String, String, Object>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      Object object0 = weakHashtable0.merge(weakHashtable0, "{0={0=(this Map)}}", biFunction0);
      assertEquals("{0={0=(this Map)}}", object0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.keySet();
      weakHashtable0.put(set0, set0);
      assertEquals(0, set0.size());
      
      Integer integer0 = new Integer(1667);
      weakHashtable0.put(integer0, integer0);
      Set set1 = weakHashtable0.entrySet();
      assertFalse(set1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      weakHashtable0.remove((Object) "");
      Set set0 = weakHashtable0.keySet();
      weakHashtable0.put(set0, set0);
      Set set1 = weakHashtable0.keySet();
      Set set2 = weakHashtable0.entrySet();
      weakHashtable0.put(set2, "");
      assertEquals(1, set2.size());
      
      weakHashtable0.put(set1, "");
      Set set3 = weakHashtable0.keySet();
      assertEquals(3, set3.size());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      weakHashtable0.putAll((Map) null);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.elements();
      weakHashtable0.put("", enumeration0);
      weakHashtable0.put("", enumeration0);
      Collection collection0 = weakHashtable0.values();
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      hashMap0.put("", "S-uU82");
      hashMap0.put("Y-1&\"abeaj+N1nC", "");
      hashMap0.put("S-uU82", "");
      weakHashtable0.putAll(hashMap0);
      weakHashtable0.remove((Object) collection0);
      Integer integer0 = new Integer(552);
      weakHashtable0.remove((Object) weakHashtable0);
      weakHashtable0.remove((Object) integer0);
      Set set0 = weakHashtable0.entrySet();
      weakHashtable0.remove((Object) integer0);
      weakHashtable0.remove((Object) integer0);
      weakHashtable0.remove((Object) set0);
      weakHashtable0.remove((Object) null);
      weakHashtable0.remove((Object) integer0);
      weakHashtable0.put(integer0, integer0);
      weakHashtable0.remove((Object) "");
      weakHashtable0.put(hashMap0, "Y-1&\"abeaj+N1nC");
      weakHashtable0.remove((Object) null);
      weakHashtable0.put("S-uU82", integer0);
      weakHashtable0.remove((Object) null);
      Object object0 = weakHashtable0.put(integer0, "");
      assertEquals(552, object0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      // Undeclared exception!
      try { 
        weakHashtable0.put("", (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null values are not allowed
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      // Undeclared exception!
      try { 
        weakHashtable0.put((Object) null, (Object) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Null keys are not allowed
         //
         verifyException("WeakHashtableSourceCode.WeakHashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Set set0 = weakHashtable0.keySet();
      weakHashtable0.put(set0, set0);
      Set set1 = weakHashtable0.entrySet();
      Set set2 = weakHashtable0.entrySet();
      weakHashtable0.put(set2, "");
      Object object0 = weakHashtable0.put(set1, "");
      assertNull(object0);
      
      Set set3 = weakHashtable0.keySet();
      assertEquals(2, set3.size());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      weakHashtable0.rehash();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Collection collection0 = weakHashtable0.values();
      boolean boolean0 = weakHashtable0.containsKey(collection0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Integer integer0 = new Integer(0);
      Object object0 = new Object();
      Object object1 = weakHashtable0.getOrDefault(integer0, object0);
      assertSame(object0, object1);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      boolean boolean0 = weakHashtable0.isEmpty();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      WeakHashtable weakHashtable0 = new WeakHashtable();
      Enumeration enumeration0 = weakHashtable0.keys();
      assertNotNull(enumeration0);
  }
}
