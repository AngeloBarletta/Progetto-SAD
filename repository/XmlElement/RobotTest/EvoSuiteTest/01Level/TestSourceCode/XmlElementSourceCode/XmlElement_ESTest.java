/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 02:51:13 GMT 2023
 */

package XmlElementSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import XmlElementSourceCode.XmlElement;
import java.util.Enumeration;
import java.util.Hashtable;
import java.util.List;
import java.util.Observer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlElement_ESTest extends XmlElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      XmlElement xmlElement1 = xmlElement0.removeElement(xmlElement0);
      assertNull(xmlElement1);
      assertEquals("<", xmlElement0.getData());
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("&xPNg~BG@yHXb<]b9");
      xmlElement0.append(xmlElement0);
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.addObserver(observer0);
      xmlElement0.removeElement(xmlElement0);
      assertEquals(0, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("L:#");
      xmlElement0.insertElement(xmlElement0, 0);
      xmlElement0.removeElement(xmlElement0);
      assertEquals(0, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      XmlElement xmlElement1 = new XmlElement("|(lD9SC{x^VRWy");
      xmlElement0.append(xmlElement1);
      xmlElement1.append(xmlElement0);
      xmlElement0.removeElement(xmlElement1);
      assertEquals(0, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("'", "GqMw\"bc$E}2w#6w");
      xmlElement0.append(xmlElement0);
      XmlElement xmlElement1 = xmlElement0.removeElement(0);
      assertEquals("GqMw\"bc$E}2w#6w", xmlElement1.getData());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement(xmlElement0);
      xmlElement0.addElement(xmlElement0);
      XmlElement xmlElement2 = xmlElement1.removeElement(0);
      assertNull(xmlElement2.getName());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      XmlElement xmlElement1 = xmlElement0.getParent();
      assertNull(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("(vAZD[B$z.X~j", "(vAZD[B$z.X~j");
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.addObserver(observer0);
      xmlElement0.append(xmlElement0);
      XmlElement xmlElement1 = xmlElement0.getParent();
      assertEquals(1, xmlElement1.count());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      xmlElement0.setParent(xmlElement0);
      XmlElement xmlElement1 = xmlElement0.getParent();
      assertEquals(0, xmlElement1.countObservers());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      String string0 = xmlElement0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("L:#");
      String string0 = xmlElement0.getName();
      assertEquals("L:#", string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      String string0 = xmlElement0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.subElements = null;
      List list0 = xmlElement0.getElements();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("'", "GqMw\"bc$E}2w#6w");
      xmlElement0.getElements();
      assertEquals("GqMw\"bc$E}2w#6w", xmlElement0.getData());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Kfe2QM=Z#UU|eR");
      xmlElement0.addSubElement(xmlElement0);
      List list0 = xmlElement0.getElements();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("79?m)q", "79?m)q");
      XmlElement xmlElement1 = xmlElement0.getElement("'");
      assertNull(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Fj8js\"-;Ayrl");
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.addObserver(observer0);
      xmlElement0.append(xmlElement0);
      XmlElement xmlElement1 = xmlElement0.getElement("Fj8js\"-;Ayrl");
      assertNotNull(xmlElement1);
      assertEquals("Fj8js\"-;Ayrl", xmlElement0.getName());
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Fj8js\"-;Ayrl");
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      XmlElement xmlElement1 = new XmlElement("Fj8js\"-;Ayrl", hashtable0);
      xmlElement1.append(xmlElement0);
      XmlElement xmlElement2 = xmlElement1.getElement("Fj8js\"-;Ayrl");
      assertEquals(0, xmlElement2.count());
      assertNotNull(xmlElement2);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement("'", (String) null);
      XmlElement xmlElement2 = xmlElement0.getElement(0);
      assertSame(xmlElement2, xmlElement1);
      assertNotNull(xmlElement2);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      xmlElement0.append(xmlElement0);
      XmlElement xmlElement1 = xmlElement0.getElement(0);
      assertEquals("<", xmlElement1.getData());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      String string0 = xmlElement0.getData();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("$5j~<qV", "$5j~<qV");
      String string0 = xmlElement0.getData();
      assertEquals("$5j~<qV", string0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("&xPNg~BG@yHXb<]b9");
      String string0 = xmlElement0.getData();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Kfe2QM=Z#UU|eR");
      xmlElement0.setAttributes((Hashtable<String, String>) null);
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      assertNull(hashtable0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("&xPNg~BG@yHXb<]b9");
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      hashtable0.put("", "+IB@~5\"");
      Hashtable<String, String> hashtable1 = xmlElement0.getAttributes();
      assertFalse(hashtable1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Could not clone XmlElement: ");
      Enumeration enumeration0 = xmlElement0.getAttributeNames();
      assertNotNull(enumeration0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      String string0 = xmlElement0.getAttribute("P6?+TH%btxG$yae3R99", (String) null);
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("'", "GqMw\"bc$E}2w#6w");
      String string0 = xmlElement0.getAttribute("GqMw\"bc$E}2w#6w", "'");
      assertNotNull(string0);
      assertEquals("'", string0);
      assertEquals("GqMw\"bc$E}2w#6w", xmlElement0.getData());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      String string0 = xmlElement0.getAttribute("");
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("&xPNg~BG@yHXb<]b9");
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      hashtable0.put("", "+IB@~5\"");
      String string0 = xmlElement0.getAttribute("");
      assertEquals("+IB@~5\"", string0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getAttribute("", "");
      String string0 = xmlElement0.getAttribute("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      boolean boolean0 = xmlElement0.equals(xmlElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = new XmlElement((String) null, "?&y1ctgQno3Z l3");
      boolean boolean0 = xmlElement0.equals(xmlElement1);
      assertFalse(boolean0);
      assertFalse(xmlElement1.equals((Object)xmlElement0));
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      xmlElement0.count();
      assertEquals("<", xmlElement0.getData());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      XmlElement xmlElement1 = xmlElement0.addSubElement("YW)~iXeJ_LYczC~J,C", (String) null);
      assertNotNull(xmlElement1);
      
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement1.addObserver(observer0);
      XmlElement xmlElement2 = xmlElement0.getElement(0);
      assertNotNull(xmlElement2);
      assertEquals("<", xmlElement0.getData());
      assertEquals(1, xmlElement2.countObservers());
      assertEquals("YW)~iXeJ_LYczC~J,C", xmlElement2.getName());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "<");
      xmlElement0.addSubElement("R1ux;\"T=g");
      assertEquals(1, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("L:#");
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.addObserver(observer0);
      XmlElement xmlElement1 = xmlElement0.addSubElement(xmlElement0);
      assertEquals("", xmlElement1.getData());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = (XmlElement)xmlElement0.clone();
      assertNotNull(xmlElement1);
      
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      assertFalse(xmlElement1.equals((Object)xmlElement0));
      assertEquals(0, xmlElement2.count());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Kfe2QM=Z#UU|eR");
      XmlElement xmlElement1 = xmlElement0.addSubElement(xmlElement0);
      int int0 = xmlElement1.count();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Object object0 = xmlElement0.addAttribute((String) null, "q");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("}I5#r2%MUu-", hashtable0);
      hashtable0.put("}I5#r2%MUu-", "}I5#r2%MUu-");
      xmlElement0.addAttribute("}I5#r2%MUu-", "Could not clone XmlElement: ");
      assertEquals(1, hashtable0.size());
  }
}
