/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 03:06:22 GMT 2023
 */

package XmlElementSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import XmlElementSourceCode.XmlElement;
import java.util.Collection;
import java.util.HashMap;
import java.util.Hashtable;
import java.util.LinkedList;
import java.util.List;
import java.util.Observer;
import java.util.function.BiFunction;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class XmlElement_ESTest extends XmlElement_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = "cIte)'GlcBA 9";
      XmlElement xmlElement0 = new XmlElement();
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      XmlElement xmlElement1 = new XmlElement("cIte)'GlcBA 9", hashtable0);
      XmlElement xmlElement2 = xmlElement1.addSubElement("cIte)'GlcBA 9");
      xmlElement2.subElements = null;
      // Undeclared exception!
      try { 
        xmlElement2.removeElement((-1431655763));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement((String) null, (String) null);
      LinkedList<XmlElement> linkedList0 = new LinkedList<XmlElement>();
      xmlElement0.subElements = (List<XmlElement>) linkedList0;
      xmlElement0.data = null;
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      xmlElement0.setAttributes(hashtable0);
      xmlElement0.clone();
      xmlElement0.clone();
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.deleteObserver(observer0);
      xmlElement0.clone();
      // Undeclared exception!
      try { 
        xmlElement0.removeElement(6);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 6, Size: 0
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement(",&", "B");
      XmlElement xmlElement1 = xmlElement0.addSubElement(",&", "B");
      xmlElement1.deleteObservers();
      xmlElement0.attributes = null;
      xmlElement1.getAttributeNames();
      xmlElement0.removeFromParent();
      xmlElement0.clone();
      xmlElement0.clone();
      XmlElement xmlElement2 = (XmlElement)xmlElement0.clone();
      // Undeclared exception!
      try { 
        xmlElement2.addAttribute(",&", "B");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.setParent(xmlElement0);
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.deleteObserver(observer0);
      xmlElement0.data = "%mY0RyUA#Q";
      xmlElement0.setAttributes((Hashtable<String, String>) null);
      XmlElement xmlElement1 = xmlElement0.addSubElement(".M<=[av.Y'G8Nvu!t{");
      XmlElement xmlElement2 = xmlElement1.addSubElement("XmlElementSourceCode.XmlElement");
      xmlElement2.addSubElement(xmlElement0);
      xmlElement0.getElement(":9{dn :0pG_9Jd5");
      xmlElement2.addSubElement("aCvvA\"LqE%k2");
      xmlElement1.getElement(".M<=[av.Y'G8Nvu!t{");
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("", hashtable0);
      xmlElement0.setAttributes(hashtable0);
      xmlElement0.data = "x,LPUWdQn1I\";M*";
      xmlElement0.setData("");
      XmlElement xmlElement1 = xmlElement0.addSubElement("x,LPUWdQn1I\";M*", "x,LPUWdQn1I\";M*");
      xmlElement1.removeFromParent();
      xmlElement0.setName("");
      XmlElement xmlElement2 = new XmlElement("", hashtable0);
      XmlElement xmlElement3 = xmlElement2.addSubElement("", "");
      xmlElement0.addElement(xmlElement2);
      xmlElement0.getElement("");
      xmlElement0.name = "x,LPUWdQn1I\";M*";
      XmlElement xmlElement4 = xmlElement2.addSubElement("");
      xmlElement0.setParent(xmlElement2);
      Hashtable<String, String> hashtable1 = xmlElement0.getAttributes();
      XmlElement xmlElement5 = new XmlElement("", hashtable1);
      xmlElement3.addSubElement(xmlElement4);
      xmlElement0.addSubElement("(.Nm_6,MAPwsn,-");
      xmlElement0.getElement("(.Nm_6,MAPwsn,-");
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement(".M<=[av.Y'G8Nvu!t{");
      xmlElement0.setParent(xmlElement1);
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement1.deleteObserver(observer0);
      xmlElement0.data = "%mY0RyUA#Q";
      xmlElement1.setAttributes((Hashtable<String, String>) null);
      XmlElement xmlElement2 = xmlElement0.addSubElement(".M<=[av.Y'G8Nvu!t{");
      XmlElement xmlElement3 = xmlElement2.addSubElement("XmlElementSourceCode.XmlElement");
      xmlElement3.addSubElement(xmlElement1);
      xmlElement0.getElement(":9{dn :0pG_9Jd5");
      xmlElement3.addSubElement("aCvvA\"LqE%k2");
      xmlElement2.getElement("/p*8GRz2");
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("[OWpL#\"L@F1hk.");
      xmlElement0.data = "[OWpL#\"L@F1hk.";
      XmlElement xmlElement1 = xmlElement0.addSubElement("[OWpL#\"L@F1hk.");
      xmlElement1.getAttributeNames();
      XmlElement xmlElement2 = xmlElement1.addSubElement("");
      xmlElement2.getParent();
      XmlElement xmlElement3 = xmlElement1.addSubElement("[OWpL#\"L@F1hk.", "'");
      xmlElement0.addSubElement("[OWpL#\"L@F1hk.");
      xmlElement3.getElement("'");
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      String string0 = "Eh/H\"";
      XmlElement xmlElement1 = new XmlElement("Eh/H\"", (Hashtable<String, String>) null);
      xmlElement1.notifyObservers((Object) xmlElement0);
      // Undeclared exception!
      try { 
        xmlElement1.getAttributeNames();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Eh/:)H\"", "Eh/:)H\"");
      XmlElement xmlElement1 = new XmlElement();
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      XmlElement.printNode(xmlElement0, (String) null);
      xmlElement0.count();
      xmlElement2.subElements = null;
      XmlElement xmlElement3 = new XmlElement("Eh/:)H\"", "");
      xmlElement3.append(xmlElement1);
      xmlElement2.setParent(xmlElement3);
      // Undeclared exception!
      try { 
        xmlElement1.addSubElement(")B", "/U1\".FIpz:T-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = ";f4vlkF";
      Hashtable<String, String> hashtable0 = null;
      XmlElement xmlElement0 = new XmlElement(";f4vlkF", (Hashtable<String, String>) null);
      xmlElement0.attributes = null;
      xmlElement0.hashCode();
      // Undeclared exception!
      try { 
        xmlElement0.getElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement.printNode(xmlElement0, " = '");
      Object object0 = xmlElement0.clone();
      xmlElement0.clone();
      xmlElement0.equals(object0);
      xmlElement0.addSubElement(" = '");
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.deleteObservers();
      Object object0 = xmlElement0.clone();
      xmlElement0.notifyObservers();
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.addObserver(observer0);
      String string0 = "FT#IY4fsi";
      XmlElement xmlElement1 = xmlElement0.addSubElement("FT#IY4fsi");
      String string1 = "W";
      XmlElement.printNode(xmlElement1, "W");
      xmlElement1.notifyObservers(object0);
      xmlElement1.addElement(xmlElement0);
      xmlElement0.equals(object0);
      // Undeclared exception!
      try { 
        xmlElement1.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement((String) null, hashtable0);
      Hashtable<Object, Integer> hashtable1 = new Hashtable<Object, Integer>();
      xmlElement0.notifyObservers((Object) hashtable1);
      xmlElement0.subElements = null;
      xmlElement0.hashCode();
      String string0 = "";
      String string1 = "\\ye1g7P&<NlN16";
      hashtable0.put("", "");
      // Undeclared exception!
      try { 
        hashtable0.put("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Hashtable", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("2NuQh+Ym{qM>3S$/");
      XmlElement xmlElement1 = new XmlElement("2NuQh+Ym{qM>3S$/");
      XmlElement xmlElement2 = xmlElement1.addSubElement(xmlElement0);
      xmlElement0.addElement(xmlElement1);
      xmlElement0.addAttribute("2NuQh+Ym{qM>3S$/", "2NuQh+Ym{qM>3S$/");
      xmlElement0.getName();
      xmlElement0.getElements();
      xmlElement0.removeAllElements();
      xmlElement1.setData("2NuQh+Ym{qM>3S$/");
      xmlElement0.setName("2NuQh+Ym{qM>3S$/");
      xmlElement2.removeAllElements();
      XmlElement xmlElement3 = xmlElement1.getParent();
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement1.deleteObserver(observer0);
      xmlElement3.deleteObservers();
      xmlElement1.append(xmlElement0);
      xmlElement3.append(xmlElement2);
      XmlElement xmlElement4 = xmlElement3.addSubElement("2NuQh+Ym{qM>3S$/", (String) null);
      xmlElement0.removeFromParent();
      xmlElement1.getAttributes();
      xmlElement3.addSubElement("");
      xmlElement1.getAttributeNames();
      xmlElement1.getAttribute("");
      xmlElement1.hashCode();
      xmlElement2.getAttributeNames();
      XmlElement xmlElement5 = new XmlElement((String) null);
      xmlElement3.equals(xmlElement5);
      assertEquals(0, xmlElement1.count());
      assertNotSame(xmlElement3, xmlElement4);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("a#:]|u", "zri8aU`d:r");
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      XmlElement xmlElement1 = new XmlElement("zri8aU`d:r", hashtable0);
      xmlElement1.getElement("diG[]c&.<+CF->Z.zu~");
      xmlElement0.equals(hashtable0);
      Integer integer0 = new Integer((-1994313639));
      boolean boolean0 = xmlElement1.equals(integer0);
      assertEquals("zri8aU`d:r", xmlElement0.getData());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = new XmlElement();
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      hashtable0.elements();
      xmlElement1.setAttributes(hashtable0);
      xmlElement1.addAttribute("!E}1", "!E}1");
      LinkedList<XmlElement> linkedList0 = new LinkedList<XmlElement>();
      xmlElement0.subElements = (List<XmlElement>) linkedList0;
      xmlElement0.setParent(xmlElement1);
      xmlElement0.notifyObservers();
      XmlElement xmlElement2 = new XmlElement("{]pYnZ");
      xmlElement0.getAttributeNames();
      String string0 = "";
      xmlElement2.setParent(xmlElement0);
      xmlElement2.data = "";
      xmlElement0.append(xmlElement2);
      xmlElement0.addElement(xmlElement2);
      xmlElement0.setParent(xmlElement2);
      xmlElement0.addSubElement(xmlElement2);
      linkedList0.addAll((Collection<? extends XmlElement>) xmlElement0.subElements);
      xmlElement0.setData("{mkU_LLE<5r:L");
      // Undeclared exception!
      try { 
        xmlElement0.getElement(380);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 380, Size: 6
         //
         verifyException("java.util.LinkedList", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.subElements = null;
      // Undeclared exception!
      try { 
        xmlElement0.getElement(0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("vuc0^wHuA-S2>Q", "vuc0^wHuA-S2>Q");
      String string0 = "";
      xmlElement0.data = "";
      XmlElement xmlElement1 = new XmlElement();
      xmlElement0.removeElement(xmlElement1);
      // Undeclared exception!
      try { 
        xmlElement0.addElement((XmlElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = new XmlElement();
      LinkedList<XmlElement> linkedList0 = new LinkedList<XmlElement>();
      xmlElement1.subElements = (List<XmlElement>) linkedList0;
      xmlElement1.removeAllElements();
      xmlElement0.setParent(xmlElement1);
      xmlElement1.getParent();
      // Undeclared exception!
      try { 
        xmlElement0.append((XmlElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("", "");
      XmlElement xmlElement0 = new XmlElement("XmlElementSourceCode.XmlElement", hashtable0);
      XmlElement xmlElement1 = new XmlElement();
      xmlElement0.append(xmlElement1);
      hashtable0.put("#>{o:IYF+K>rqcy,", "Could not clone XmlElement: ");
      xmlElement0.count();
      xmlElement1.data = "XmlElementSourceCode.XmlElement";
      xmlElement0.getAttributeNames();
      XmlElement.printNode(xmlElement0, "'6<L^Mh");
      xmlElement0.removeFromParent();
      xmlElement0.notifyObservers();
      xmlElement1.getName();
      XmlElement xmlElement2 = xmlElement1.getElement("3xFka");
      assertNull(xmlElement2);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      hashtable0.put("y(`D#:: p,OF`", "@_d}s~Y]%E@sO>");
      hashtable0.put("Qu", "y(`D#:: p,OF`");
      XmlElement xmlElement0 = new XmlElement("Qu", hashtable0);
      xmlElement0.getAttribute("Qu", "Qu");
      xmlElement0.hashCode();
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("FT#IY4fsi");
      xmlElement0.removeAllElements();
      xmlElement0.removeElement((XmlElement) null);
      xmlElement0.subElements = null;
      XmlElement xmlElement1 = new XmlElement();
      xmlElement1.subElements = null;
      xmlElement0.setParent(xmlElement1);
      xmlElement0.notifyObservers((Object) "FT#IY4fsi");
      xmlElement1.data = "FT#IY4fsi";
      xmlElement0.getParent();
      String string0 = "";
      // Undeclared exception!
      try { 
        XmlElement.printNode(xmlElement1, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("", hashtable0);
      xmlElement0.setAttributes(hashtable0);
      xmlElement0.data = "x,LPUWdQn1I\";M*";
      xmlElement0.setData("");
      XmlElement xmlElement1 = xmlElement0.addSubElement("\u0007:]%s`X}s8'~]8S$D", (String) null);
      xmlElement1.removeFromParent();
      xmlElement0.setName("");
      XmlElement xmlElement2 = new XmlElement("", hashtable0);
      XmlElement xmlElement3 = xmlElement2.addSubElement("", "");
      xmlElement0.addElement(xmlElement2);
      xmlElement0.getElement("");
      XmlElement xmlElement4 = xmlElement2.addSubElement("");
      xmlElement0.setParent(xmlElement2);
      LinkedList<XmlElement> linkedList0 = new LinkedList<XmlElement>();
      xmlElement3.subElements = (List<XmlElement>) linkedList0;
      xmlElement0.getAttributes();
      Object object0 = new Object();
      xmlElement2.notifyObservers(object0);
      xmlElement1.addSubElement("", "");
      XmlElement xmlElement5 = xmlElement3.addSubElement(xmlElement4);
      xmlElement4.getData();
      assertEquals(2, xmlElement2.count());
      assertSame(xmlElement4, xmlElement5);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement.printNode(xmlElement0, "");
      xmlElement0.hashCode();
      xmlElement0.notifyObservers();
      XmlElement xmlElement1 = new XmlElement("");
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      XmlElement xmlElement3 = xmlElement1.addSubElement("");
      xmlElement3.addSubElement(xmlElement0);
      Hashtable<String, String> hashtable0 = xmlElement1.getAttributes();
      xmlElement1.setAttributes(hashtable0);
      xmlElement0.setAttributes(hashtable0);
      xmlElement2.parent = xmlElement1;
      xmlElement3.append(xmlElement1);
      // Undeclared exception!
      try { 
        xmlElement3.hashCode();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement("R<s{.&+Y_#", "R<s{.&+Y_#");
      xmlElement1.data = "";
      xmlElement0.addAttribute("R<s{.&+Y_#", "");
      xmlElement1.setParent(xmlElement0);
      xmlElement1.equals((Object) null);
      XmlElement xmlElement2 = xmlElement0.removeElement(0);
      xmlElement2.data = "";
      xmlElement1.addSubElement("R<s{.&+Y_#");
      xmlElement2.removeElement(xmlElement1);
      xmlElement1.getAttribute("");
      xmlElement0.getAttributeNames();
      xmlElement0.setParent(xmlElement1);
      xmlElement2.notifyObservers();
      Hashtable<String, String> hashtable0 = xmlElement2.getAttributes();
      XmlElement xmlElement3 = new XmlElement("", hashtable0);
      boolean boolean0 = xmlElement1.equals(xmlElement3);
      assertEquals(0, xmlElement0.count());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      XmlElement xmlElement1 = new XmlElement("", " eCz:BIjy-0gw~7z");
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      assertEquals(" eCz:BIjy-0gw~7z", xmlElement2.getData());
      
      xmlElement0.setData("");
      XmlElement xmlElement3 = xmlElement0.getParent();
      assertNull(xmlElement3);
      assertNotSame(xmlElement0, xmlElement2);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = new XmlElement();
      xmlElement0.addElement(xmlElement1);
      xmlElement0.getAttribute("", "");
      HashMap<String, String> hashMap0 = new HashMap<String, String>();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>(hashMap0);
      BiFunction<String, Object, String> biFunction0 = (BiFunction<String, Object, String>) mock(BiFunction.class, new ViolatedAssumptionAnswer());
      String string0 = null;
      hashMap0.put("", (String) null);
      hashtable0.replaceAll(biFunction0);
      xmlElement1.setAttributes(hashtable0);
      // Undeclared exception!
      try { 
        xmlElement0.getElement("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Object object0 = xmlElement0.clone();
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      XmlElement xmlElement1 = new XmlElement("OvTG(!pD7Wk", hashtable0);
      xmlElement0.parent = xmlElement1;
      xmlElement0.name = ";f4vlkF";
      xmlElement0.removeFromParent();
      xmlElement0.addSubElement("X2'FKn3xp8C}");
      XmlElement xmlElement2 = xmlElement0.addSubElement("");
      xmlElement0.getData();
      xmlElement2.addElement(xmlElement1);
      xmlElement2.getName();
      XmlElement xmlElement3 = xmlElement1.addSubElement("", "");
      xmlElement3.addAttribute("", "");
      xmlElement1.getElement("    ");
      assertEquals(2, xmlElement0.count());
      assertNotSame(xmlElement0, object0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getName();
      xmlElement0.hashCode();
      XmlElement xmlElement1 = new XmlElement("6Y`YttD=oRUgKQb[");
      xmlElement1.getAttributeNames();
      xmlElement0.append(xmlElement1);
      xmlElement1.setParent(xmlElement0);
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      xmlElement1.notifyObservers();
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement2.addObserver(observer0);
      xmlElement2.deleteObservers();
      xmlElement1.setData((String) null);
      String string0 = "f{_JO";
      xmlElement2.getAttribute("f{_JO", (String) null);
      XmlElement xmlElement3 = xmlElement0.addSubElement("3J,3in{Pwrq`SowN", "");
      XmlElement.printNode(xmlElement3, "6'!Ty[sp");
      Observer observer1 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement3.deleteObserver(observer1);
      xmlElement0.setData("f{_JO");
      // Undeclared exception!
      try { 
        xmlElement0.addSubElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("R__&!IMOp|D");
      XmlElement xmlElement1 = xmlElement0.getElement("A/v1z`m#V?zgs}");
      assertNull(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      // Undeclared exception!
      try { 
        xmlElement0.getElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement((String) null, (String) null);
      Observer observer0 = mock(Observer.class, new ViolatedAssumptionAnswer());
      xmlElement0.deleteObserver(observer0);
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement1 = new XmlElement((String) null, (String) null);
      xmlElement0.parent = xmlElement1;
      xmlElement0.append(xmlElement1);
      hashtable0.put("?", "u");
      hashtable0.put("?", "?");
      XmlElement xmlElement2 = xmlElement0.addSubElement((String) null, "{Dqx");
      xmlElement0.clone();
      xmlElement2.append(xmlElement0);
      xmlElement0.attributes = hashtable0;
      // Undeclared exception!
      try { 
        xmlElement0.getAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      String string0 = " = '";
      Hashtable<String, String> hashtable0 = null;
      XmlElement xmlElement0 = new XmlElement(" = '", (Hashtable<String, String>) null);
      // Undeclared exception!
      try { 
        xmlElement0.getAttribute("    ", "    ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("C8<T]o Q}");
      xmlElement0.addSubElement("j2LL=D$TYErxh;w4Z0z", "");
      XmlElement xmlElement1 = new XmlElement();
      xmlElement1.addElement(xmlElement0);
      xmlElement0.deleteObserver((Observer) null);
      xmlElement1.setParent(xmlElement0);
      xmlElement0.append(xmlElement1);
      xmlElement1.getAttribute("C8<T]o Q}");
      assertEquals(1, xmlElement1.count());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement("#etaEBHRLc`Fo  ", "'");
      xmlElement1.name = "#etaEBHRLc`Fo  ";
      xmlElement1.setName("'");
      XmlElement xmlElement2 = xmlElement1.addSubElement("&QI(D(5^Un/ J/*z");
      xmlElement2.name = "&QI(D(5^Un/ J/*z";
      xmlElement1.getElements();
      xmlElement0.getAttributeNames();
      Hashtable<String, String> hashtable0 = xmlElement0.getAttributes();
      hashtable0.put("#etaEBHRLc`Fo  ", "&QI(D(5^Un/ J/*z");
      hashtable0.put("'", "*Dnrd");
      XmlElement xmlElement3 = new XmlElement("'", hashtable0);
      xmlElement0.equals(xmlElement3);
      xmlElement1.clone();
      XmlElement xmlElement4 = xmlElement3.addSubElement("", "");
      xmlElement3.deleteObservers();
      xmlElement1.clone();
      xmlElement3.getName();
      xmlElement0.getAttribute("", "#etaEBHRLc`Fo  ");
      xmlElement4.setData("");
      assertEquals(1, xmlElement0.count());
      assertEquals(3, hashtable0.size());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("o8r;%.X6g0Z$_fG");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      xmlElement0.attributes = hashtable0;
      xmlElement0.removeElement((XmlElement) null);
      String string0 = "";
      xmlElement0.getAttribute("([QGv<(S[vy=", "");
      // Undeclared exception!
      try { 
        xmlElement0.insertElement((XmlElement) null, 2123);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("'kW(S70oD)jK{GVIE");
      xmlElement0.data = "ls[n7hoBJ' r$D5E\"g";
      XmlElement xmlElement1 = new XmlElement();
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      xmlElement0.notifyObservers();
      xmlElement0.hashCode();
      assertNotSame(xmlElement0, xmlElement2);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.addSubElement("");
      // Undeclared exception!
      try { 
        xmlElement0.addSubElement((XmlElement) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Eh/:)H\"", "Eh/:)H\"");
      XmlElement xmlElement1 = new XmlElement();
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      assertNotNull(xmlElement2);
      
      XmlElement.printNode(xmlElement0, (String) null);
      xmlElement0.count();
      xmlElement1.addAttribute((String) null, "");
      XmlElement xmlElement3 = new XmlElement("Eh/:)H\"", "");
      xmlElement2.setParent(xmlElement3);
      assertEquals(0, xmlElement2.count());
      
      xmlElement1.addSubElement(")B", "/U1\".FIpz:T-");
      assertSame(xmlElement1, xmlElement2);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getAttribute("r;", "r;");
      XmlElement xmlElement1 = new XmlElement("", "");
      // Undeclared exception!
      try { 
        xmlElement0.insertElement(xmlElement1, 1537);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1537 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", (Hashtable<String, String>) null);
      XmlElement xmlElement1 = new XmlElement("", (Hashtable<String, String>) null);
      // Undeclared exception!
      try { 
        xmlElement1.getAttribute("YV/x))O-bj=TkUkM=H", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("<H#,nKn=h!{", hashtable0);
      Object object0 = xmlElement0.addAttribute("<H#,nKn=h!{", (String) null);
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      String string0 = "vY$?PkP=CV2VNs6,c";
      Hashtable<String, String> hashtable0 = null;
      XmlElement xmlElement0 = new XmlElement("vY$?PkP=CV2VNs6,c", (Hashtable<String, String>) null);
      // Undeclared exception!
      try { 
        xmlElement0.getElement((-124));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      String string0 = null;
      XmlElement xmlElement0 = new XmlElement((String) null);
      XmlElement xmlElement1 = new XmlElement();
      String string1 = "";
      XmlElement xmlElement2 = xmlElement1.addSubElement((String) null, "");
      xmlElement0.addSubElement(xmlElement1);
      // Undeclared exception!
      try { 
        xmlElement2.removeElement(23);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 23
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      String string0 = "";
      XmlElement xmlElement0 = new XmlElement("", "|u;ZYM5Hg");
      XmlElement xmlElement1 = new XmlElement("");
      xmlElement0.addElement(xmlElement1);
      xmlElement0.getAttributeNames();
      // Undeclared exception!
      try { 
        xmlElement0.insertElement(xmlElement1, 1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1 > 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      boolean boolean0 = xmlElement0.equals("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement1 = new XmlElement("", hashtable0);
      XmlElement xmlElement2 = xmlElement1.addSubElement("");
      xmlElement1.setName((String) null);
      XmlElement.printNode(xmlElement1, "");
      xmlElement0.append(xmlElement1);
      assertEquals(1, xmlElement1.count());
      assertNotSame(xmlElement1, xmlElement2);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement((String) null);
      xmlElement0.setName(")IUsVUu 3a2D?%tQ");
      assertEquals(")IUsVUu 3a2D?%tQ", xmlElement0.getName());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      Object object0 = xmlElement0.addAttribute("", "");
      assertNull(object0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      String string0 = "";
      XmlElement xmlElement0 = new XmlElement("");
      // Undeclared exception!
      try { 
        xmlElement0.getElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getName();
      XmlElement xmlElement1 = new XmlElement("V");
      xmlElement1.notifyObservers();
      XmlElement.printNode(xmlElement1, ";-,%e");
      assertEquals("V", xmlElement1.getName());
      assertEquals("", xmlElement1.getData());
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("");
      XmlElement xmlElement1 = new XmlElement();
      XmlElement xmlElement2 = xmlElement0.addSubElement(xmlElement1);
      xmlElement0.clone();
      xmlElement0.removeElement(xmlElement2);
      xmlElement0.getAttribute("");
      xmlElement0.getElements();
      assertEquals(0, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getAttributeNames();
      XmlElement xmlElement1 = xmlElement0.addSubElement("FPcE\"$:D", "tS2-6L=YmZE1wF1.P!");
      assertEquals("tS2-6L=YmZE1wF1.P!", xmlElement1.getData());
      assertEquals(0, xmlElement1.count());
      assertNotNull(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("    ", "IQ\"NC^AzxO*");
      XmlElement xmlElement1 = (XmlElement)xmlElement0.clone();
      assertEquals("IQ\"NC^AzxO*", xmlElement1.getData());
      assertNotSame(xmlElement1, xmlElement0);
      assertNotNull(xmlElement1);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.removeAllElements();
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement1 = new XmlElement("", hashtable0);
      xmlElement1.addElement(xmlElement0);
      xmlElement0.insertElement(xmlElement1, 0);
      assertEquals(1, xmlElement1.count());
      
      XmlElement xmlElement2 = xmlElement1.removeElement(0);
      xmlElement2.hashCode();
      xmlElement2.removeFromParent();
      assertNotSame(xmlElement1, xmlElement2);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("VK9}e/@", (Hashtable<String, String>) null);
      xmlElement0.removeAllElements();
      assertEquals("VK9}e/@", xmlElement0.getName());
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      String string0 = "_+g3l;:@2h.A";
      XmlElement xmlElement0 = new XmlElement("_+g3l;:@2h.A");
      // Undeclared exception!
      try { 
        xmlElement0.removeElement(0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // Array index out of range: 0
         //
         verifyException("java.util.Vector", e);
      }
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("", hashtable0);
      XmlElement xmlElement1 = new XmlElement("", hashtable0);
      XmlElement xmlElement2 = xmlElement0.removeElement(xmlElement1);
      assertNull(xmlElement2);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("", "");
      XmlElement xmlElement1 = new XmlElement();
      xmlElement0.append(xmlElement1);
      assertEquals(0, xmlElement1.count());
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement("ER<y{#", hashtable0);
      XmlElement xmlElement1 = xmlElement0.addSubElement("ER<y{#", "ER<y{#");
      assertEquals("ER<y{#", xmlElement1.getData());
      assertNotNull(xmlElement1);
      assertEquals(0, xmlElement1.count());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      String string0 = "cIte)'GlcBA 9";
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.getAttributes();
      XmlElement xmlElement1 = xmlElement0.addSubElement("cIte)'GlcBA 9");
      xmlElement1.subElements = null;
      xmlElement0.clone();
      xmlElement0.clone();
      // Undeclared exception!
      try { 
        xmlElement1.addSubElement(xmlElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = new XmlElement("mPk2B");
      boolean boolean0 = xmlElement0.equals(xmlElement1);
      assertFalse(boolean0);
      assertFalse(xmlElement1.equals((Object)xmlElement0));
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      XmlElement xmlElement1 = xmlElement0.addSubElement(".M<=[av.Y'G8Nvu!t{");
      xmlElement0.data = "%mY0RyUA#Q";
      XmlElement xmlElement2 = xmlElement0.addSubElement(".M<=[av.Y'G8Nvu!t{");
      XmlElement xmlElement3 = xmlElement2.addSubElement("XmlElementSourceCode.XmlElement");
      XmlElement xmlElement4 = xmlElement3.addSubElement(xmlElement1);
      XmlElement xmlElement5 = xmlElement0.getElement(".M<=[av.Y'G8Nvu!t{");
      xmlElement5.attributes = null;
      xmlElement2.getElement("q\")7D<G3;&B|1b6");
      Object object0 = xmlElement3.clone();
      assertEquals(1, xmlElement0.count());
      assertFalse(object0.equals((Object)xmlElement4));
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement(",&", "B");
      xmlElement0.addSubElement(",&", "B");
      xmlElement0.removeFromParent();
      xmlElement0.clone();
      xmlElement0.clone();
      assertEquals(1, xmlElement0.count());
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Hashtable<String, String> hashtable0 = new Hashtable<String, String>();
      XmlElement xmlElement0 = new XmlElement((String) null, hashtable0);
      xmlElement0.attributes = hashtable0;
      xmlElement0.deleteObservers();
      xmlElement0.getAttribute(":", (String) null);
      // Undeclared exception!
      try { 
        xmlElement0.addSubElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement();
      xmlElement0.notifyObservers((Object) xmlElement0);
      xmlElement0.equals(xmlElement0);
      xmlElement0.hashCode();
      xmlElement0.hasChanged();
      xmlElement0.getElement("  &  ");
      XmlElement xmlElement1 = xmlElement0.addSubElement("  &  ");
      xmlElement1.removeFromParent();
      xmlElement0.hashCode();
      // Undeclared exception!
      try { 
        xmlElement0.addSubElement((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("XmlElementSourceCode.XmlElement", e);
      }
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      XmlElement xmlElement0 = new XmlElement("Eh/:)H\"", "Eh/:)H\"");
      XmlElement xmlElement1 = new XmlElement("Eh/:)H\"", "Eh/:)H\"");
      XmlElement.printNode(xmlElement0, "Eh/:)H\"");
      xmlElement0.count();
      xmlElement1.addAttribute((String) null, "qD9dyywYniDZKh!~v*w");
      XmlElement xmlElement2 = xmlElement1.getElement("qD9dyywYniDZKh!~v*w");
      assertNull(xmlElement2);
  }
}
