/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 21:26:56 GMT 2023
 */

package ImprovedStreamTokenizerSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N2[");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N2[", "N2[", false);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.whiteSpaceCharacters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.quoteCharacters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImprovedStreamTokenizer.parseByte("2");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImprovedStreamTokenizer.parseByte((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nXM`KsUa4nK");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"nXM`KsUa4nK\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      stringReader0.close();
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Stream closed
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2[");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "2[", "2[", false);
      improvedStreamTokenizer0.wordChars((byte)7, 50);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByteObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(":QUR)=SHO$l DAg");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("o");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "non-number", "o", false);
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("p1xi-$l7( 2UrmcP");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.initializeSyntax("p1xi-$l7( 2UrmcP", (String) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("non-number");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = null;
      try {
        improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "1*", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedStreamTokenizer improvedStreamTokenizer0 = null;
      try {
        improvedStreamTokenizer0 = new ImprovedStreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('n');
      assertEquals((byte)55, byte0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('7');
      assertEquals((byte)7, byte0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('/');
      assertEquals((byte) (-8), byte0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringReader stringReader0 = new StringReader("L;9~c@xCqb");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "L;9~c@xCqb", "L;9~c@xCqb", true);
      try { 
        improvedStreamTokenizer0.nextByteObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(}");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextWord();
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2M%_MKCr");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.parseNumbers();
      Boolean boolean0 = improvedStreamTokenizer0.nextBoolean();
      assertNotNull(boolean0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader(">[x0r07\"~qE0FXx");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextBoolean();
      try { 
        improvedStreamTokenizer0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-boolean
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader(".]K_MKCr");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.parseNumbers();
      Boolean boolean0 = improvedStreamTokenizer0.nextBoolean();
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@nZy@");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextBool();
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N2[");
      int int0 = stringReader0.read();
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N2[", "N2[", true);
      improvedStreamTokenizer0.wordChars((byte)7, 78);
      int int1 = improvedStreamTokenizer0.nextInt();
      assertFalse(int1 == int0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N2[");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N2[", "N2[", false);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-number
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      StringReader stringReader0 = new StringReader("(t*");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "(t*", "eEf+[N", true);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      StringReader stringReader0 = new StringReader("\"|%*<");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      String string0 = improvedStreamTokenizer0.nextWord();
      assertEquals("|%*<", string0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      String string0 = improvedStreamTokenizer0.nextWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("#Eq9$]uL");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.resetSyntax();
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("wD!#{%7& n4");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "wD!#{%7& n4", "wD!#{%7& n4", false);
      improvedStreamTokenizer0.initializeSyntax();
      byte byte0 = improvedStreamTokenizer0.nextByte();
      assertEquals("Token[wD!#{%7&], line 1", improvedStreamTokenizer0.toString());
      assertEquals((byte) (-3), byte0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N2[");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N2[", "N2[", true);
      improvedStreamTokenizer0.wordChars((byte)7, 78);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"N2\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }
}
