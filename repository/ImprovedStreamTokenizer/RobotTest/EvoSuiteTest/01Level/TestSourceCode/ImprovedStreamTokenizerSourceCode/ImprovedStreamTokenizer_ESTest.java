/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 21:18:51 GMT 2023
 */

package ImprovedStreamTokenizerSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer;
import java.io.IOException;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unexpected end of input");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N`Ti", "", true);
      assertEquals(34, ImprovedStreamTokenizer.QUOTE_CHAR);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('9');
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('[');
      assertEquals((byte)36, byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('0');
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('\u0018');
      assertEquals((byte) (-31), byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("nDnbyte");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "nDnbyte", "nDnbyte", false);
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      StringReader stringReader0 = new StringReader("DW]O5Eh:Yv?h!1qQA{_");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "DW]O5Eh:Yv?h!1qQA{_", "DW]O5Eh:Yv?h!1qQA{_", false);
      try { 
        improvedStreamTokenizer0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-boolean
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader(" bp");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextByte();
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("i~GSvp");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextBool();
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      StringReader stringReader0 = new StringReader("eNR7xY#itpd?QS+");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "eNR7xY#itpd?QS+", "eNR7xY#itpd?QS+", true);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-number
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("/m]}^ae:h`7p0");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "N`Ti", "N`Ti", true);
      improvedStreamTokenizer0.nextWord();
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }
}
