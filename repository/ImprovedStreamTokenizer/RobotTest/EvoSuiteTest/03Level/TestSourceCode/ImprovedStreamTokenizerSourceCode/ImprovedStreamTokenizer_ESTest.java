/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 21:16:44 GMT 2023
 */

package ImprovedStreamTokenizerSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer;
import java.io.IOException;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedStreamTokenizer_ESTest extends ImprovedStreamTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('9');
      assertEquals((byte)9, byte0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.parseByte("71, 9gw'-&$n");
      assertEquals((byte)113, byte0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.parseByte("no");
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      Integer integer0 = improvedStreamTokenizer0.nextInteger();
      assertEquals(0, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      StringReader stringReader0 = new StringReader("ocoL3?AY$0=O\"U8");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      Byte byte0 = improvedStreamTokenizer0.nextByteObject();
      assertEquals((byte) (-4), (byte)byte0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3SiL\"\"*J}`&=");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.parseNumbers();
      improvedStreamTokenizer0.nextBool();
      improvedStreamTokenizer0.nextBoolean();
      String string0 = improvedStreamTokenizer0.nextWord();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('0');
      assertEquals((byte)0, byte0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "", true);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.whiteSpaceCharacters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "", true);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.quoteCharacters((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImprovedStreamTokenizer.parseByte("H");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"n\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("unexpected end of input");
      char[] charArray0 = new char[9];
      stringReader0.read(charArray0);
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "", true);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "TB7[5VqJ|ds{oL[%", "V^sK&q7|/F", false);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("UT");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", "ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", false);
      improvedStreamTokenizer0.nextBoolean();
      try { 
        improvedStreamTokenizer0.nextByte();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.initializeSyntax("", (String) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedStreamTokenizer improvedStreamTokenizer0 = null;
      try {
        improvedStreamTokenizer0 = new ImprovedStreamTokenizer((Reader) null, "IRX)", "%MFrP", true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      ImprovedStreamTokenizer improvedStreamTokenizer0 = null;
      try {
        improvedStreamTokenizer0 = new ImprovedStreamTokenizer((Reader) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gD~5\"9l|9x~#o?+O'");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.quoteCharacters("YHZzRBx!D,N/^3:'p");
      assertEquals(1, improvedStreamTokenizer0.lineno());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "yAQ6g(7QWY4`", true);
      Boolean boolean0 = improvedStreamTokenizer0.nextBoolean();
      assertNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      StringReader stringReader0 = new StringReader("7");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      Integer integer0 = improvedStreamTokenizer0.nextInteger();
      assertEquals(7, (int)integer0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "", true);
      Integer integer0 = improvedStreamTokenizer0.nextInteger();
      assertNull(integer0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "TB7[5VqJ|ds{oL[%", "V^sK&q7|/F", false);
      improvedStreamTokenizer0.whiteSpaceCharacter(4593);
      assertEquals(1, improvedStreamTokenizer0.lineno());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      StringReader stringReader0 = new StringReader("71, 9gw'-&$n");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "", "71, 9gw'-&$n", false);
      improvedStreamTokenizer0.initializeSyntax();
      improvedStreamTokenizer0.nextByteObject();
      assertEquals("Token[71,], line 1", improvedStreamTokenizer0.toString());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('G');
      assertEquals((byte)16, byte0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      byte byte0 = ImprovedStreamTokenizer.charToHex('.');
      assertEquals((byte) (-9), byte0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      StringReader stringReader0 = new StringReader("-10Q ^ ,,");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.initializeSyntax("-10Q ^ ,,", "-10Q ^ ,,", true);
      try { 
        improvedStreamTokenizer0.nextByteObject();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-byte
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      Byte byte0 = improvedStreamTokenizer0.nextByteObject();
      assertNull(byte0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      StringReader stringReader0 = new StringReader("3SiL\"\"*J}`&=");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.parseNumbers();
      Boolean boolean0 = improvedStreamTokenizer0.nextBoolean();
      assertTrue(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0g5CLpM0C`Eac]QfTGf");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.parseNumbers();
      Boolean boolean0 = improvedStreamTokenizer0.nextBoolean();
      assertFalse(boolean0);
      assertNotNull(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      StringReader stringReader0 = new StringReader("gD~5\"9l|9xd~#o?+O'");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.whiteSpaceCharacters("qp|K5=]&l\"*cNq");
      char[] charArray0 = new char[4];
      stringReader0.read(charArray0);
      improvedStreamTokenizer0.nextInt();
      improvedStreamTokenizer0.nextBool();
      try { 
        improvedStreamTokenizer0.nextBoolean();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-boolean
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      StringReader stringReader0 = new StringReader("$'|h/c6UY");
      stringReader0.read();
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      try { 
        improvedStreamTokenizer0.nextInteger();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-number
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      StringReader stringReader0 = new StringReader("lS/z}e|{ G7J");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextInt();
        fail("Expecting exception: NumberFormatException");
      
      } catch(NumberFormatException e) {
         //
         // For input string: \"lS/z}e|{\"
         //
         verifyException("java.lang.NumberFormatException", e);
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("n.n-nurb[r");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "n.n-nurb[r", "n.n-nurb[r", false);
      try { 
        improvedStreamTokenizer0.nextWord();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // non-string
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      StringReader stringReader0 = new StringReader("0g5CLpM0C`Eac]QfTGf");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      improvedStreamTokenizer0.nextBoolean();
      String string0 = improvedStreamTokenizer0.nextWord();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      StringReader stringReader0 = new StringReader("no\"-byt");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      String string0 = improvedStreamTokenizer0.nextWord();
      String string1 = improvedStreamTokenizer0.nextWord();
      assertFalse(string1.equals((Object)string0));
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=korl6[Mtp-UO");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      byte byte0 = improvedStreamTokenizer0.nextByte();
      assertEquals((byte) (-1), byte0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      StringReader stringReader0 = new StringReader("=\"_s.R5\"WdD)");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0);
      // Undeclared exception!
      try { 
        improvedStreamTokenizer0.nextByteObject();
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      // Undeclared exception!
      try { 
        ImprovedStreamTokenizer.parseByte((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      StringReader stringReader0 = new StringReader("2F`&/z");
      ImprovedStreamTokenizer improvedStreamTokenizer0 = new ImprovedStreamTokenizer(stringReader0, "2F`&/z", "", true);
      try { 
        improvedStreamTokenizer0.nextBool();
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // unexpected end of input
         //
         verifyException("ImprovedStreamTokenizerSourceCode.ImprovedStreamTokenizer", e);
      }
  }
}
