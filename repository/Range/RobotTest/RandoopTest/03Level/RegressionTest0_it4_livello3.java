
import org.junit.FixMethodOrder;
import org.junit.Test;
import org.junit.runners.MethodSorters;

@FixMethodOrder(MethodSorters.NAME_ASCENDING)
public class RegressionTest0 {

  public static boolean debug = false;

  @Test
  public void test001() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test001"); }


    java.lang.Object obj1 = null;
    java.util.Comparator<java.lang.Object> comparator_obj2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj3 = Range.between((java.lang.Object)(byte)-1, obj1, comparator_obj2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test002() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test002"); }


    Range<java.lang.String> range_str1 = Range.is("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_str1);

  }

  @Test
  public void test003() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test003"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Object> comparator_obj5 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj6 = Range.between((java.lang.Object)(-1), (java.lang.Object)range_long3, comparator_obj5);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test004() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test004"); }


    java.util.Comparator<java.lang.Object> comparator_obj2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj3 = Range.between((java.lang.Object)(byte)1, (java.lang.Object)1, comparator_obj2);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test005() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test005"); }


    Range<java.lang.Boolean> range_b2 = Range.between((java.lang.Boolean)false, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_b2);

  }

  @Test
  public void test006() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test006"); }


    java.util.Comparator<java.lang.Object> comparator_obj2 = null;
    Range<java.lang.Object> range_obj3 = Range.between((java.lang.Object)"", (java.lang.Object)"hi!", comparator_obj2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_obj3);

  }

  @Test
  public void test007() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test007"); }


    Range<java.lang.String> range_str1 = Range.is("hi!");
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)(-1L), comparator_long6);
    java.util.Comparator<java.lang.Object> comparator_obj8 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj9 = Range.between((java.lang.Object)"hi!", (java.lang.Object)(-1L), comparator_obj8);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);

  }

  @Test
  public void test008() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test008"); }


    java.lang.Object obj0 = null;
    java.util.Comparator<java.lang.Object> comparator_obj2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj3 = Range.between(obj0, (java.lang.Object)(short)10, comparator_obj2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test009() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test009"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b22 = range_long3.isBeforeRange(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long17.getComparator();
    java.util.Comparator<java.lang.Object> comparator_obj24 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj25 = Range.between((java.lang.Object)0, (java.lang.Object)range_long17, comparator_obj24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test010() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test010"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.isEndedBy((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test011() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test011"); }


    Range<java.lang.Boolean> range_b2 = Range.between((java.lang.Boolean)false, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_b2);

  }

  @Test
  public void test012() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test012"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test013() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test013"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    int i16 = range_long6.elementCompareTo((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i16 == (-1));

  }

  @Test
  public void test014() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test014"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)1L, comparator_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);

  }

  @Test
  public void test015() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test015"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    boolean b13 = range_long2.isEndedBy((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);

  }

  @Test
  public void test016() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test016"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.lang.Long long4 = range_long3.getMaximum();
    java.lang.Long long5 = range_long3.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.lang.Long long16 = range_long8.getMaximum();
    boolean b18 = range_long8.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long19 = range_long3.intersectionWith(range_long8);
    boolean b21 = range_long8.equals((java.lang.Object)"");
    java.util.Comparator<java.lang.Object> comparator_obj22 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj23 = Range.between((java.lang.Object)'4', (java.lang.Object)"", comparator_obj22);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L+ "'", long5.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L+ "'", long16.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test017() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test017"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    Range<java.lang.Long> range_long19 = null;
    boolean b20 = range_long2.containsRange(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test018() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test018"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long7.contains((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);

  }

  @Test
  public void test019() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test019"); }


    java.lang.Object obj0 = null;
    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    boolean b5 = range_long3.isNaturalOrdering();
    boolean b7 = range_long3.equals((java.lang.Object)(byte)1);
    java.lang.String str8 = range_long3.toString();
    java.util.Comparator<java.lang.Object> comparator_obj9 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj10 = Range.between(obj0, (java.lang.Object)str8, comparator_obj9);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100..100]"+ "'", str8.equals("[100..100]"));

  }

  @Test
  public void test020() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test020"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b14 = range_long11.contains((java.lang.Long)10L);
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long15 = range_long5.intersectionWith(range_long11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test021() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test021"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b19 = range_long2.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test022() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test022"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)1L, comparator_long1);
    Range<java.lang.Long> range_long3 = null;
    boolean b4 = range_long2.isBeforeRange(range_long3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test023() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test023"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long6.elementCompareTo((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test024() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test024"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.lang.String str8 = range_long2.toString();
    boolean b10 = range_long2.contains((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100..100]"+ "'", str8.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test025() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test025"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)0L, comparator_long25);
    java.util.Comparator<java.lang.Object> comparator_obj28 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj29 = Range.between((java.lang.Object)range_long8, (java.lang.Object)range_long27, comparator_obj28);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);

  }

  @Test
  public void test026() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test026"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long7.contains((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test027() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test027"); }


    Range<java.lang.Boolean> range_b2 = Range.between((java.lang.Boolean)true, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_b2);

  }

  @Test
  public void test028() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test028"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.lang.String str44 = range_long18.toString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));

  }

  @Test
  public void test029() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test029"); }


    Range<java.lang.Boolean> range_b2 = Range.between((java.lang.Boolean)true, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_b2);

  }

  @Test
  public void test030() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test030"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    java.lang.Long long47 = range_long45.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long50.isAfterRange(range_long54);
    java.lang.Long long57 = range_long50.getMaximum();
    java.lang.Long long58 = range_long50.getMaximum();
    boolean b60 = range_long50.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long61 = range_long45.intersectionWith(range_long50);
    boolean b63 = range_long61.equals((java.lang.Object)(short)100);
    boolean b64 = range_long18.isOverlappedBy(range_long61);
    boolean b66 = range_long61.isAfter((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test031() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test031"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)0L, comparator_long5);
    boolean b9 = range_long7.contains((java.lang.Long)10L);
    boolean b11 = range_long7.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long7.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test032() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test032"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b29 = range_long10.isBeforeRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long24.getComparator();
    boolean b31 = range_long7.isAfterRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    boolean b36 = range_long34.isNaturalOrdering();
    boolean b38 = range_long34.equals((java.lang.Object)(byte)1);
    boolean b40 = range_long34.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long34.getComparator();
    boolean b43 = range_long34.isEndedBy((java.lang.Long)0L);
    boolean b44 = range_long7.isAfterRange(range_long34);
    Range<java.lang.Long> range_long45 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long46 = range_long7.intersectionWith(range_long45);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test033() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test033"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    boolean b44 = range_long18.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test034() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test034"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    java.lang.String str10 = range_long5.toString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str10 + "' != '" + "hi!"+ "'", str10.equals("hi!"));

  }

  @Test
  public void test035() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test035"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long12 = range_long5.intersectionWith(range_long11);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);

  }

  @Test
  public void test036() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test036"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long51.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.lang.Long long56 = range_long55.getMaximum();
    boolean b57 = range_long51.isAfterRange(range_long55);
    boolean b59 = range_long55.contains((java.lang.Long)0L);
    boolean b61 = range_long55.contains((java.lang.Long)1L);
    java.lang.String str63 = range_long55.toString("");
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.util.Comparator<java.lang.Long> comparator_long68 = range_long67.getComparator();
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)(-1L), comparator_long68);
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.lang.Long long73 = range_long72.getMaximum();
    boolean b74 = range_long69.isOverlappedBy(range_long72);
    boolean b75 = range_long55.isOverlappedBy(range_long72);
    boolean b77 = range_long55.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long78 = range_long55.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long79 = range_long55.getComparator();
    boolean b80 = range_long55.isNaturalOrdering();
    java.util.Comparator<java.lang.Object> comparator_obj81 = null;
    Range<java.lang.Object> range_obj82 = Range.between((java.lang.Object)b48, (java.lang.Object)b80, comparator_obj81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L+ "'", long56.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    org.junit.Assert.assertTrue("'" + comparator_long68 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long68.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long79 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long79.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_obj82);

  }

  @Test
  public void test037() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test037"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    boolean b23 = range_long16.equals((java.lang.Object)10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test038() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test038"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isEndedBy((java.lang.Long)(-1L));
    java.lang.String str13 = range_long2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str13 + "' != '" + "[100..100]"+ "'", str13.equals("[100..100]"));

  }

  @Test
  public void test039() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test039"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.lang.Long long52 = range_long51.getMaximum();
    java.lang.Long long53 = range_long51.getMinimum();
    boolean b54 = range_long51.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long56 = null;
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)100L, comparator_long56);
    java.util.Comparator<java.lang.Long> comparator_long58 = range_long57.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long60 = null;
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)100L, comparator_long60);
    java.lang.Long long62 = range_long61.getMaximum();
    boolean b63 = range_long57.isAfterRange(range_long61);
    java.lang.Long long64 = range_long57.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.util.Comparator<java.lang.Long> comparator_long68 = range_long67.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long70 = null;
    Range<java.lang.Long> range_long71 = Range.is((java.lang.Long)100L, comparator_long70);
    java.lang.Long long72 = range_long71.getMaximum();
    boolean b73 = range_long67.isAfterRange(range_long71);
    boolean b75 = range_long71.contains((java.lang.Long)0L);
    boolean b76 = range_long57.isBeforeRange(range_long71);
    boolean b77 = range_long51.containsRange(range_long71);
    java.util.Comparator<java.lang.Long> comparator_long79 = null;
    Range<java.lang.Long> range_long80 = Range.is((java.lang.Long)100L, comparator_long79);
    boolean b81 = range_long51.isBeforeRange(range_long80);
    boolean b82 = range_long6.isOverlappedBy(range_long80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L+ "'", long53.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    org.junit.Assert.assertTrue("'" + comparator_long58 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long58.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    org.junit.Assert.assertTrue("'" + comparator_long68 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long68.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long71);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long72 + "' != '" + 100L+ "'", long72.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == true);

  }

  @Test
  public void test040() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test040"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    boolean b53 = range_long48.isStartedBy((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test041() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test041"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long29 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long6.getComparator();
    boolean b31 = range_long6.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long6.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    boolean b37 = range_long35.isNaturalOrdering();
    boolean b39 = range_long35.equals((java.lang.Object)(byte)1);
    java.lang.String str40 = range_long35.toString();
    boolean b41 = range_long6.isOverlappedBy(range_long35);
    boolean b43 = range_long6.isStartedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[100..100]"+ "'", str40.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);

  }

  @Test
  public void test042() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test042"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    Range<java.lang.Long> range_long33 = null;
    boolean b34 = range_long6.isAfterRange(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);

  }

  @Test
  public void test043() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test043"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b29 = range_long10.isBeforeRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long24.getComparator();
    boolean b31 = range_long7.isAfterRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long40 = null;
    Range<java.lang.Long> range_long41 = Range.is((java.lang.Long)100L, comparator_long40);
    java.util.Comparator<java.lang.Long> comparator_long42 = range_long41.getComparator();
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)(-1L), comparator_long42);
    boolean b45 = range_long43.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long43.getComparator();
    boolean b47 = range_long37.equals((java.lang.Object)range_long43);
    boolean b49 = range_long43.isEndedBy((java.lang.Long)(-1L));
    boolean b50 = range_long7.equals((java.lang.Object)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long41);
    org.junit.Assert.assertTrue("'" + comparator_long42 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long42.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test044() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test044"); }


    Range<java.lang.String> range_str1 = Range.is("[100..100]");
    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long4.isAfterRange(range_long8);
    boolean b12 = range_long8.contains((java.lang.Long)0L);
    boolean b14 = range_long8.contains((java.lang.Long)1L);
    boolean b16 = range_long8.isAfter((java.lang.Long)0L);
    boolean b17 = range_long8.isNaturalOrdering();
    boolean b19 = range_long8.contains((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.util.Comparator<java.lang.Long> comparator_long26 = range_long25.getComparator();
    Range<java.lang.Long> range_long27 = range_long22.intersectionWith(range_long25);
    boolean b28 = range_long8.isAfterRange(range_long25);
    java.util.Comparator<java.lang.Object> comparator_obj29 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj30 = Range.between((java.lang.Object)range_str1, (java.lang.Object)range_long25, comparator_obj29);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_str1);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    org.junit.Assert.assertTrue("'" + comparator_long26 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long26.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);

  }

  @Test
  public void test045() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test045"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    int i34 = range_long6.elementCompareTo((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.util.Comparator<java.lang.Long> comparator_long44 = range_long43.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.lang.Long long48 = range_long47.getMaximum();
    boolean b49 = range_long43.isAfterRange(range_long47);
    java.lang.Long long50 = range_long43.getMaximum();
    boolean b52 = range_long43.contains((java.lang.Long)0L);
    boolean b53 = range_long40.isAfterRange(range_long43);
    boolean b54 = range_long6.isOverlappedBy(range_long43);
    java.util.Comparator<java.lang.Long> comparator_long56 = null;
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)100L, comparator_long56);
    java.util.Comparator<java.lang.Long> comparator_long58 = range_long57.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long60 = null;
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)100L, comparator_long60);
    java.lang.Long long62 = range_long61.getMaximum();
    boolean b63 = range_long57.isAfterRange(range_long61);
    boolean b65 = range_long61.contains((java.lang.Long)0L);
    boolean b67 = range_long61.contains((java.lang.Long)1L);
    java.lang.String str69 = range_long61.toString("");
    java.util.Comparator<java.lang.Long> comparator_long72 = null;
    Range<java.lang.Long> range_long73 = Range.is((java.lang.Long)100L, comparator_long72);
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long73.getComparator();
    Range<java.lang.Long> range_long75 = Range.is((java.lang.Long)(-1L), comparator_long74);
    java.util.Comparator<java.lang.Long> comparator_long77 = null;
    Range<java.lang.Long> range_long78 = Range.is((java.lang.Long)100L, comparator_long77);
    java.lang.Long long79 = range_long78.getMaximum();
    boolean b80 = range_long75.isOverlappedBy(range_long78);
    boolean b81 = range_long61.isOverlappedBy(range_long78);
    boolean b83 = range_long61.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long84 = range_long61.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long85 = range_long61.getComparator();
    boolean b86 = range_long61.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long87 = range_long61.getComparator();
    Range<java.lang.Long> range_long88 = range_long43.intersectionWith(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    org.junit.Assert.assertTrue("'" + comparator_long44 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long44.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L+ "'", long48.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L+ "'", long50.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    org.junit.Assert.assertTrue("'" + comparator_long58 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long58.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long73);
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L+ "'", long79.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long85 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long85.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    org.junit.Assert.assertTrue("'" + comparator_long87 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long87.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long88);

  }

  @Test
  public void test046() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test046"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    boolean b23 = range_long16.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    boolean b37 = range_long35.isNaturalOrdering();
    boolean b39 = range_long35.equals((java.lang.Object)(byte)1);
    java.lang.String str40 = range_long35.toString();
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.util.Comparator<java.lang.Long> comparator_long44 = range_long43.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.lang.Long long48 = range_long47.getMaximum();
    boolean b49 = range_long43.isAfterRange(range_long47);
    boolean b51 = range_long47.contains((java.lang.Long)0L);
    boolean b53 = range_long47.contains((java.lang.Long)1L);
    java.lang.String str55 = range_long47.toString("");
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.util.Comparator<java.lang.Long> comparator_long60 = range_long59.getComparator();
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)(-1L), comparator_long60);
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.lang.Long long65 = range_long64.getMaximum();
    boolean b66 = range_long61.isOverlappedBy(range_long64);
    boolean b67 = range_long47.isOverlappedBy(range_long64);
    boolean b69 = range_long47.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long70 = range_long47.getMaximum();
    boolean b71 = range_long35.containsRange(range_long47);
    boolean b72 = range_long30.isAfterRange(range_long35);
    boolean b73 = range_long16.isBeforeRange(range_long30);
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long16.getComparator();
    boolean b76 = range_long16.isBefore((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[100..100]"+ "'", str40.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    org.junit.Assert.assertTrue("'" + comparator_long44 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long44.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L+ "'", long48.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    org.junit.Assert.assertTrue("'" + comparator_long60 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long60.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);

  }

  @Test
  public void test047() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test047"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    boolean b48 = range_long46.isNaturalOrdering();
    boolean b50 = range_long46.equals((java.lang.Object)(byte)1);
    java.lang.String str51 = range_long46.toString();
    boolean b52 = range_long17.isOverlappedBy(range_long46);
    Range<java.lang.Long> range_long53 = range_long2.intersectionWith(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    boolean b63 = range_long53.equals((java.lang.Object)range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[100..100]"+ "'", str51.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);

  }

  @Test
  public void test048() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test048"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    boolean b8 = range_long5.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);

  }

  @Test
  public void test049() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test049"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long29 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long6.getComparator();
    boolean b31 = range_long6.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long6.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    boolean b37 = range_long35.isNaturalOrdering();
    boolean b39 = range_long35.equals((java.lang.Object)(byte)1);
    java.lang.String str40 = range_long35.toString();
    boolean b41 = range_long6.isOverlappedBy(range_long35);
    java.lang.String str43 = range_long35.toString("[100..100]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[100..100]"+ "'", str40.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[100..100]"+ "'", str43.equals("[100..100]"));

  }

  @Test
  public void test050() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test050"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    boolean b9 = range_long7.isStartedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test051() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test051"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long6.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test052() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test052"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Long long31 = range_long6.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));

  }

  @Test
  public void test053() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test053"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isStartedBy((java.lang.Long)10L);
    boolean b14 = range_long2.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test054() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test054"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    boolean b24 = range_long22.isNaturalOrdering();
    boolean b25 = range_long8.equals((java.lang.Object)b24);
    java.util.Comparator<java.lang.Object> comparator_obj27 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj28 = Range.between((java.lang.Object)b24, (java.lang.Object)'4', comparator_obj27);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);

  }

  @Test
  public void test055() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test055"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    boolean b16 = range_long11.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == true);

  }

  @Test
  public void test056() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test056"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long29 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long6.getComparator();
    java.lang.Long long31 = range_long6.getMaximum();
    boolean b33 = range_long6.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.util.Comparator<java.lang.Long> comparator_long37 = range_long36.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long36.isAfterRange(range_long40);
    boolean b44 = range_long40.contains((java.lang.Long)0L);
    boolean b46 = range_long40.contains((java.lang.Long)1L);
    java.lang.String str48 = range_long40.toString("");
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long53 = range_long52.getComparator();
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)(-1L), comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long56 = null;
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)100L, comparator_long56);
    java.lang.Long long58 = range_long57.getMaximum();
    boolean b59 = range_long54.isOverlappedBy(range_long57);
    boolean b60 = range_long40.isOverlappedBy(range_long57);
    boolean b62 = range_long40.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long63 = range_long40.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long64 = range_long40.getComparator();
    java.lang.Long long65 = range_long40.getMaximum();
    boolean b67 = range_long40.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Object> comparator_obj68 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj69 = Range.between((java.lang.Object)b33, (java.lang.Object)range_long40, comparator_obj68);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    org.junit.Assert.assertTrue("'" + comparator_long37 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long37.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str48 + "' != '" + ""+ "'", str48.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    org.junit.Assert.assertTrue("'" + comparator_long53 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long53.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L+ "'", long63.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long64 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long64.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test057() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test057"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long2.getComparator();
    boolean b11 = range_long2.isEndedBy((java.lang.Long)0L);
    boolean b13 = range_long2.contains((java.lang.Long)0L);
    java.lang.String str14 = range_long2.toString();
    boolean b16 = range_long2.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[100..100]"+ "'", str14.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test058() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test058"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long42.getComparator();
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)(-1L), comparator_long43);
    boolean b46 = range_long44.contains((java.lang.Long)10L);
    boolean b47 = range_long2.isOverlappedBy(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test059() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test059"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b29 = range_long10.isBeforeRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long24.getComparator();
    boolean b31 = range_long7.isAfterRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    boolean b36 = range_long34.isNaturalOrdering();
    boolean b38 = range_long34.equals((java.lang.Object)(byte)1);
    boolean b40 = range_long34.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long34.getComparator();
    boolean b43 = range_long34.isEndedBy((java.lang.Long)0L);
    boolean b44 = range_long7.isAfterRange(range_long34);
    boolean b45 = range_long34.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);

  }

  @Test
  public void test060() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test060"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    boolean b23 = range_long15.contains((java.lang.Long)(-1L));
    boolean b25 = range_long15.isAfter((java.lang.Long)(-1L));
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long29 = range_long28.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.lang.Long long33 = range_long32.getMaximum();
    boolean b34 = range_long28.isAfterRange(range_long32);
    java.lang.Long long35 = range_long28.getMaximum();
    boolean b37 = range_long28.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long43 = null;
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)100L, comparator_long43);
    java.lang.Long long45 = range_long44.getMaximum();
    boolean b46 = range_long40.isAfterRange(range_long44);
    boolean b48 = range_long40.isEndedBy((java.lang.Long)(-1L));
    boolean b50 = range_long40.isEndedBy((java.lang.Long)1L);
    boolean b51 = range_long28.containsRange(range_long40);
    boolean b52 = range_long15.isBeforeRange(range_long28);
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long55.isAfterRange(range_long59);
    boolean b63 = range_long59.contains((java.lang.Long)0L);
    boolean b65 = range_long59.contains((java.lang.Long)1L);
    java.lang.String str67 = range_long59.toString("");
    java.util.Comparator<java.lang.Long> comparator_long70 = null;
    Range<java.lang.Long> range_long71 = Range.is((java.lang.Long)100L, comparator_long70);
    java.util.Comparator<java.lang.Long> comparator_long72 = range_long71.getComparator();
    Range<java.lang.Long> range_long73 = Range.is((java.lang.Long)(-1L), comparator_long72);
    java.util.Comparator<java.lang.Long> comparator_long75 = null;
    Range<java.lang.Long> range_long76 = Range.is((java.lang.Long)100L, comparator_long75);
    java.lang.Long long77 = range_long76.getMaximum();
    boolean b78 = range_long73.isOverlappedBy(range_long76);
    boolean b79 = range_long59.isOverlappedBy(range_long76);
    boolean b81 = range_long59.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long82 = range_long59.getMaximum();
    boolean b83 = range_long28.containsRange(range_long59);
    java.lang.Long long84 = range_long59.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    org.junit.Assert.assertTrue("'" + comparator_long29 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long29.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L+ "'", long45.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long71);
    org.junit.Assert.assertTrue("'" + comparator_long72 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long72.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long77 + "' != '" + 100L+ "'", long77.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L+ "'", long82.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));

  }

  @Test
  public void test061() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test061"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long2.isBefore((java.lang.Long)10L);
    boolean b21 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    java.lang.Long long31 = range_long24.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long34.isAfterRange(range_long38);
    boolean b42 = range_long38.contains((java.lang.Long)0L);
    boolean b43 = range_long24.isBeforeRange(range_long38);
    java.util.Comparator<java.lang.Long> comparator_long44 = range_long38.getComparator();
    boolean b46 = range_long38.isBefore((java.lang.Long)10L);
    boolean b47 = range_long2.isAfterRange(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    org.junit.Assert.assertTrue("'" + comparator_long44 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long44.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);

  }

  @Test
  public void test062() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test062"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    boolean b23 = range_long15.contains((java.lang.Long)(-1L));
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.util.Comparator<java.lang.Long> comparator_long28 = range_long27.getComparator();
    boolean b29 = range_long27.isNaturalOrdering();
    boolean b31 = range_long27.equals((java.lang.Object)(byte)1);
    boolean b33 = range_long27.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long27.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    boolean b36 = range_long15.equals((java.lang.Object)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    org.junit.Assert.assertTrue("'" + comparator_long28 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long28.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test063() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test063"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.lang.String str8 = range_long7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100..100]"+ "'", str8.equals("[100..100]"));

  }

  @Test
  public void test064() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test064"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.lang.Long long6 = range_long5.getMaximum();
    boolean b8 = range_long5.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long6 + "' != '" + 100L+ "'", long6.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);

  }

  @Test
  public void test065() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test065"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.lang.Long long16 = range_long15.getMaximum();
    boolean b17 = range_long11.isAfterRange(range_long15);
    java.lang.Long long18 = range_long11.getMaximum();
    boolean b19 = range_long6.isAfterRange(range_long11);
    boolean b21 = range_long11.equals((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L+ "'", long16.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);

  }

  @Test
  public void test066() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test066"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.lang.Long long12 = range_long2.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));

  }

  @Test
  public void test067() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test067"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b9 = range_long5.isNaturalOrdering();
    java.lang.Long long10 = range_long5.getMaximum();
    boolean b12 = range_long5.isStartedBy((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)(-1L), comparator_long18);
    boolean b21 = range_long19.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long19.getComparator();
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)0L, comparator_long22);
    java.util.Comparator<java.lang.Object> comparator_obj24 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj25 = Range.between((java.lang.Object)range_long5, (java.lang.Object)range_long23, comparator_obj24);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);

  }

  @Test
  public void test068() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test068"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isBefore((java.lang.Long)(-1L));
    boolean b14 = range_long2.isStartedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.lang.Long long22 = range_long21.getMaximum();
    boolean b23 = range_long17.isAfterRange(range_long21);
    boolean b25 = range_long21.contains((java.lang.Long)0L);
    boolean b27 = range_long21.contains((java.lang.Long)1L);
    java.lang.String str29 = range_long21.toString("");
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long35.isOverlappedBy(range_long38);
    boolean b41 = range_long21.isOverlappedBy(range_long38);
    Range<java.lang.Long> range_long42 = range_long2.intersectionWith(range_long38);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long45.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.lang.Long long50 = range_long49.getMaximum();
    boolean b51 = range_long45.isAfterRange(range_long49);
    boolean b53 = range_long49.contains((java.lang.Long)0L);
    boolean b55 = range_long49.contains((java.lang.Long)1L);
    boolean b57 = range_long49.isAfter((java.lang.Long)0L);
    java.lang.Long long58 = range_long49.getMaximum();
    boolean b59 = range_long2.isBeforeRange(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L+ "'", long22.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L+ "'", long50.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);

  }

  @Test
  public void test069() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test069"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long2.isBeforeRange(range_long28);
    boolean b54 = range_long2.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);

  }

  @Test
  public void test070() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test070"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long2.getComparator();
    boolean b12 = range_long2.isBefore((java.lang.Long)10L);
    java.lang.Long long13 = range_long2.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));

  }

  @Test
  public void test071() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test071"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    int i34 = range_long6.elementCompareTo((java.lang.Long)10L);
    java.lang.Long long35 = range_long6.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));

  }

  @Test
  public void test072() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test072"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long23.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long30.isAfterRange(range_long34);
    java.lang.Long long37 = range_long30.getMaximum();
    boolean b39 = range_long30.contains((java.lang.Long)0L);
    boolean b41 = range_long30.isEndedBy((java.lang.Long)1L);
    boolean b43 = range_long30.contains((java.lang.Long)10L);
    boolean b45 = range_long30.contains((java.lang.Long)10L);
    boolean b46 = range_long23.isBeforeRange(range_long30);
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long49.isAfterRange(range_long53);
    java.lang.Long long56 = range_long49.getMaximum();
    java.lang.Long long57 = range_long49.getMaximum();
    boolean b59 = range_long49.isEndedBy((java.lang.Long)(-1L));
    boolean b60 = range_long23.isOverlappedBy(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L+ "'", long56.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);

  }

  @Test
  public void test073() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test073"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.util.Comparator<java.lang.Long> comparator_long7 = range_long6.getComparator();
    boolean b8 = range_long6.isNaturalOrdering();
    boolean b10 = range_long6.equals((java.lang.Object)(byte)1);
    java.util.Comparator<java.lang.Object> comparator_obj11 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj12 = Range.between((java.lang.Object)range_long2, (java.lang.Object)range_long6, comparator_obj11);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    org.junit.Assert.assertTrue("'" + comparator_long7 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long7.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);

  }

  @Test
  public void test074() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test074"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    int i34 = range_long6.elementCompareTo((java.lang.Long)10L);
    boolean b36 = range_long6.isStartedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);

  }

  @Test
  public void test075() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test075"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    boolean b23 = range_long16.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    boolean b37 = range_long35.isNaturalOrdering();
    boolean b39 = range_long35.equals((java.lang.Object)(byte)1);
    java.lang.String str40 = range_long35.toString();
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.util.Comparator<java.lang.Long> comparator_long44 = range_long43.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.lang.Long long48 = range_long47.getMaximum();
    boolean b49 = range_long43.isAfterRange(range_long47);
    boolean b51 = range_long47.contains((java.lang.Long)0L);
    boolean b53 = range_long47.contains((java.lang.Long)1L);
    java.lang.String str55 = range_long47.toString("");
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.util.Comparator<java.lang.Long> comparator_long60 = range_long59.getComparator();
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)(-1L), comparator_long60);
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.lang.Long long65 = range_long64.getMaximum();
    boolean b66 = range_long61.isOverlappedBy(range_long64);
    boolean b67 = range_long47.isOverlappedBy(range_long64);
    boolean b69 = range_long47.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long70 = range_long47.getMaximum();
    boolean b71 = range_long35.containsRange(range_long47);
    boolean b72 = range_long30.isAfterRange(range_long35);
    boolean b73 = range_long16.isBeforeRange(range_long30);
    java.util.Comparator<java.lang.Long> comparator_long75 = null;
    Range<java.lang.Long> range_long76 = Range.is((java.lang.Long)100L, comparator_long75);
    java.util.Comparator<java.lang.Long> comparator_long77 = range_long76.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long79 = null;
    Range<java.lang.Long> range_long80 = Range.is((java.lang.Long)100L, comparator_long79);
    java.lang.Long long81 = range_long80.getMaximum();
    boolean b82 = range_long76.isAfterRange(range_long80);
    java.lang.Long long83 = range_long76.getMaximum();
    java.lang.Long long84 = range_long76.getMaximum();
    boolean b86 = range_long76.isEndedBy((java.lang.Long)(-1L));
    boolean b87 = range_long16.isBeforeRange(range_long76);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + "[100..100]"+ "'", str40.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    org.junit.Assert.assertTrue("'" + comparator_long44 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long44.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L+ "'", long48.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    org.junit.Assert.assertTrue("'" + comparator_long60 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long60.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long76);
    org.junit.Assert.assertTrue("'" + comparator_long77 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long77.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long81 + "' != '" + 100L+ "'", long81.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L+ "'", long83.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test076() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test076"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    boolean b50 = range_long11.isAfter((java.lang.Long)0L);
    java.lang.Long long51 = range_long11.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)0L, comparator_long57);
    boolean b61 = range_long59.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Object> comparator_obj62 = null;
    Range<java.lang.Object> range_obj63 = Range.between((java.lang.Object)long51, (java.lang.Object)10L, comparator_obj62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_obj63);

  }

  @Test
  public void test077() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test077"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long2.getComparator();
    boolean b10 = range_long2.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);

  }

  @Test
  public void test078() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test078"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    boolean b5 = range_long2.contains((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test079() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test079"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isStartedBy((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    boolean b21 = range_long15.isBefore((java.lang.Long)10L);
    boolean b22 = range_long15.isNaturalOrdering();
    boolean b23 = range_long2.containsRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    boolean b28 = range_long26.isNaturalOrdering();
    boolean b30 = range_long26.equals((java.lang.Object)(byte)1);
    boolean b32 = range_long26.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    java.lang.Long long37 = range_long35.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long43 = null;
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)100L, comparator_long43);
    java.lang.Long long45 = range_long44.getMaximum();
    boolean b46 = range_long40.isAfterRange(range_long44);
    java.lang.Long long47 = range_long40.getMaximum();
    java.lang.Long long48 = range_long40.getMaximum();
    boolean b50 = range_long40.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long51 = range_long35.intersectionWith(range_long40);
    boolean b53 = range_long51.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    boolean b64 = range_long60.contains((java.lang.Long)0L);
    boolean b66 = range_long60.contains((java.lang.Long)1L);
    java.lang.String str68 = range_long60.toString("");
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.util.Comparator<java.lang.Long> comparator_long73 = range_long72.getComparator();
    Range<java.lang.Long> range_long74 = Range.is((java.lang.Long)(-1L), comparator_long73);
    java.util.Comparator<java.lang.Long> comparator_long76 = null;
    Range<java.lang.Long> range_long77 = Range.is((java.lang.Long)100L, comparator_long76);
    java.lang.Long long78 = range_long77.getMaximum();
    boolean b79 = range_long74.isOverlappedBy(range_long77);
    boolean b80 = range_long60.isOverlappedBy(range_long77);
    boolean b81 = range_long51.isBeforeRange(range_long77);
    boolean b83 = range_long51.isAfter((java.lang.Long)1L);
    boolean b84 = range_long26.isBeforeRange(range_long51);
    boolean b85 = range_long2.isOverlappedBy(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L+ "'", long45.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L+ "'", long48.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    org.junit.Assert.assertTrue("'" + comparator_long73 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long73.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);

  }

  @Test
  public void test080() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test080"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)(-1L), comparator_long5);
    boolean b8 = range_long6.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long6.getComparator();
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)10L, comparator_long9);
    int i12 = range_long10.elementCompareTo((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i12 == (-1));

  }

  @Test
  public void test081() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test081"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.lang.Long long16 = range_long15.getMaximum();
    boolean b17 = range_long11.isAfterRange(range_long15);
    java.lang.Long long18 = range_long11.getMaximum();
    boolean b19 = range_long6.isAfterRange(range_long11);
    int i21 = range_long6.elementCompareTo((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long6.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L+ "'", long16.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test082() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test082"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long13 = null;
    boolean b14 = range_long2.isAfterRange(range_long13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test083() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test083"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    boolean b23 = range_long16.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.lang.Long long33 = range_long26.getMaximum();
    boolean b35 = range_long26.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long38.isEndedBy((java.lang.Long)(-1L));
    boolean b48 = range_long38.isEndedBy((java.lang.Long)1L);
    boolean b49 = range_long26.containsRange(range_long38);
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long53 = range_long52.getComparator();
    boolean b54 = range_long52.isNaturalOrdering();
    boolean b56 = range_long52.equals((java.lang.Object)(byte)1);
    java.lang.String str57 = range_long52.toString();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.util.Comparator<java.lang.Long> comparator_long61 = range_long60.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.lang.Long long65 = range_long64.getMaximum();
    boolean b66 = range_long60.isAfterRange(range_long64);
    boolean b68 = range_long64.contains((java.lang.Long)0L);
    boolean b70 = range_long64.contains((java.lang.Long)1L);
    java.lang.String str72 = range_long64.toString("");
    java.util.Comparator<java.lang.Long> comparator_long75 = null;
    Range<java.lang.Long> range_long76 = Range.is((java.lang.Long)100L, comparator_long75);
    java.util.Comparator<java.lang.Long> comparator_long77 = range_long76.getComparator();
    Range<java.lang.Long> range_long78 = Range.is((java.lang.Long)(-1L), comparator_long77);
    java.util.Comparator<java.lang.Long> comparator_long80 = null;
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)100L, comparator_long80);
    java.lang.Long long82 = range_long81.getMaximum();
    boolean b83 = range_long78.isOverlappedBy(range_long81);
    boolean b84 = range_long64.isOverlappedBy(range_long81);
    boolean b86 = range_long64.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long87 = range_long64.getMaximum();
    boolean b88 = range_long52.containsRange(range_long64);
    java.lang.String str90 = range_long64.toString("");
    boolean b91 = range_long38.containsRange(range_long64);
    boolean b92 = range_long16.isOverlappedBy(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    org.junit.Assert.assertTrue("'" + comparator_long53 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long53.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str57 + "' != '" + "[100..100]"+ "'", str57.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    org.junit.Assert.assertTrue("'" + comparator_long61 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long61.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + ""+ "'", str72.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long76);
    org.junit.Assert.assertTrue("'" + comparator_long77 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long77.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L+ "'", long82.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long87 + "' != '" + 100L+ "'", long87.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str90 + "' != '" + ""+ "'", str90.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == true);

  }

  @Test
  public void test084() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test084"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    java.lang.Long long19 = range_long18.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));

  }

  @Test
  public void test085() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test085"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long31.isAfterRange(range_long35);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    boolean b42 = range_long40.isNaturalOrdering();
    boolean b44 = range_long40.equals((java.lang.Object)(byte)1);
    java.lang.String str45 = range_long40.toString();
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.lang.Long long53 = range_long52.getMaximum();
    boolean b54 = range_long48.isAfterRange(range_long52);
    boolean b56 = range_long52.contains((java.lang.Long)0L);
    boolean b58 = range_long52.contains((java.lang.Long)1L);
    java.lang.String str60 = range_long52.toString("");
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.util.Comparator<java.lang.Long> comparator_long65 = range_long64.getComparator();
    Range<java.lang.Long> range_long66 = Range.is((java.lang.Long)(-1L), comparator_long65);
    java.util.Comparator<java.lang.Long> comparator_long68 = null;
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)100L, comparator_long68);
    java.lang.Long long70 = range_long69.getMaximum();
    boolean b71 = range_long66.isOverlappedBy(range_long69);
    boolean b72 = range_long52.isOverlappedBy(range_long69);
    boolean b74 = range_long52.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long75 = range_long52.getMaximum();
    boolean b76 = range_long40.containsRange(range_long52);
    boolean b77 = range_long35.isAfterRange(range_long40);
    java.lang.String str78 = range_long40.toString();
    boolean b79 = range_long40.isNaturalOrdering();
    boolean b80 = range_long2.equals((java.lang.Object)range_long40);
    java.util.Comparator<java.lang.Long> comparator_long83 = null;
    Range<java.lang.Long> range_long84 = Range.is((java.lang.Long)100L, comparator_long83);
    java.util.Comparator<java.lang.Long> comparator_long85 = range_long84.getComparator();
    Range<java.lang.Long> range_long86 = Range.is((java.lang.Long)100L, comparator_long85);
    java.util.Comparator<java.lang.Long> comparator_long89 = null;
    Range<java.lang.Long> range_long90 = Range.is((java.lang.Long)100L, comparator_long89);
    java.util.Comparator<java.lang.Long> comparator_long91 = range_long90.getComparator();
    Range<java.lang.Long> range_long92 = Range.is((java.lang.Long)(-1L), comparator_long91);
    boolean b94 = range_long92.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long95 = range_long92.getComparator();
    boolean b96 = range_long86.equals((java.lang.Object)range_long92);
    boolean b98 = range_long92.isStartedBy((java.lang.Long)(-1L));
    boolean b99 = range_long40.isAfterRange(range_long92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[100..100]"+ "'", str45.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L+ "'", long53.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    org.junit.Assert.assertTrue("'" + comparator_long65 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long65.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str78 + "' != '" + "[100..100]"+ "'", str78.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long84);
    org.junit.Assert.assertTrue("'" + comparator_long85 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long85.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long90);
    org.junit.Assert.assertTrue("'" + comparator_long91 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long91.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long92);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    org.junit.Assert.assertTrue("'" + comparator_long95 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long95.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b96 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == true);

  }

  @Test
  public void test086() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test086"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long2.getComparator();
    boolean b12 = range_long2.isBefore((java.lang.Long)10L);
    int i14 = range_long2.elementCompareTo((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == (-1));

  }

  @Test
  public void test087() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test087"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    boolean b6 = range_long4.isNaturalOrdering();
    boolean b8 = range_long4.equals((java.lang.Object)(byte)1);
    boolean b10 = range_long4.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long4.getComparator();
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)(-1L), comparator_long11);
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)(-1L), comparator_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);

  }

  @Test
  public void test088() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test088"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    boolean b19 = range_long10.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    boolean b30 = range_long22.isEndedBy((java.lang.Long)(-1L));
    boolean b32 = range_long22.isEndedBy((java.lang.Long)1L);
    boolean b33 = range_long10.containsRange(range_long22);
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long34 = range_long5.intersectionWith(range_long10);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);

  }

  @Test
  public void test089() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test089"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    java.lang.Long long15 = range_long6.getMaximum();
    boolean b17 = range_long6.isBefore((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);

  }

  @Test
  public void test090() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test090"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    java.lang.Long long47 = range_long45.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long50.isAfterRange(range_long54);
    java.lang.Long long57 = range_long50.getMaximum();
    java.lang.Long long58 = range_long50.getMaximum();
    boolean b60 = range_long50.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long61 = range_long45.intersectionWith(range_long50);
    boolean b63 = range_long61.equals((java.lang.Object)(short)100);
    boolean b64 = range_long18.isOverlappedBy(range_long61);
    java.lang.Long long65 = range_long61.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));

  }

  @Test
  public void test091() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test091"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long21.getComparator();
    Range<java.lang.Long> range_long23 = range_long18.intersectionWith(range_long21);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.lang.Long long33 = range_long26.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.util.Comparator<java.lang.Long> comparator_long37 = range_long36.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long36.isAfterRange(range_long40);
    boolean b44 = range_long40.contains((java.lang.Long)0L);
    boolean b45 = range_long26.isBeforeRange(range_long40);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long40.getComparator();
    boolean b47 = range_long23.isAfterRange(range_long40);
    boolean b48 = range_long5.isAfterRange(range_long23);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long51.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.lang.Long long56 = range_long55.getMaximum();
    boolean b57 = range_long51.isAfterRange(range_long55);
    boolean b59 = range_long55.contains((java.lang.Long)0L);
    boolean b61 = range_long55.contains((java.lang.Long)1L);
    java.lang.String str63 = range_long55.toString("");
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.util.Comparator<java.lang.Long> comparator_long68 = range_long67.getComparator();
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)(-1L), comparator_long68);
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.lang.Long long73 = range_long72.getMaximum();
    boolean b74 = range_long69.isOverlappedBy(range_long72);
    boolean b75 = range_long55.isOverlappedBy(range_long72);
    boolean b77 = range_long55.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long78 = range_long55.getMaximum();
    int i80 = range_long55.elementCompareTo((java.lang.Long)(-1L));
    boolean b81 = range_long5.isBeforeRange(range_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    org.junit.Assert.assertTrue("'" + comparator_long37 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long37.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L+ "'", long56.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str63 + "' != '" + ""+ "'", str63.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    org.junit.Assert.assertTrue("'" + comparator_long68 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long68.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i80 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == false);

  }

  @Test
  public void test092() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test092"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    java.lang.String str40 = range_long14.toString("");
    java.lang.String str41 = range_long14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str40 + "' != '" + ""+ "'", str40.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str41 + "' != '" + "[100..100]"+ "'", str41.equals("[100..100]"));

  }

  @Test
  public void test093() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test093"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    boolean b66 = range_long6.isAfter((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);

  }

  @Test
  public void test094() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test094"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long18.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long23.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.lang.Long long28 = range_long27.getMaximum();
    boolean b29 = range_long23.isAfterRange(range_long27);
    boolean b31 = range_long27.contains((java.lang.Long)0L);
    boolean b33 = range_long27.contains((java.lang.Long)1L);
    java.lang.String str35 = range_long27.toString("");
    java.util.Comparator<java.lang.Long> comparator_long38 = null;
    Range<java.lang.Long> range_long39 = Range.is((java.lang.Long)100L, comparator_long38);
    java.util.Comparator<java.lang.Long> comparator_long40 = range_long39.getComparator();
    Range<java.lang.Long> range_long41 = Range.is((java.lang.Long)(-1L), comparator_long40);
    java.util.Comparator<java.lang.Long> comparator_long43 = null;
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)100L, comparator_long43);
    java.lang.Long long45 = range_long44.getMaximum();
    boolean b46 = range_long41.isOverlappedBy(range_long44);
    boolean b47 = range_long27.isOverlappedBy(range_long44);
    boolean b48 = range_long18.isBeforeRange(range_long44);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.lang.Long long52 = range_long51.getMaximum();
    java.lang.Long long53 = range_long51.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    java.lang.Long long63 = range_long56.getMaximum();
    java.lang.Long long64 = range_long56.getMaximum();
    boolean b66 = range_long56.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long67 = range_long51.intersectionWith(range_long56);
    boolean b69 = range_long56.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Object> comparator_obj70 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj71 = Range.between((java.lang.Object)b48, (java.lang.Object)0L, comparator_obj70);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L+ "'", long28.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str35 + "' != '" + ""+ "'", str35.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    org.junit.Assert.assertTrue("'" + comparator_long40 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long40.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L+ "'", long45.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L+ "'", long53.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L+ "'", long63.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);

  }

  @Test
  public void test095() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test095"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    boolean b17 = range_long8.contains((java.lang.Long)0L);
    boolean b18 = range_long5.isAfterRange(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long21.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.lang.Long long26 = range_long25.getMaximum();
    boolean b27 = range_long21.isAfterRange(range_long25);
    boolean b28 = range_long8.isOverlappedBy(range_long25);
    Range<java.lang.Long> range_long29 = null;
    boolean b30 = range_long8.isBeforeRange(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L+ "'", long26.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test096() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test096"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    java.lang.Long long15 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Object> comparator_obj17 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj18 = Range.between((java.lang.Object)range_long6, (java.lang.Object)"[100..100]", comparator_obj17);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));

  }

  @Test
  public void test097() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test097"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    java.lang.Long long65 = range_long33.getMinimum();
    java.lang.String str66 = range_long33.toString();
    boolean b68 = range_long33.isEndedBy((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[100..100]"+ "'", str66.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);

  }

  @Test
  public void test098() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test098"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    boolean b12 = range_long2.contains((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.lang.Long long20 = range_long19.getMaximum();
    boolean b21 = range_long15.isAfterRange(range_long19);
    boolean b23 = range_long15.isEndedBy((java.lang.Long)(-1L));
    boolean b25 = range_long15.isEndedBy((java.lang.Long)1L);
    boolean b27 = range_long15.equals((java.lang.Object)false);
    boolean b28 = range_long2.equals((java.lang.Object)b27);
    java.lang.String str30 = range_long2.toString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str30 + "' != '" + ""+ "'", str30.equals(""));

  }

  @Test
  public void test099() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test099"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    boolean b13 = range_long2.isEndedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)(-1L), comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long19.isOverlappedBy(range_long22);
    boolean b26 = range_long19.isAfter((java.lang.Long)0L);
    boolean b28 = range_long19.isStartedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long31.isAfterRange(range_long35);
    boolean b39 = range_long35.contains((java.lang.Long)0L);
    boolean b41 = range_long35.contains((java.lang.Long)1L);
    boolean b43 = range_long35.isAfter((java.lang.Long)0L);
    boolean b44 = range_long35.isNaturalOrdering();
    boolean b46 = range_long35.contains((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long53 = range_long52.getComparator();
    Range<java.lang.Long> range_long54 = range_long49.intersectionWith(range_long52);
    boolean b55 = range_long35.isAfterRange(range_long52);
    boolean b56 = range_long19.containsRange(range_long35);
    boolean b57 = range_long2.isBeforeRange(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    org.junit.Assert.assertTrue("'" + comparator_long53 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long53.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);

  }

  @Test
  public void test100() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test100"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.util.Comparator<java.lang.Long> comparator_long28 = range_long27.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long27.isAfterRange(range_long31);
    boolean b35 = range_long27.isEndedBy((java.lang.Long)(-1L));
    boolean b37 = range_long27.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    boolean b42 = range_long40.isNaturalOrdering();
    boolean b44 = range_long40.equals((java.lang.Object)(byte)1);
    java.lang.String str45 = range_long40.toString();
    boolean b46 = range_long27.isAfterRange(range_long40);
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long49.isAfterRange(range_long53);
    boolean b57 = range_long53.contains((java.lang.Long)0L);
    boolean b59 = range_long53.contains((java.lang.Long)1L);
    java.lang.String str61 = range_long53.toString("");
    java.util.Comparator<java.lang.Long> comparator_long64 = null;
    Range<java.lang.Long> range_long65 = Range.is((java.lang.Long)100L, comparator_long64);
    java.util.Comparator<java.lang.Long> comparator_long66 = range_long65.getComparator();
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)(-1L), comparator_long66);
    java.util.Comparator<java.lang.Long> comparator_long69 = null;
    Range<java.lang.Long> range_long70 = Range.is((java.lang.Long)100L, comparator_long69);
    java.lang.Long long71 = range_long70.getMaximum();
    boolean b72 = range_long67.isOverlappedBy(range_long70);
    boolean b73 = range_long53.isOverlappedBy(range_long70);
    boolean b75 = range_long53.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long76 = range_long53.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long77 = range_long53.getComparator();
    boolean b78 = range_long27.isBeforeRange(range_long53);
    boolean b79 = range_long16.equals((java.lang.Object)range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    org.junit.Assert.assertTrue("'" + comparator_long28 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long28.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[100..100]"+ "'", str45.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    org.junit.Assert.assertTrue("'" + comparator_long66 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long66.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L+ "'", long71.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L+ "'", long76.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long77 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long77.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == true);

  }

  @Test
  public void test101() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test101"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long23.getComparator();
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    boolean b27 = range_long25.isEndedBy((java.lang.Long)0L);
    boolean b28 = range_long2.isOverlappedBy(range_long25);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    Range<java.lang.Long> range_long36 = range_long31.intersectionWith(range_long34);
    boolean b38 = range_long34.isEndedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Object> comparator_obj39 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj40 = Range.between((java.lang.Object)range_long25, (java.lang.Object)0L, comparator_obj39);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);

  }

  @Test
  public void test102() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test102"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    java.lang.Long long47 = range_long45.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long50.isAfterRange(range_long54);
    java.lang.Long long57 = range_long50.getMaximum();
    java.lang.Long long58 = range_long50.getMaximum();
    boolean b60 = range_long50.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long61 = range_long45.intersectionWith(range_long50);
    boolean b63 = range_long61.equals((java.lang.Object)(short)100);
    boolean b64 = range_long18.isOverlappedBy(range_long61);
    java.lang.Long long65 = range_long18.getMaximum();
    java.lang.Long long66 = range_long18.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L+ "'", long66.equals(100L));

  }

  @Test
  public void test103() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test103"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    boolean b12 = range_long2.contains((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    boolean b20 = range_long2.isOverlappedBy(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);

  }

  @Test
  public void test104() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test104"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.lang.Long long20 = range_long2.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));

  }

  @Test
  public void test105() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test105"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    java.lang.Long long52 = range_long18.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long55.isAfterRange(range_long59);
    boolean b63 = range_long55.isEndedBy((java.lang.Long)(-1L));
    boolean b65 = range_long55.isEndedBy((java.lang.Long)1L);
    boolean b67 = range_long55.equals((java.lang.Object)false);
    boolean b68 = range_long18.equals((java.lang.Object)range_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);

  }

  @Test
  public void test106() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test106"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    boolean b50 = range_long11.isAfter((java.lang.Long)0L);
    java.lang.Long long51 = range_long11.getMaximum();
    boolean b53 = range_long11.isEndedBy((java.lang.Long)1L);
    java.lang.Long long54 = range_long11.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));

  }

  @Test
  public void test107() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test107"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    boolean b53 = range_long18.isBefore((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test108() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test108"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    java.lang.Long long10 = range_long8.getMinimum();
    Range<java.lang.Long> range_long11 = range_long2.intersectionWith(range_long8);
    boolean b12 = range_long11.isNaturalOrdering();
    int i14 = range_long11.elementCompareTo((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 0);

  }

  @Test
  public void test109() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test109"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.util.Comparator<java.lang.Long> comparator_long26 = range_long25.getComparator();
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)(-1L), comparator_long26);
    boolean b29 = range_long27.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long27.getComparator();
    boolean b31 = range_long21.equals((java.lang.Object)range_long27);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long38 = range_long37.getComparator();
    Range<java.lang.Long> range_long39 = range_long34.intersectionWith(range_long37);
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long42.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.lang.Long long47 = range_long46.getMaximum();
    boolean b48 = range_long42.isAfterRange(range_long46);
    java.lang.Long long49 = range_long42.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long53 = range_long52.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.lang.Long long57 = range_long56.getMaximum();
    boolean b58 = range_long52.isAfterRange(range_long56);
    boolean b60 = range_long56.contains((java.lang.Long)0L);
    boolean b61 = range_long42.isBeforeRange(range_long56);
    java.util.Comparator<java.lang.Long> comparator_long62 = range_long56.getComparator();
    boolean b63 = range_long39.isAfterRange(range_long56);
    boolean b64 = range_long21.isAfterRange(range_long39);
    java.lang.String str65 = range_long39.toString();
    boolean b66 = range_long5.isAfterRange(range_long39);
    java.lang.String str67 = range_long39.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    org.junit.Assert.assertTrue("'" + comparator_long26 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long26.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    org.junit.Assert.assertTrue("'" + comparator_long38 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long38.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long49 + "' != '" + 100L+ "'", long49.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    org.junit.Assert.assertTrue("'" + comparator_long53 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long53.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    org.junit.Assert.assertTrue("'" + comparator_long62 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long62.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str65 + "' != '" + "[100..100]"+ "'", str65.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + "[100..100]"+ "'", str67.equals("[100..100]"));

  }

  @Test
  public void test110() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test110"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long2.isBeforeRange(range_long28);
    int i55 = range_long2.elementCompareTo((java.lang.Long)100L);
    java.lang.Long long56 = range_long2.getMinimum();
    boolean b58 = range_long2.isStartedBy((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L+ "'", long56.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);

  }

  @Test
  public void test111() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test111"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b10 = range_long5.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long5.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test112() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test112"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    java.lang.Long long10 = range_long8.getMinimum();
    Range<java.lang.Long> range_long11 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long14.isEndedBy((java.lang.Long)(-1L));
    boolean b24 = range_long14.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.util.Comparator<java.lang.Long> comparator_long28 = range_long27.getComparator();
    boolean b29 = range_long27.isNaturalOrdering();
    boolean b31 = range_long27.equals((java.lang.Object)(byte)1);
    java.lang.String str32 = range_long27.toString();
    boolean b33 = range_long14.isAfterRange(range_long27);
    boolean b34 = range_long2.containsRange(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    org.junit.Assert.assertTrue("'" + comparator_long28 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long28.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + "[100..100]"+ "'", str32.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test113() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test113"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long2.getComparator();
    boolean b11 = range_long2.isEndedBy((java.lang.Long)0L);
    boolean b13 = range_long2.contains((java.lang.Long)0L);
    java.lang.String str14 = range_long2.toString();
    boolean b16 = range_long2.isEndedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + "[100..100]"+ "'", str14.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);

  }

  @Test
  public void test114() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test114"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long6.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));

  }

  @Test
  public void test115() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test115"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    java.lang.String str49 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long11.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[100..100]"+ "'", str49.equals("[100..100]"));
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test116() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test116"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long7.isBefore((java.lang.Long)0L);
    java.lang.String str21 = range_long7.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[100..100]"+ "'", str21.equals("[100..100]"));

  }

  @Test
  public void test117() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test117"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    java.lang.Long long47 = range_long45.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long50.isAfterRange(range_long54);
    java.lang.Long long57 = range_long50.getMaximum();
    java.lang.Long long58 = range_long50.getMaximum();
    boolean b60 = range_long50.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long61 = range_long45.intersectionWith(range_long50);
    boolean b63 = range_long61.equals((java.lang.Object)(short)100);
    boolean b64 = range_long18.isOverlappedBy(range_long61);
    java.lang.Long long65 = range_long18.getMaximum();
    int i67 = range_long18.elementCompareTo((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i67 == (-1));

  }

  @Test
  public void test118() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test118"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isBefore((java.lang.Long)(-1L));
    java.lang.Long long13 = range_long2.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));

  }

  @Test
  public void test119() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test119"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    java.lang.String str49 = range_long11.toString();
    boolean b50 = range_long11.isNaturalOrdering();
    boolean b52 = range_long11.isAfter((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long55.isAfterRange(range_long59);
    boolean b63 = range_long59.contains((java.lang.Long)0L);
    boolean b65 = range_long59.contains((java.lang.Long)1L);
    java.lang.String str67 = range_long59.toString("");
    int i69 = range_long59.elementCompareTo((java.lang.Long)0L);
    java.lang.Long long70 = range_long59.getMinimum();
    java.lang.String str71 = range_long59.toString();
    java.util.Comparator<java.lang.Object> comparator_obj72 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj73 = Range.between((java.lang.Object)range_long11, (java.lang.Object)range_long59, comparator_obj72);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[100..100]"+ "'", str49.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str67 + "' != '" + ""+ "'", str67.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i69 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[100..100]"+ "'", str71.equals("[100..100]"));

  }

  @Test
  public void test120() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test120"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)1L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)0L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    boolean b17 = range_long8.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b30 = range_long24.contains((java.lang.Long)1L);
    java.lang.String str32 = range_long24.toString("");
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.util.Comparator<java.lang.Long> comparator_long37 = range_long36.getComparator();
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)(-1L), comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long40 = null;
    Range<java.lang.Long> range_long41 = Range.is((java.lang.Long)100L, comparator_long40);
    java.lang.Long long42 = range_long41.getMaximum();
    boolean b43 = range_long38.isOverlappedBy(range_long41);
    boolean b44 = range_long24.isOverlappedBy(range_long41);
    boolean b46 = range_long24.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long47 = range_long24.getMaximum();
    boolean b48 = range_long8.isOverlappedBy(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.lang.Long long52 = range_long51.getMaximum();
    java.lang.Long long53 = range_long51.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    java.lang.Long long63 = range_long56.getMaximum();
    java.lang.Long long64 = range_long56.getMaximum();
    boolean b66 = range_long56.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long67 = range_long51.intersectionWith(range_long56);
    boolean b69 = range_long67.equals((java.lang.Object)(short)100);
    boolean b70 = range_long24.isOverlappedBy(range_long67);
    java.lang.Long long71 = range_long24.getMaximum();
    boolean b72 = range_long5.equals((java.lang.Object)range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str32 + "' != '" + ""+ "'", str32.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    org.junit.Assert.assertTrue("'" + comparator_long37 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long37.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L+ "'", long42.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L+ "'", long53.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L+ "'", long63.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L+ "'", long71.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);

  }

  @Test
  public void test121() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test121"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    Range<java.lang.Long> range_long22 = range_long17.intersectionWith(range_long20);
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)1L, comparator_long24);
    boolean b27 = range_long25.isAfter((java.lang.Long)10L);
    boolean b28 = range_long20.containsRange(range_long25);
    Range<java.lang.Long> range_long29 = range_long6.intersectionWith(range_long20);
    boolean b31 = range_long6.isStartedBy((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test122() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test122"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b10 = range_long5.contains((java.lang.Long)0L);
    boolean b12 = range_long5.isBefore((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test123() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test123"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    boolean b33 = range_long31.isNaturalOrdering();
    boolean b35 = range_long31.equals((java.lang.Object)(byte)1);
    java.lang.String str36 = range_long31.toString();
    java.util.Comparator<java.lang.Long> comparator_long38 = null;
    Range<java.lang.Long> range_long39 = Range.is((java.lang.Long)100L, comparator_long38);
    java.util.Comparator<java.lang.Long> comparator_long40 = range_long39.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.lang.Long long44 = range_long43.getMaximum();
    boolean b45 = range_long39.isAfterRange(range_long43);
    boolean b47 = range_long43.contains((java.lang.Long)0L);
    boolean b49 = range_long43.contains((java.lang.Long)1L);
    java.lang.String str51 = range_long43.toString("");
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)(-1L), comparator_long56);
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long57.isOverlappedBy(range_long60);
    boolean b63 = range_long43.isOverlappedBy(range_long60);
    boolean b65 = range_long43.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long66 = range_long43.getMaximum();
    boolean b67 = range_long31.containsRange(range_long43);
    boolean b69 = range_long43.isAfter((java.lang.Long)1L);
    boolean b71 = range_long43.contains((java.lang.Long)0L);
    Range<java.lang.Long> range_long72 = range_long22.intersectionWith(range_long43);
    java.lang.Long long73 = range_long72.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[100..100]"+ "'", str36.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    org.junit.Assert.assertTrue("'" + comparator_long40 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long40.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L+ "'", long44.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L+ "'", long66.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));

  }

  @Test
  public void test124() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test124"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long5.isOverlappedBy(range_long8);
    boolean b12 = range_long8.isBefore((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test125() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test125"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isBefore((java.lang.Long)10L);
    java.lang.String str25 = range_long16.toString();
    boolean b27 = range_long16.isEndedBy((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + "[100..100]"+ "'", str25.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);

  }

  @Test
  public void test126() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test126"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long3.getComparator();
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)0L, comparator_long11);
    boolean b14 = range_long12.contains((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);

  }

  @Test
  public void test127() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test127"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    boolean b48 = range_long46.isNaturalOrdering();
    boolean b50 = range_long46.equals((java.lang.Object)(byte)1);
    java.lang.String str51 = range_long46.toString();
    boolean b52 = range_long17.isOverlappedBy(range_long46);
    Range<java.lang.Long> range_long53 = range_long2.intersectionWith(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)1L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    boolean b58 = range_long56.isNaturalOrdering();
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long59 = range_long17.intersectionWith(range_long56);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[100..100]"+ "'", str51.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);

  }

  @Test
  public void test128() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test128"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.lang.Long long22 = range_long21.getMaximum();
    java.lang.Long long23 = range_long21.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.lang.Long long33 = range_long26.getMaximum();
    java.lang.Long long34 = range_long26.getMaximum();
    boolean b36 = range_long26.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long37 = range_long21.intersectionWith(range_long26);
    boolean b39 = range_long37.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long42.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.lang.Long long47 = range_long46.getMaximum();
    boolean b48 = range_long42.isAfterRange(range_long46);
    boolean b50 = range_long46.contains((java.lang.Long)0L);
    boolean b52 = range_long46.contains((java.lang.Long)1L);
    java.lang.String str54 = range_long46.toString("");
    java.util.Comparator<java.lang.Long> comparator_long57 = null;
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    java.util.Comparator<java.lang.Long> comparator_long59 = range_long58.getComparator();
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)(-1L), comparator_long59);
    java.util.Comparator<java.lang.Long> comparator_long62 = null;
    Range<java.lang.Long> range_long63 = Range.is((java.lang.Long)100L, comparator_long62);
    java.lang.Long long64 = range_long63.getMaximum();
    boolean b65 = range_long60.isOverlappedBy(range_long63);
    boolean b66 = range_long46.isOverlappedBy(range_long63);
    boolean b67 = range_long37.isBeforeRange(range_long63);
    boolean b68 = range_long7.containsRange(range_long37);
    java.util.Comparator<java.lang.Long> comparator_long70 = null;
    Range<java.lang.Long> range_long71 = Range.is((java.lang.Long)100L, comparator_long70);
    java.util.Comparator<java.lang.Long> comparator_long72 = range_long71.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long74 = null;
    Range<java.lang.Long> range_long75 = Range.is((java.lang.Long)100L, comparator_long74);
    java.lang.Long long76 = range_long75.getMaximum();
    boolean b77 = range_long71.isAfterRange(range_long75);
    java.lang.Long long78 = range_long71.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long80 = null;
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)100L, comparator_long80);
    java.util.Comparator<java.lang.Long> comparator_long82 = range_long81.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long84 = null;
    Range<java.lang.Long> range_long85 = Range.is((java.lang.Long)100L, comparator_long84);
    java.lang.Long long86 = range_long85.getMaximum();
    boolean b87 = range_long81.isAfterRange(range_long85);
    boolean b89 = range_long85.contains((java.lang.Long)0L);
    boolean b90 = range_long71.isBeforeRange(range_long85);
    java.util.Comparator<java.lang.Long> comparator_long91 = range_long85.getComparator();
    boolean b93 = range_long85.isBefore((java.lang.Long)10L);
    java.lang.String str94 = range_long85.toString();
    boolean b95 = range_long7.isBeforeRange(range_long85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L+ "'", long22.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L+ "'", long34.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    org.junit.Assert.assertTrue("'" + comparator_long59 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long59.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long71);
    org.junit.Assert.assertTrue("'" + comparator_long72 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long72.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L+ "'", long76.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    org.junit.Assert.assertTrue("'" + comparator_long82 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long82.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L+ "'", long86.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == false);
    org.junit.Assert.assertTrue("'" + comparator_long91 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long91.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str94 + "' != '" + "[100..100]"+ "'", str94.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);

  }

  @Test
  public void test129() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test129"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long29 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long6.getComparator();
    boolean b31 = range_long6.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long6.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long6.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test130() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test130"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    java.lang.Object obj11 = null;
    boolean b12 = range_long2.equals(obj11);
    boolean b14 = range_long2.isAfter((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);

  }

  @Test
  public void test131() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test131"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b10 = range_long5.isEndedBy((java.lang.Long)(-1L));
    java.lang.String str12 = range_long5.toString("[100..100]");
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.lang.Long long20 = range_long19.getMaximum();
    boolean b21 = range_long15.isAfterRange(range_long19);
    boolean b23 = range_long19.contains((java.lang.Long)0L);
    boolean b25 = range_long19.contains((java.lang.Long)1L);
    java.lang.String str27 = range_long19.toString("");
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)(-1L), comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long33.isOverlappedBy(range_long36);
    boolean b39 = range_long19.isOverlappedBy(range_long36);
    boolean b41 = range_long19.isStartedBy((java.lang.Long)(-1L));
    int i43 = range_long19.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.lang.Long long51 = range_long50.getMaximum();
    boolean b52 = range_long46.isAfterRange(range_long50);
    boolean b54 = range_long50.contains((java.lang.Long)0L);
    boolean b56 = range_long50.contains((java.lang.Long)1L);
    java.lang.String str58 = range_long50.toString("");
    java.util.Comparator<java.lang.Long> comparator_long61 = null;
    Range<java.lang.Long> range_long62 = Range.is((java.lang.Long)100L, comparator_long61);
    java.util.Comparator<java.lang.Long> comparator_long63 = range_long62.getComparator();
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)(-1L), comparator_long63);
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.lang.Long long68 = range_long67.getMaximum();
    boolean b69 = range_long64.isOverlappedBy(range_long67);
    boolean b70 = range_long50.isOverlappedBy(range_long67);
    boolean b72 = range_long50.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long73 = range_long50.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long50.getComparator();
    java.lang.Long long75 = range_long50.getMaximum();
    boolean b77 = range_long50.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long78 = range_long19.intersectionWith(range_long50);
    boolean b79 = range_long5.isOverlappedBy(range_long50);
    java.util.Comparator<java.lang.Long> comparator_long80 = range_long5.getComparator();
    boolean b82 = range_long5.isEndedBy((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[100..100]"+ "'", str12.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long62);
    org.junit.Assert.assertTrue("'" + comparator_long63 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long63.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L+ "'", long68.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    org.junit.Assert.assertTrue("'" + comparator_long80 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long80.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);

  }

  @Test
  public void test132() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test132"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    java.lang.Long long13 = range_long11.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long16.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.lang.Long long21 = range_long20.getMaximum();
    boolean b22 = range_long16.isAfterRange(range_long20);
    java.lang.Long long23 = range_long16.getMaximum();
    java.lang.Long long24 = range_long16.getMaximum();
    boolean b26 = range_long16.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long27 = range_long11.intersectionWith(range_long16);
    boolean b29 = range_long27.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long32.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long32.isAfterRange(range_long36);
    boolean b40 = range_long36.contains((java.lang.Long)0L);
    boolean b42 = range_long36.contains((java.lang.Long)1L);
    java.lang.String str44 = range_long36.toString("");
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)(-1L), comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long50.isOverlappedBy(range_long53);
    boolean b56 = range_long36.isOverlappedBy(range_long53);
    boolean b57 = range_long27.isBeforeRange(range_long53);
    boolean b59 = range_long27.isAfter((java.lang.Long)1L);
    boolean b60 = range_long2.isBeforeRange(range_long27);
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.util.Comparator<java.lang.Long> comparator_long65 = range_long64.getComparator();
    Range<java.lang.Long> range_long66 = Range.is((java.lang.Long)(-1L), comparator_long65);
    boolean b68 = range_long66.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long69 = range_long66.getComparator();
    boolean b71 = range_long66.isEndedBy((java.lang.Long)(-1L));
    java.lang.String str73 = range_long66.toString("[100..100]");
    boolean b74 = range_long27.containsRange(range_long66);
    java.util.Comparator<java.lang.Long> comparator_long76 = null;
    Range<java.lang.Long> range_long77 = Range.is((java.lang.Long)100L, comparator_long76);
    java.util.Comparator<java.lang.Long> comparator_long78 = range_long77.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long80 = null;
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)100L, comparator_long80);
    java.lang.Long long82 = range_long81.getMaximum();
    boolean b83 = range_long77.isAfterRange(range_long81);
    boolean b85 = range_long81.contains((java.lang.Long)0L);
    boolean b87 = range_long81.contains((java.lang.Long)1L);
    boolean b89 = range_long81.contains((java.lang.Long)100L);
    java.lang.Long long90 = range_long81.getMinimum();
    boolean b91 = range_long66.containsRange(range_long81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L+ "'", long21.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    org.junit.Assert.assertTrue("'" + comparator_long65 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long65.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    org.junit.Assert.assertTrue("'" + comparator_long69 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long69.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str73 + "' != '" + "[100..100]"+ "'", str73.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long77);
    org.junit.Assert.assertTrue("'" + comparator_long78 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long78.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L+ "'", long82.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long90 + "' != '" + 100L+ "'", long90.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);

  }

  @Test
  public void test133() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test133"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.lang.Long long16 = range_long15.getMaximum();
    boolean b17 = range_long11.isAfterRange(range_long15);
    java.lang.Long long18 = range_long11.getMaximum();
    boolean b19 = range_long6.isAfterRange(range_long11);
    int i21 = range_long6.elementCompareTo((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.util.Comparator<java.lang.Long> comparator_long28 = range_long27.getComparator();
    Range<java.lang.Long> range_long29 = range_long24.intersectionWith(range_long27);
    java.lang.String str31 = range_long27.toString("");
    boolean b32 = range_long6.isBeforeRange(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L+ "'", long16.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i21 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    org.junit.Assert.assertTrue("'" + comparator_long28 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long28.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test134() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test134"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)1L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)(-1L), comparator_long14);
    boolean b17 = range_long15.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long15.getComparator();
    boolean b19 = range_long9.equals((java.lang.Object)range_long15);
    boolean b21 = range_long15.contains((java.lang.Long)1L);
    java.lang.Long long22 = range_long15.getMinimum();
    boolean b23 = range_long2.isAfterRange(range_long15);
    java.lang.Long long24 = range_long2.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L)+ "'", long22.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 1L+ "'", long24.equals(1L));

  }

  @Test
  public void test135() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test135"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isBefore((java.lang.Long)(-1L));
    boolean b14 = range_long2.isStartedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.lang.Long long22 = range_long21.getMaximum();
    boolean b23 = range_long17.isAfterRange(range_long21);
    boolean b25 = range_long21.contains((java.lang.Long)0L);
    boolean b27 = range_long21.contains((java.lang.Long)1L);
    java.lang.String str29 = range_long21.toString("");
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long35.isOverlappedBy(range_long38);
    boolean b41 = range_long21.isOverlappedBy(range_long38);
    Range<java.lang.Long> range_long42 = range_long2.intersectionWith(range_long38);
    java.lang.String str43 = range_long42.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L+ "'", long22.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[100..100]"+ "'", str43.equals("[100..100]"));

  }

  @Test
  public void test136() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test136"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    boolean b13 = range_long2.isAfter((java.lang.Long)(-1L));
    java.lang.Long long14 = range_long2.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));

  }

  @Test
  public void test137() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test137"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    boolean b13 = range_long7.isAfterRange(range_long11);
    java.lang.Long long14 = range_long7.getMaximum();
    java.lang.Long long15 = range_long7.getMaximum();
    boolean b17 = range_long7.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long18 = range_long2.intersectionWith(range_long7);
    boolean b20 = range_long7.equals((java.lang.Object)"");
    java.lang.Long long21 = range_long7.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L+ "'", long21.equals(100L));

  }

  @Test
  public void test138() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test138"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    boolean b53 = range_long18.isAfter((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);

  }

  @Test
  public void test139() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test139"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    boolean b11 = range_long7.contains((java.lang.Long)0L);
    boolean b13 = range_long7.contains((java.lang.Long)1L);
    java.lang.String str15 = range_long7.toString("");
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)(-1L), comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long21.isOverlappedBy(range_long24);
    boolean b27 = range_long7.isOverlappedBy(range_long24);
    boolean b29 = range_long7.isStartedBy((java.lang.Long)(-1L));
    int i31 = range_long7.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long34.isAfterRange(range_long38);
    boolean b42 = range_long38.contains((java.lang.Long)0L);
    boolean b44 = range_long38.contains((java.lang.Long)1L);
    java.lang.String str46 = range_long38.toString("");
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)(-1L), comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.lang.Long long56 = range_long55.getMaximum();
    boolean b57 = range_long52.isOverlappedBy(range_long55);
    boolean b58 = range_long38.isOverlappedBy(range_long55);
    boolean b60 = range_long38.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long61 = range_long38.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long62 = range_long38.getComparator();
    java.lang.Long long63 = range_long38.getMaximum();
    boolean b65 = range_long38.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long66 = range_long7.intersectionWith(range_long38);
    java.util.Comparator<java.lang.Long> comparator_long68 = null;
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)100L, comparator_long68);
    java.util.Comparator<java.lang.Long> comparator_long70 = range_long69.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long72 = null;
    Range<java.lang.Long> range_long73 = Range.is((java.lang.Long)100L, comparator_long72);
    java.lang.Long long74 = range_long73.getMaximum();
    boolean b75 = range_long69.isAfterRange(range_long73);
    java.lang.Long long76 = range_long69.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long78 = null;
    Range<java.lang.Long> range_long79 = Range.is((java.lang.Long)100L, comparator_long78);
    java.util.Comparator<java.lang.Long> comparator_long80 = range_long79.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long82 = null;
    Range<java.lang.Long> range_long83 = Range.is((java.lang.Long)100L, comparator_long82);
    java.lang.Long long84 = range_long83.getMaximum();
    boolean b85 = range_long79.isAfterRange(range_long83);
    boolean b87 = range_long83.contains((java.lang.Long)0L);
    boolean b88 = range_long69.isBeforeRange(range_long83);
    java.util.Comparator<java.lang.Long> comparator_long89 = range_long83.getComparator();
    boolean b90 = range_long66.isOverlappedBy(range_long83);
    java.util.Comparator<java.lang.Object> comparator_obj91 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj92 = Range.between((java.lang.Object)(byte)10, (java.lang.Object)range_long66, comparator_obj91);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str46 + "' != '" + ""+ "'", str46.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long56 + "' != '" + 100L+ "'", long56.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long62 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long62.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L+ "'", long63.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    org.junit.Assert.assertTrue("'" + comparator_long70 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long70.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long73);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long74 + "' != '" + 100L+ "'", long74.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L+ "'", long76.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long79);
    org.junit.Assert.assertTrue("'" + comparator_long80 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long80.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);
    org.junit.Assert.assertTrue("'" + comparator_long89 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long89.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b90 == true);

  }

  @Test
  public void test140() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test140"); }


    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)0L, comparator_long6);
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)(-1L), comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    java.lang.Long long19 = range_long12.getMaximum();
    java.lang.Long long20 = range_long12.getMaximum();
    boolean b22 = range_long12.isStartedBy((java.lang.Long)10L);
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Long> range_long23 = range_long9.intersectionWith(range_long12);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);

  }

  @Test
  public void test141() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test141"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b9 = range_long5.isNaturalOrdering();
    java.lang.Long long10 = range_long5.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    boolean b44 = range_long5.isBeforeRange(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.util.Comparator<java.lang.Long> comparator_long48 = range_long47.getComparator();
    boolean b49 = range_long47.isNaturalOrdering();
    boolean b51 = range_long47.equals((java.lang.Object)(byte)1);
    boolean b53 = range_long47.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long54 = range_long47.getComparator();
    boolean b56 = range_long47.isEndedBy((java.lang.Long)0L);
    boolean b58 = range_long47.contains((java.lang.Long)0L);
    java.lang.String str59 = range_long47.toString();
    boolean b60 = range_long17.isBeforeRange(range_long47);
    boolean b62 = range_long17.contains((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    org.junit.Assert.assertTrue("'" + comparator_long48 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long48.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + comparator_long54 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long54.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[100..100]"+ "'", str59.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test142() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test142"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str8 = range_long2.toString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + ""+ "'", str8.equals(""));

  }

  @Test
  public void test143() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test143"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    int i13 = range_long2.elementCompareTo((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i13 == (-1));

  }

  @Test
  public void test144() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test144"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    boolean b48 = range_long46.isNaturalOrdering();
    boolean b50 = range_long46.equals((java.lang.Object)(byte)1);
    java.lang.String str51 = range_long46.toString();
    boolean b52 = range_long17.isOverlappedBy(range_long46);
    Range<java.lang.Long> range_long53 = range_long2.intersectionWith(range_long17);
    boolean b55 = range_long17.isEndedBy((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[100..100]"+ "'", str51.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);

  }

  @Test
  public void test145() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test145"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long5.isOverlappedBy(range_long8);
    boolean b12 = range_long8.isAfter((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);

  }

  @Test
  public void test146() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test146"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    java.lang.Long long10 = range_long8.getMinimum();
    Range<java.lang.Long> range_long11 = range_long2.intersectionWith(range_long8);
    boolean b12 = range_long11.isNaturalOrdering();
    java.lang.Long long13 = range_long11.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));

  }

  @Test
  public void test147() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test147"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    int i4 = range_long2.elementCompareTo((java.lang.Long)100L);
    boolean b6 = range_long2.contains((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);

  }

  @Test
  public void test148() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test148"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    boolean b12 = range_long3.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.lang.Long long20 = range_long19.getMaximum();
    boolean b21 = range_long15.isAfterRange(range_long19);
    boolean b23 = range_long19.contains((java.lang.Long)0L);
    boolean b25 = range_long19.contains((java.lang.Long)1L);
    java.lang.String str27 = range_long19.toString("");
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)(-1L), comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long33.isOverlappedBy(range_long36);
    boolean b39 = range_long19.isOverlappedBy(range_long36);
    boolean b41 = range_long19.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long42 = range_long19.getMaximum();
    boolean b43 = range_long3.isOverlappedBy(range_long19);
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.util.Comparator<java.lang.Long> comparator_long48 = range_long47.getComparator();
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    boolean b51 = range_long49.isEndedBy((java.lang.Long)0L);
    boolean b52 = range_long19.isAfterRange(range_long49);
    boolean b54 = range_long49.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long49.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)10L, comparator_long55);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L+ "'", long42.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    org.junit.Assert.assertTrue("'" + comparator_long48 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long48.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);

  }

  @Test
  public void test149() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test149"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)1L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long7.getComparator();
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)(-1L), comparator_long14);
    boolean b17 = range_long15.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long15.getComparator();
    boolean b19 = range_long9.equals((java.lang.Object)range_long15);
    boolean b21 = range_long15.contains((java.lang.Long)1L);
    java.lang.Long long22 = range_long15.getMinimum();
    boolean b23 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    boolean b34 = range_long26.isEndedBy((java.lang.Long)(-1L));
    boolean b36 = range_long26.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long38 = null;
    Range<java.lang.Long> range_long39 = Range.is((java.lang.Long)100L, comparator_long38);
    java.util.Comparator<java.lang.Long> comparator_long40 = range_long39.getComparator();
    boolean b41 = range_long39.isNaturalOrdering();
    boolean b43 = range_long39.equals((java.lang.Object)(byte)1);
    java.lang.String str44 = range_long39.toString();
    boolean b45 = range_long26.isAfterRange(range_long39);
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.lang.Long long53 = range_long52.getMaximum();
    boolean b54 = range_long48.isAfterRange(range_long52);
    boolean b56 = range_long52.contains((java.lang.Long)0L);
    boolean b58 = range_long52.contains((java.lang.Long)1L);
    java.lang.String str60 = range_long52.toString("");
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.util.Comparator<java.lang.Long> comparator_long65 = range_long64.getComparator();
    Range<java.lang.Long> range_long66 = Range.is((java.lang.Long)(-1L), comparator_long65);
    java.util.Comparator<java.lang.Long> comparator_long68 = null;
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)100L, comparator_long68);
    java.lang.Long long70 = range_long69.getMaximum();
    boolean b71 = range_long66.isOverlappedBy(range_long69);
    boolean b72 = range_long52.isOverlappedBy(range_long69);
    boolean b74 = range_long52.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long75 = range_long52.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long76 = range_long52.getComparator();
    boolean b77 = range_long26.isBeforeRange(range_long52);
    boolean b78 = range_long15.isAfterRange(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + (-1L)+ "'", long22.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    org.junit.Assert.assertTrue("'" + comparator_long40 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long40.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + "[100..100]"+ "'", str44.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long53 + "' != '" + 100L+ "'", long53.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str60 + "' != '" + ""+ "'", str60.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    org.junit.Assert.assertTrue("'" + comparator_long65 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long65.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long66);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long76 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long76.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test150() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test150"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    Range<java.lang.Long> range_long31 = null;
    boolean b32 = range_long6.isOverlappedBy(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test151() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test151"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    boolean b40 = range_long14.isAfter((java.lang.Long)1L);
    boolean b42 = range_long14.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long14.getComparator();
    java.lang.String str45 = range_long14.toString("");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));

  }

  @Test
  public void test152() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test152"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    boolean b13 = range_long2.isEndedBy((java.lang.Long)0L);
    boolean b15 = range_long2.contains((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test153() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test153"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    java.lang.String str39 = range_long14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[100..100]"+ "'", str39.equals("[100..100]"));

  }

  @Test
  public void test154() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test154"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)1L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)0L, comparator_long4);
    int i7 = range_long5.elementCompareTo((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i7 == 1);

  }

  @Test
  public void test155() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test155"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    java.lang.Long long39 = range_long2.getMaximum();
    boolean b40 = range_long2.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);

  }

  @Test
  public void test156() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test156"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b10 = range_long5.isEndedBy((java.lang.Long)(-1L));
    java.lang.String str12 = range_long5.toString("[100..100]");
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.lang.Long long20 = range_long19.getMaximum();
    boolean b21 = range_long15.isAfterRange(range_long19);
    boolean b23 = range_long19.contains((java.lang.Long)0L);
    boolean b25 = range_long19.contains((java.lang.Long)1L);
    java.lang.String str27 = range_long19.toString("");
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)(-1L), comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long33.isOverlappedBy(range_long36);
    boolean b39 = range_long19.isOverlappedBy(range_long36);
    boolean b41 = range_long19.isStartedBy((java.lang.Long)(-1L));
    int i43 = range_long19.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.lang.Long long51 = range_long50.getMaximum();
    boolean b52 = range_long46.isAfterRange(range_long50);
    boolean b54 = range_long50.contains((java.lang.Long)0L);
    boolean b56 = range_long50.contains((java.lang.Long)1L);
    java.lang.String str58 = range_long50.toString("");
    java.util.Comparator<java.lang.Long> comparator_long61 = null;
    Range<java.lang.Long> range_long62 = Range.is((java.lang.Long)100L, comparator_long61);
    java.util.Comparator<java.lang.Long> comparator_long63 = range_long62.getComparator();
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)(-1L), comparator_long63);
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.lang.Long long68 = range_long67.getMaximum();
    boolean b69 = range_long64.isOverlappedBy(range_long67);
    boolean b70 = range_long50.isOverlappedBy(range_long67);
    boolean b72 = range_long50.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long73 = range_long50.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long50.getComparator();
    java.lang.Long long75 = range_long50.getMaximum();
    boolean b77 = range_long50.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long78 = range_long19.intersectionWith(range_long50);
    boolean b79 = range_long5.isOverlappedBy(range_long50);
    java.lang.Long long80 = range_long50.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[100..100]"+ "'", str12.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str27 + "' != '" + ""+ "'", str27.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i43 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str58 + "' != '" + ""+ "'", str58.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long62);
    org.junit.Assert.assertTrue("'" + comparator_long63 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long63.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L+ "'", long68.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long80 + "' != '" + 100L+ "'", long80.equals(100L));

  }

  @Test
  public void test157() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test157"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)0L, comparator_long5);
    boolean b9 = range_long7.isBefore((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);

  }

  @Test
  public void test158() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test158"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b29 = range_long10.isBeforeRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long24.getComparator();
    boolean b31 = range_long7.isAfterRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    boolean b36 = range_long34.isNaturalOrdering();
    boolean b38 = range_long34.equals((java.lang.Object)(byte)1);
    boolean b40 = range_long34.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long34.getComparator();
    boolean b43 = range_long34.isEndedBy((java.lang.Long)0L);
    boolean b44 = range_long7.isAfterRange(range_long34);
    boolean b45 = range_long7.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    boolean b51 = range_long48.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long57 = null;
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    java.lang.Long long59 = range_long58.getMaximum();
    boolean b60 = range_long54.isAfterRange(range_long58);
    boolean b62 = range_long54.isEndedBy((java.lang.Long)(-1L));
    boolean b64 = range_long54.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long65 = range_long48.intersectionWith(range_long54);
    boolean b66 = range_long7.isAfterRange(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long59 + "' != '" + 100L+ "'", long59.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test159() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test159"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isStartedBy((java.lang.Long)1L);
    java.lang.Long long25 = range_long16.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));

  }

  @Test
  public void test160() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test160"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    boolean b23 = range_long15.contains((java.lang.Long)(-1L));
    boolean b25 = range_long15.isAfter((java.lang.Long)(-1L));
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long29 = range_long28.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.lang.Long long33 = range_long32.getMaximum();
    boolean b34 = range_long28.isAfterRange(range_long32);
    java.lang.Long long35 = range_long28.getMaximum();
    boolean b37 = range_long28.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long43 = null;
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)100L, comparator_long43);
    java.lang.Long long45 = range_long44.getMaximum();
    boolean b46 = range_long40.isAfterRange(range_long44);
    boolean b48 = range_long40.isEndedBy((java.lang.Long)(-1L));
    boolean b50 = range_long40.isEndedBy((java.lang.Long)1L);
    boolean b51 = range_long28.containsRange(range_long40);
    boolean b52 = range_long15.isBeforeRange(range_long28);
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long55.isAfterRange(range_long59);
    java.lang.Long long62 = range_long55.getMaximum();
    java.util.Comparator<java.lang.Object> comparator_obj63 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj64 = Range.between((java.lang.Object)b52, (java.lang.Object)range_long55, comparator_obj63);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    org.junit.Assert.assertTrue("'" + comparator_long29 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long29.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L+ "'", long45.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));

  }

  @Test
  public void test161() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test161"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    boolean b17 = range_long11.isEndedBy((java.lang.Long)(-1L));
    int i19 = range_long11.elementCompareTo((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i19 == 1);

  }

  @Test
  public void test162() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test162"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    int i66 = range_long6.elementCompareTo((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i66 == (-1));

  }

  @Test
  public void test163() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test163"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    boolean b13 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long2.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test164() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test164"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    boolean b23 = range_long15.contains((java.lang.Long)(-1L));
    boolean b25 = range_long15.isAfter((java.lang.Long)(-1L));
    java.lang.Long long26 = range_long15.getMinimum();
    java.lang.Long long27 = range_long15.getMinimum();
    java.lang.Long long28 = range_long15.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L+ "'", long26.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L+ "'", long28.equals(100L));

  }

  @Test
  public void test165() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test165"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    java.lang.Long long65 = range_long33.getMinimum();
    java.lang.String str66 = range_long33.toString();
    java.util.Comparator<java.lang.Long> comparator_long69 = null;
    Range<java.lang.Long> range_long70 = Range.is((java.lang.Long)100L, comparator_long69);
    java.util.Comparator<java.lang.Long> comparator_long71 = range_long70.getComparator();
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)(-1L), comparator_long71);
    java.util.Comparator<java.lang.Long> comparator_long74 = null;
    Range<java.lang.Long> range_long75 = Range.is((java.lang.Long)100L, comparator_long74);
    java.lang.Long long76 = range_long75.getMaximum();
    boolean b77 = range_long72.isOverlappedBy(range_long75);
    boolean b78 = range_long33.isOverlappedBy(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "[100..100]"+ "'", str66.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long70);
    org.junit.Assert.assertTrue("'" + comparator_long71 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long71.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L+ "'", long76.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == false);

  }

  @Test
  public void test166() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test166"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long5.isOverlappedBy(range_long8);
    boolean b12 = range_long5.isAfter((java.lang.Long)0L);
    int i14 = range_long5.elementCompareTo((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i14 == 1);

  }

  @Test
  public void test167() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test167"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    java.lang.Long long9 = range_long5.getMaximum();
    java.lang.Long long10 = range_long5.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + (-1L)+ "'", long9.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));

  }

  @Test
  public void test168() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test168"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    boolean b21 = range_long8.isStartedBy((java.lang.Long)0L);
    boolean b23 = range_long8.isStartedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);

  }

  @Test
  public void test169() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test169"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    java.lang.Long long14 = range_long12.getMinimum();
    boolean b15 = range_long12.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    java.lang.Long long20 = range_long18.getMinimum();
    Range<java.lang.Long> range_long21 = range_long12.intersectionWith(range_long18);
    boolean b22 = range_long21.isNaturalOrdering();
    boolean b23 = range_long2.isOverlappedBy(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long14 + "' != '" + 100L+ "'", long14.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long20 + "' != '" + 100L+ "'", long20.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == true);

  }

  @Test
  public void test170() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test170"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long3.getComparator();
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)0L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 0L+ "'", long13.equals(0L));

  }

  @Test
  public void test171() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test171"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long31.isAfterRange(range_long35);
    java.lang.Long long38 = range_long31.getMaximum();
    boolean b40 = range_long31.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.util.Comparator<java.lang.Long> comparator_long44 = range_long43.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.lang.Long long48 = range_long47.getMaximum();
    boolean b49 = range_long43.isAfterRange(range_long47);
    boolean b51 = range_long47.contains((java.lang.Long)0L);
    boolean b53 = range_long47.contains((java.lang.Long)1L);
    java.lang.String str55 = range_long47.toString("");
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.util.Comparator<java.lang.Long> comparator_long60 = range_long59.getComparator();
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)(-1L), comparator_long60);
    java.util.Comparator<java.lang.Long> comparator_long63 = null;
    Range<java.lang.Long> range_long64 = Range.is((java.lang.Long)100L, comparator_long63);
    java.lang.Long long65 = range_long64.getMaximum();
    boolean b66 = range_long61.isOverlappedBy(range_long64);
    boolean b67 = range_long47.isOverlappedBy(range_long64);
    boolean b69 = range_long47.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long70 = range_long47.getMaximum();
    boolean b71 = range_long31.isOverlappedBy(range_long47);
    java.util.Comparator<java.lang.Long> comparator_long73 = null;
    Range<java.lang.Long> range_long74 = Range.is((java.lang.Long)100L, comparator_long73);
    java.lang.Long long75 = range_long74.getMaximum();
    java.lang.Long long76 = range_long74.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long78 = null;
    Range<java.lang.Long> range_long79 = Range.is((java.lang.Long)100L, comparator_long78);
    java.util.Comparator<java.lang.Long> comparator_long80 = range_long79.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long82 = null;
    Range<java.lang.Long> range_long83 = Range.is((java.lang.Long)100L, comparator_long82);
    java.lang.Long long84 = range_long83.getMaximum();
    boolean b85 = range_long79.isAfterRange(range_long83);
    java.lang.Long long86 = range_long79.getMaximum();
    java.lang.Long long87 = range_long79.getMaximum();
    boolean b89 = range_long79.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long90 = range_long74.intersectionWith(range_long79);
    boolean b92 = range_long90.equals((java.lang.Object)(short)100);
    boolean b93 = range_long47.isOverlappedBy(range_long90);
    boolean b95 = range_long90.isEndedBy((java.lang.Long)100L);
    boolean b97 = range_long90.equals((java.lang.Object)(-1L));
    java.util.Comparator<java.lang.Object> comparator_obj98 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj99 = Range.between((java.lang.Object)range_long22, (java.lang.Object)b97, comparator_obj98);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    org.junit.Assert.assertTrue("'" + comparator_long44 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long44.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long48 + "' != '" + 100L+ "'", long48.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + ""+ "'", str55.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    org.junit.Assert.assertTrue("'" + comparator_long60 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long60.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long76 + "' != '" + 100L+ "'", long76.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long79);
    org.junit.Assert.assertTrue("'" + comparator_long80 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long80.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long83);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long86 + "' != '" + 100L+ "'", long86.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long87 + "' != '" + 100L+ "'", long87.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long90);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b93 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b97 == false);

  }

  @Test
  public void test172() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test172"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    boolean b48 = range_long46.isNaturalOrdering();
    boolean b50 = range_long46.equals((java.lang.Object)(byte)1);
    java.lang.String str51 = range_long46.toString();
    boolean b52 = range_long17.isOverlappedBy(range_long46);
    Range<java.lang.Long> range_long53 = range_long2.intersectionWith(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long54 = range_long2.getComparator();
    boolean b56 = range_long2.isEndedBy((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + "[100..100]"+ "'", str51.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    org.junit.Assert.assertTrue("'" + comparator_long54 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long54.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);

  }

  @Test
  public void test173() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test173"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.util.Comparator<java.lang.Long> comparator_long26 = range_long25.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.lang.Long long30 = range_long29.getMaximum();
    boolean b31 = range_long25.isAfterRange(range_long29);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    boolean b36 = range_long34.isNaturalOrdering();
    boolean b38 = range_long34.equals((java.lang.Object)(byte)1);
    java.lang.String str39 = range_long34.toString();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long42.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.lang.Long long47 = range_long46.getMaximum();
    boolean b48 = range_long42.isAfterRange(range_long46);
    boolean b50 = range_long46.contains((java.lang.Long)0L);
    boolean b52 = range_long46.contains((java.lang.Long)1L);
    java.lang.String str54 = range_long46.toString("");
    java.util.Comparator<java.lang.Long> comparator_long57 = null;
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    java.util.Comparator<java.lang.Long> comparator_long59 = range_long58.getComparator();
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)(-1L), comparator_long59);
    java.util.Comparator<java.lang.Long> comparator_long62 = null;
    Range<java.lang.Long> range_long63 = Range.is((java.lang.Long)100L, comparator_long62);
    java.lang.Long long64 = range_long63.getMaximum();
    boolean b65 = range_long60.isOverlappedBy(range_long63);
    boolean b66 = range_long46.isOverlappedBy(range_long63);
    boolean b68 = range_long46.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long69 = range_long46.getMaximum();
    boolean b70 = range_long34.containsRange(range_long46);
    boolean b71 = range_long29.isAfterRange(range_long34);
    java.lang.String str72 = range_long34.toString();
    boolean b74 = range_long34.isAfter((java.lang.Long)0L);
    boolean b75 = range_long16.containsRange(range_long34);
    java.lang.String str76 = range_long16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    org.junit.Assert.assertTrue("'" + comparator_long26 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long26.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str39 + "' != '" + "[100..100]"+ "'", str39.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str54 + "' != '" + ""+ "'", str54.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    org.junit.Assert.assertTrue("'" + comparator_long59 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long59.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L+ "'", long69.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[100..100]"+ "'", str72.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[100..100]"+ "'", str76.equals("[100..100]"));

  }

  @Test
  public void test174() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test174"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.lang.String str8 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)(-1L), comparator_long13);
    boolean b16 = range_long14.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long14.getComparator();
    boolean b18 = range_long14.isNaturalOrdering();
    java.lang.Long long19 = range_long14.getMaximum();
    boolean b21 = range_long14.isStartedBy((java.lang.Long)10L);
    boolean b22 = range_long2.isBeforeRange(range_long14);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b35 = range_long28.isAfter((java.lang.Long)0L);
    boolean b37 = range_long28.isStartedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long43 = null;
    Range<java.lang.Long> range_long44 = Range.is((java.lang.Long)100L, comparator_long43);
    java.lang.Long long45 = range_long44.getMaximum();
    boolean b46 = range_long40.isAfterRange(range_long44);
    boolean b48 = range_long44.contains((java.lang.Long)0L);
    boolean b50 = range_long44.contains((java.lang.Long)1L);
    boolean b52 = range_long44.isAfter((java.lang.Long)0L);
    boolean b53 = range_long44.isNaturalOrdering();
    boolean b55 = range_long44.contains((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long57 = null;
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    java.util.Comparator<java.lang.Long> comparator_long60 = null;
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)100L, comparator_long60);
    java.util.Comparator<java.lang.Long> comparator_long62 = range_long61.getComparator();
    Range<java.lang.Long> range_long63 = range_long58.intersectionWith(range_long61);
    boolean b64 = range_long44.isAfterRange(range_long61);
    boolean b65 = range_long28.containsRange(range_long44);
    boolean b66 = range_long2.isOverlappedBy(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100..100]"+ "'", str8.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L)+ "'", long19.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long45 + "' != '" + 100L+ "'", long45.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    org.junit.Assert.assertTrue("'" + comparator_long62 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long62.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);

  }

  @Test
  public void test175() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test175"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)1L, comparator_long9);
    boolean b12 = range_long10.isAfter((java.lang.Long)10L);
    boolean b13 = range_long5.containsRange(range_long10);
    boolean b15 = range_long5.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test176() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test176"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    boolean b53 = range_long18.isStartedBy((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);

  }

  @Test
  public void test177() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test177"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long4.isAfterRange(range_long8);
    java.lang.Long long11 = range_long4.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long4.getComparator();
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)10L, comparator_long12);
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)0L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    boolean b20 = range_long17.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long23.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long26 = null;
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.lang.Long long28 = range_long27.getMaximum();
    boolean b29 = range_long23.isAfterRange(range_long27);
    boolean b31 = range_long23.isEndedBy((java.lang.Long)(-1L));
    boolean b33 = range_long23.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long34 = range_long17.intersectionWith(range_long23);
    boolean b35 = range_long14.isAfterRange(range_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long34.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long11 + "' != '" + 100L+ "'", long11.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long28 + "' != '" + 100L+ "'", long28.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test178() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test178"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isBefore((java.lang.Long)(-1L));
    boolean b14 = range_long2.isStartedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.lang.Long long22 = range_long21.getMaximum();
    boolean b23 = range_long17.isAfterRange(range_long21);
    boolean b25 = range_long21.contains((java.lang.Long)0L);
    boolean b27 = range_long21.contains((java.lang.Long)1L);
    java.lang.String str29 = range_long21.toString("");
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long35.isOverlappedBy(range_long38);
    boolean b41 = range_long21.isOverlappedBy(range_long38);
    Range<java.lang.Long> range_long42 = range_long2.intersectionWith(range_long38);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long45.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.lang.Long long50 = range_long49.getMaximum();
    boolean b51 = range_long45.isAfterRange(range_long49);
    boolean b53 = range_long49.contains((java.lang.Long)0L);
    boolean b55 = range_long49.contains((java.lang.Long)1L);
    boolean b57 = range_long49.isAfter((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.util.Comparator<java.lang.Long> comparator_long62 = null;
    Range<java.lang.Long> range_long63 = Range.is((java.lang.Long)100L, comparator_long62);
    java.util.Comparator<java.lang.Long> comparator_long64 = range_long63.getComparator();
    Range<java.lang.Long> range_long65 = range_long60.intersectionWith(range_long63);
    java.util.Comparator<java.lang.Long> comparator_long67 = null;
    Range<java.lang.Long> range_long68 = Range.is((java.lang.Long)1L, comparator_long67);
    boolean b70 = range_long68.isAfter((java.lang.Long)10L);
    boolean b71 = range_long63.containsRange(range_long68);
    Range<java.lang.Long> range_long72 = range_long49.intersectionWith(range_long63);
    java.util.Comparator<java.lang.Object> comparator_obj73 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj74 = Range.between((java.lang.Object)range_long38, (java.lang.Object)range_long49, comparator_obj73);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L+ "'", long22.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long50 + "' != '" + 100L+ "'", long50.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    org.junit.Assert.assertTrue("'" + comparator_long64 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long64.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);

  }

  @Test
  public void test179() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test179"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    boolean b13 = range_long2.isAfter((java.lang.Long)(-1L));
    boolean b15 = range_long2.isAfter((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);

  }

  @Test
  public void test180() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test180"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    java.lang.Long long15 = range_long6.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    java.lang.Long long25 = range_long18.getMaximum();
    boolean b27 = range_long18.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long30.isAfterRange(range_long34);
    boolean b38 = range_long34.contains((java.lang.Long)0L);
    boolean b40 = range_long34.contains((java.lang.Long)1L);
    java.lang.String str42 = range_long34.toString("");
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)(-1L), comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.lang.Long long52 = range_long51.getMaximum();
    boolean b53 = range_long48.isOverlappedBy(range_long51);
    boolean b54 = range_long34.isOverlappedBy(range_long51);
    boolean b56 = range_long34.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long57 = range_long34.getMaximum();
    boolean b58 = range_long18.isOverlappedBy(range_long34);
    boolean b59 = range_long6.isOverlappedBy(range_long34);
    boolean b60 = range_long34.isNaturalOrdering();
    java.lang.String str62 = range_long34.toString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str42 + "' != '" + ""+ "'", str42.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str62 + "' != '" + "hi!"+ "'", str62.equals("hi!"));

  }

  @Test
  public void test181() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test181"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    boolean b40 = range_long14.isAfter((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long45.getComparator();
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)0L, comparator_long46);
    boolean b50 = range_long48.contains((java.lang.Long)10L);
    boolean b52 = range_long48.isEndedBy((java.lang.Long)(-1L));
    boolean b53 = range_long14.equals((java.lang.Object)range_long48);
    boolean b55 = range_long14.contains((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test182() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test182"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);

  }

  @Test
  public void test183() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test183"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b22 = range_long3.isBeforeRange(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long17.getComparator();
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.lang.Long long26 = range_long25.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L+ "'", long26.equals(100L));

  }

  @Test
  public void test184() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test184"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.lang.Long long4 = range_long3.getMaximum();
    java.lang.Long long5 = range_long3.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.lang.Long long16 = range_long8.getMaximum();
    boolean b18 = range_long8.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long19 = range_long3.intersectionWith(range_long8);
    boolean b21 = range_long19.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b49 = range_long19.isBeforeRange(range_long45);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long45.getComparator();
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long5 + "' != '" + 100L+ "'", long5.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long16 + "' != '" + 100L+ "'", long16.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);

  }

  @Test
  public void test185() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test185"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b9 = range_long5.isNaturalOrdering();
    java.lang.Long long10 = range_long5.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b23 = range_long17.contains((java.lang.Long)1L);
    java.lang.String str25 = range_long17.toString("");
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)(-1L), comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long31.isOverlappedBy(range_long34);
    boolean b37 = range_long17.isOverlappedBy(range_long34);
    boolean b39 = range_long17.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long40 = range_long17.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long17.getComparator();
    boolean b42 = range_long17.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long43 = range_long17.getComparator();
    boolean b44 = range_long5.isBeforeRange(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.util.Comparator<java.lang.Long> comparator_long48 = range_long47.getComparator();
    boolean b49 = range_long47.isNaturalOrdering();
    boolean b51 = range_long47.equals((java.lang.Object)(byte)1);
    boolean b53 = range_long47.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long54 = range_long47.getComparator();
    boolean b56 = range_long47.isEndedBy((java.lang.Long)0L);
    boolean b58 = range_long47.contains((java.lang.Long)0L);
    java.lang.String str59 = range_long47.toString();
    boolean b60 = range_long17.isBeforeRange(range_long47);
    java.util.Comparator<java.lang.Long> comparator_long62 = null;
    Range<java.lang.Long> range_long63 = Range.is((java.lang.Long)100L, comparator_long62);
    java.util.Comparator<java.lang.Long> comparator_long64 = range_long63.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long66 = null;
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)100L, comparator_long66);
    java.lang.Long long68 = range_long67.getMaximum();
    boolean b69 = range_long63.isAfterRange(range_long67);
    java.lang.Long long70 = range_long63.getMaximum();
    boolean b72 = range_long63.contains((java.lang.Long)0L);
    boolean b74 = range_long63.isEndedBy((java.lang.Long)1L);
    int i76 = range_long63.elementCompareTo((java.lang.Long)(-1L));
    boolean b77 = range_long47.isOverlappedBy(range_long63);
    java.util.Comparator<java.lang.Long> comparator_long79 = null;
    Range<java.lang.Long> range_long80 = Range.is((java.lang.Long)100L, comparator_long79);
    java.lang.Long long81 = range_long80.getMaximum();
    java.lang.Long long82 = range_long80.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long84 = null;
    Range<java.lang.Long> range_long85 = Range.is((java.lang.Long)100L, comparator_long84);
    java.util.Comparator<java.lang.Long> comparator_long86 = range_long85.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long88 = null;
    Range<java.lang.Long> range_long89 = Range.is((java.lang.Long)100L, comparator_long88);
    java.lang.Long long90 = range_long89.getMaximum();
    boolean b91 = range_long85.isAfterRange(range_long89);
    java.lang.Long long92 = range_long85.getMaximum();
    java.lang.Long long93 = range_long85.getMaximum();
    boolean b95 = range_long85.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long96 = range_long80.intersectionWith(range_long85);
    boolean b98 = range_long85.contains((java.lang.Long)0L);
    boolean b99 = range_long63.isAfterRange(range_long85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + (-1L)+ "'", long10.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str25 + "' != '" + ""+ "'", str25.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    org.junit.Assert.assertTrue("'" + comparator_long43 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long43.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    org.junit.Assert.assertTrue("'" + comparator_long48 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long48.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + comparator_long54 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long54.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str59 + "' != '" + "[100..100]"+ "'", str59.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    org.junit.Assert.assertTrue("'" + comparator_long64 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long64.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L+ "'", long68.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i76 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long80);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long81 + "' != '" + 100L+ "'", long81.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long82 + "' != '" + 100L+ "'", long82.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long85);
    org.junit.Assert.assertTrue("'" + comparator_long86 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long86.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long90 + "' != '" + 100L+ "'", long90.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long92 + "' != '" + 100L+ "'", long92.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long93 + "' != '" + 100L+ "'", long93.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long96);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b98 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b99 == false);

  }

  @Test
  public void test186() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test186"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    boolean b53 = range_long48.contains((java.lang.Long)0L);
    boolean b54 = range_long48.isNaturalOrdering();
    java.lang.String str55 = range_long48.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[100..100]"+ "'", str55.equals("[100..100]"));

  }

  @Test
  public void test187() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test187"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));

  }

  @Test
  public void test188() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test188"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    boolean b10 = range_long5.isOverlappedBy(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long8.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test189() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test189"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)1L, comparator_long9);
    boolean b12 = range_long10.isAfter((java.lang.Long)10L);
    boolean b13 = range_long5.containsRange(range_long10);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long10.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test190() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test190"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isBefore((java.lang.Long)10L);
    java.lang.Long long25 = range_long16.getMaximum();
    boolean b27 = range_long16.isBefore((java.lang.Long)1L);
    Range<java.lang.Long> range_long28 = null;
    boolean b29 = range_long16.isBeforeRange(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);

  }

  @Test
  public void test191() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test191"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.util.Comparator<java.lang.Long> comparator_long12 = range_long11.getComparator();
    boolean b13 = range_long11.isNaturalOrdering();
    boolean b15 = range_long11.equals((java.lang.Object)(byte)1);
    java.lang.String str16 = range_long11.toString();
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long19.isAfterRange(range_long23);
    boolean b27 = range_long23.contains((java.lang.Long)0L);
    boolean b29 = range_long23.contains((java.lang.Long)1L);
    java.lang.String str31 = range_long23.toString("");
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)(-1L), comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long37.isOverlappedBy(range_long40);
    boolean b43 = range_long23.isOverlappedBy(range_long40);
    boolean b45 = range_long23.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long46 = range_long23.getMaximum();
    boolean b47 = range_long11.containsRange(range_long23);
    boolean b48 = range_long6.isAfterRange(range_long11);
    java.lang.String str49 = range_long11.toString();
    boolean b51 = range_long11.isAfter((java.lang.Long)0L);
    java.lang.Long long52 = range_long11.getMinimum();
    Range<java.lang.Long> range_long53 = null;
    boolean b54 = range_long11.isAfterRange(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    org.junit.Assert.assertTrue("'" + comparator_long12 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long12.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str31 + "' != '" + ""+ "'", str31.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str49 + "' != '" + "[100..100]"+ "'", str49.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);

  }

  @Test
  public void test192() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test192"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.lang.Long long38 = range_long37.getMaximum();
    boolean b39 = range_long33.isAfterRange(range_long37);
    boolean b41 = range_long37.contains((java.lang.Long)0L);
    boolean b43 = range_long37.contains((java.lang.Long)1L);
    java.lang.String str45 = range_long37.toString("");
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)(-1L), comparator_long50);
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long51.isOverlappedBy(range_long54);
    boolean b57 = range_long37.isOverlappedBy(range_long54);
    boolean b59 = range_long37.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long60 = range_long37.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long61 = range_long37.getComparator();
    java.lang.Long long62 = range_long37.getMaximum();
    boolean b64 = range_long37.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long65 = range_long6.intersectionWith(range_long37);
    boolean b67 = range_long65.contains((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long61 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long61.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test193() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test193"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.lang.Long long38 = range_long37.getMaximum();
    boolean b39 = range_long33.isAfterRange(range_long37);
    boolean b41 = range_long37.contains((java.lang.Long)0L);
    boolean b43 = range_long37.contains((java.lang.Long)1L);
    java.lang.String str45 = range_long37.toString("");
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)(-1L), comparator_long50);
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long51.isOverlappedBy(range_long54);
    boolean b57 = range_long37.isOverlappedBy(range_long54);
    boolean b59 = range_long37.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long60 = range_long37.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long61 = range_long37.getComparator();
    java.lang.Long long62 = range_long37.getMaximum();
    boolean b64 = range_long37.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long65 = range_long6.intersectionWith(range_long37);
    java.util.Comparator<java.lang.Long> comparator_long67 = null;
    Range<java.lang.Long> range_long68 = Range.is((java.lang.Long)100L, comparator_long67);
    java.util.Comparator<java.lang.Long> comparator_long69 = range_long68.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.lang.Long long73 = range_long72.getMaximum();
    boolean b74 = range_long68.isAfterRange(range_long72);
    java.lang.Long long75 = range_long68.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long77 = null;
    Range<java.lang.Long> range_long78 = Range.is((java.lang.Long)100L, comparator_long77);
    java.util.Comparator<java.lang.Long> comparator_long79 = range_long78.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long81 = null;
    Range<java.lang.Long> range_long82 = Range.is((java.lang.Long)100L, comparator_long81);
    java.lang.Long long83 = range_long82.getMaximum();
    boolean b84 = range_long78.isAfterRange(range_long82);
    boolean b86 = range_long82.contains((java.lang.Long)0L);
    boolean b87 = range_long68.isBeforeRange(range_long82);
    java.util.Comparator<java.lang.Long> comparator_long88 = range_long82.getComparator();
    boolean b89 = range_long65.isOverlappedBy(range_long82);
    boolean b91 = range_long82.isAfter((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long61 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long61.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long68);
    org.junit.Assert.assertTrue("'" + comparator_long69 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long69.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    org.junit.Assert.assertTrue("'" + comparator_long79 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long79.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long82);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L+ "'", long83.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    org.junit.Assert.assertTrue("'" + comparator_long88 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long88.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);

  }

  @Test
  public void test194() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test194"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    int i34 = range_long6.elementCompareTo((java.lang.Long)10L);
    boolean b36 = range_long6.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long6.getMinimum();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));

  }

  @Test
  public void test195() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test195"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.lang.String str8 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)(-1L), comparator_long13);
    boolean b16 = range_long14.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long14.getComparator();
    boolean b18 = range_long14.isNaturalOrdering();
    java.lang.Long long19 = range_long14.getMaximum();
    boolean b21 = range_long14.isStartedBy((java.lang.Long)10L);
    boolean b22 = range_long2.isBeforeRange(range_long14);
    java.lang.String str23 = range_long14.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str8 + "' != '" + "[100..100]"+ "'", str8.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + (-1L)+ "'", long19.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str23 + "' != '" + "[-1..-1]"+ "'", str23.equals("[-1..-1]"));

  }

  @Test
  public void test196() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test196"); }


    java.util.Comparator<java.lang.Long> comparator_long3 = null;
    Range<java.lang.Long> range_long4 = Range.is((java.lang.Long)100L, comparator_long3);
    java.util.Comparator<java.lang.Long> comparator_long5 = range_long4.getComparator();
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)0L, comparator_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    boolean b22 = range_long14.contains((java.lang.Long)100L);
    java.lang.Long long23 = range_long14.getMinimum();
    boolean b24 = range_long7.isOverlappedBy(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long4);
    org.junit.Assert.assertTrue("'" + comparator_long5 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long5.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);

  }

  @Test
  public void test197() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test197"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    boolean b17 = range_long8.contains((java.lang.Long)0L);
    boolean b18 = range_long5.isAfterRange(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long21.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.lang.Long long26 = range_long25.getMaximum();
    boolean b27 = range_long21.isAfterRange(range_long25);
    boolean b28 = range_long8.isOverlappedBy(range_long25);
    boolean b29 = range_long8.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L+ "'", long26.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == true);

  }

  @Test
  public void test198() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test198"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    java.lang.Long long13 = range_long11.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long16.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.lang.Long long21 = range_long20.getMaximum();
    boolean b22 = range_long16.isAfterRange(range_long20);
    java.lang.Long long23 = range_long16.getMaximum();
    java.lang.Long long24 = range_long16.getMaximum();
    boolean b26 = range_long16.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long27 = range_long11.intersectionWith(range_long16);
    boolean b29 = range_long27.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long32.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long32.isAfterRange(range_long36);
    boolean b40 = range_long36.contains((java.lang.Long)0L);
    boolean b42 = range_long36.contains((java.lang.Long)1L);
    java.lang.String str44 = range_long36.toString("");
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)(-1L), comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long50.isOverlappedBy(range_long53);
    boolean b56 = range_long36.isOverlappedBy(range_long53);
    boolean b57 = range_long27.isBeforeRange(range_long53);
    boolean b59 = range_long27.isAfter((java.lang.Long)1L);
    boolean b60 = range_long2.isBeforeRange(range_long27);
    boolean b62 = range_long27.isStartedBy((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L+ "'", long21.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test199() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test199"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    boolean b15 = range_long6.isNaturalOrdering();
    boolean b17 = range_long6.contains((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    java.lang.Long long27 = range_long20.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long28 = range_long20.getComparator();
    boolean b30 = range_long20.isBefore((java.lang.Long)10L);
    boolean b31 = range_long6.isOverlappedBy(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long28 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long28.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == true);

  }

  @Test
  public void test200() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test200"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long3.getComparator();
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);

  }

  @Test
  public void test201() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test201"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.lang.Long long9 = range_long8.getMaximum();
    java.lang.Long long10 = range_long8.getMinimum();
    Range<java.lang.Long> range_long11 = range_long2.intersectionWith(range_long8);
    java.lang.String str12 = range_long2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[100..100]"+ "'", str12.equals("[100..100]"));

  }

  @Test
  public void test202() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test202"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    java.lang.String str66 = range_long33.toString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str66 + "' != '" + "hi!"+ "'", str66.equals("hi!"));

  }

  @Test
  public void test203() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test203"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    java.lang.Long long13 = range_long11.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long16.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.lang.Long long21 = range_long20.getMaximum();
    boolean b22 = range_long16.isAfterRange(range_long20);
    java.lang.Long long23 = range_long16.getMaximum();
    java.lang.Long long24 = range_long16.getMaximum();
    boolean b26 = range_long16.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long27 = range_long11.intersectionWith(range_long16);
    boolean b29 = range_long27.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long32.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long32.isAfterRange(range_long36);
    boolean b40 = range_long36.contains((java.lang.Long)0L);
    boolean b42 = range_long36.contains((java.lang.Long)1L);
    java.lang.String str44 = range_long36.toString("");
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)(-1L), comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long50.isOverlappedBy(range_long53);
    boolean b56 = range_long36.isOverlappedBy(range_long53);
    boolean b57 = range_long27.isBeforeRange(range_long53);
    boolean b59 = range_long27.isAfter((java.lang.Long)1L);
    boolean b60 = range_long2.isBeforeRange(range_long27);
    java.util.Comparator<java.lang.Long> comparator_long61 = range_long27.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L+ "'", long21.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    org.junit.Assert.assertTrue("'" + comparator_long61 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long61.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test204() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test204"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    boolean b14 = range_long6.isAfter((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    Range<java.lang.Long> range_long22 = range_long17.intersectionWith(range_long20);
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)1L, comparator_long24);
    boolean b27 = range_long25.isAfter((java.lang.Long)10L);
    boolean b28 = range_long20.containsRange(range_long25);
    Range<java.lang.Long> range_long29 = range_long6.intersectionWith(range_long20);
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    boolean b37 = range_long35.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long38 = range_long35.getComparator();
    boolean b40 = range_long35.isEndedBy((java.lang.Long)(-1L));
    boolean b41 = range_long20.isBeforeRange(range_long35);
    java.lang.String str43 = range_long35.toString("[100..100]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    org.junit.Assert.assertTrue("'" + comparator_long38 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long38.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str43 + "' != '" + "[100..100]"+ "'", str43.equals("[100..100]"));

  }

  @Test
  public void test205() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test205"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    java.lang.Long long10 = range_long3.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long12 = null;
    Range<java.lang.Long> range_long13 = Range.is((java.lang.Long)100L, comparator_long12);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long13.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    boolean b19 = range_long13.isAfterRange(range_long17);
    boolean b21 = range_long17.contains((java.lang.Long)0L);
    boolean b22 = range_long3.isBeforeRange(range_long17);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long17.getComparator();
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)10L, comparator_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long13);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);

  }

  @Test
  public void test206() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test206"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long21.getComparator();
    Range<java.lang.Long> range_long23 = range_long18.intersectionWith(range_long21);
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.lang.Long long31 = range_long30.getMaximum();
    boolean b32 = range_long26.isAfterRange(range_long30);
    java.lang.Long long33 = range_long26.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.util.Comparator<java.lang.Long> comparator_long37 = range_long36.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.lang.Long long41 = range_long40.getMaximum();
    boolean b42 = range_long36.isAfterRange(range_long40);
    boolean b44 = range_long40.contains((java.lang.Long)0L);
    boolean b45 = range_long26.isBeforeRange(range_long40);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long40.getComparator();
    boolean b47 = range_long23.isAfterRange(range_long40);
    boolean b48 = range_long5.isAfterRange(range_long23);
    boolean b50 = range_long23.isBefore((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long31 + "' != '" + 100L+ "'", long31.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long33 + "' != '" + 100L+ "'", long33.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    org.junit.Assert.assertTrue("'" + comparator_long37 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long37.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);

  }

  @Test
  public void test207() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test207"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    boolean b11 = range_long3.isEndedBy((java.lang.Long)(-1L));
    boolean b13 = range_long3.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long16.getComparator();
    boolean b18 = range_long16.isNaturalOrdering();
    boolean b20 = range_long16.equals((java.lang.Object)(byte)1);
    java.lang.String str21 = range_long16.toString();
    boolean b22 = range_long3.isAfterRange(range_long16);
    boolean b24 = range_long16.contains((java.lang.Long)(-1L));
    boolean b26 = range_long16.isAfter((java.lang.Long)(-1L));
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long29.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.lang.Long long34 = range_long33.getMaximum();
    boolean b35 = range_long29.isAfterRange(range_long33);
    java.lang.Long long36 = range_long29.getMaximum();
    boolean b38 = range_long29.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long40 = null;
    Range<java.lang.Long> range_long41 = Range.is((java.lang.Long)100L, comparator_long40);
    java.util.Comparator<java.lang.Long> comparator_long42 = range_long41.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long41.isAfterRange(range_long45);
    boolean b49 = range_long41.isEndedBy((java.lang.Long)(-1L));
    boolean b51 = range_long41.isEndedBy((java.lang.Long)1L);
    boolean b52 = range_long29.containsRange(range_long41);
    boolean b53 = range_long16.isBeforeRange(range_long29);
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    boolean b64 = range_long60.contains((java.lang.Long)0L);
    boolean b66 = range_long60.contains((java.lang.Long)1L);
    java.lang.String str68 = range_long60.toString("");
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.util.Comparator<java.lang.Long> comparator_long73 = range_long72.getComparator();
    Range<java.lang.Long> range_long74 = Range.is((java.lang.Long)(-1L), comparator_long73);
    java.util.Comparator<java.lang.Long> comparator_long76 = null;
    Range<java.lang.Long> range_long77 = Range.is((java.lang.Long)100L, comparator_long76);
    java.lang.Long long78 = range_long77.getMaximum();
    boolean b79 = range_long74.isOverlappedBy(range_long77);
    boolean b80 = range_long60.isOverlappedBy(range_long77);
    boolean b82 = range_long60.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long83 = range_long60.getMaximum();
    boolean b84 = range_long29.containsRange(range_long60);
    java.util.Comparator<java.lang.Long> comparator_long85 = range_long60.getComparator();
    Range<java.lang.Long> range_long86 = Range.is((java.lang.Long)(-1L), comparator_long85);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[100..100]"+ "'", str21.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long34 + "' != '" + 100L+ "'", long34.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long41);
    org.junit.Assert.assertTrue("'" + comparator_long42 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long42.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    org.junit.Assert.assertTrue("'" + comparator_long73 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long73.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L+ "'", long83.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == true);
    org.junit.Assert.assertTrue("'" + comparator_long85 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long85.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long86);

  }

  @Test
  public void test208() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test208"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long4 = null;
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long6 = range_long5.getComparator();
    Range<java.lang.Long> range_long7 = range_long2.intersectionWith(range_long5);
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    java.lang.Long long17 = range_long10.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long20.isAfterRange(range_long24);
    boolean b28 = range_long24.contains((java.lang.Long)0L);
    boolean b29 = range_long10.isBeforeRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long30 = range_long24.getComparator();
    boolean b31 = range_long7.isAfterRange(range_long24);
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.util.Comparator<java.lang.Long> comparator_long35 = range_long34.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long34.isAfterRange(range_long38);
    java.lang.Long long41 = range_long34.getMaximum();
    java.lang.Long long42 = range_long34.getMaximum();
    boolean b43 = range_long24.isOverlappedBy(range_long34);
    java.lang.String str45 = range_long34.toString("[100..100]");
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)(-1L), comparator_long50);
    boolean b53 = range_long51.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long54 = range_long51.getComparator();
    boolean b55 = range_long34.containsRange(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    org.junit.Assert.assertTrue("'" + comparator_long6 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long6.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    org.junit.Assert.assertTrue("'" + comparator_long30 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long30.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    org.junit.Assert.assertTrue("'" + comparator_long35 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long35.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L+ "'", long42.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + "[100..100]"+ "'", str45.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    org.junit.Assert.assertTrue("'" + comparator_long54 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long54.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test209() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test209"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    java.lang.String str7 = range_long2.toString();
    java.util.Comparator<java.lang.Long> comparator_long9 = null;
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)100L, comparator_long9);
    java.util.Comparator<java.lang.Long> comparator_long11 = range_long10.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.lang.Long long15 = range_long14.getMaximum();
    boolean b16 = range_long10.isAfterRange(range_long14);
    boolean b18 = range_long14.contains((java.lang.Long)0L);
    boolean b20 = range_long14.contains((java.lang.Long)1L);
    java.lang.String str22 = range_long14.toString("");
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long26.getComparator();
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)(-1L), comparator_long27);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.lang.Long long32 = range_long31.getMaximum();
    boolean b33 = range_long28.isOverlappedBy(range_long31);
    boolean b34 = range_long14.isOverlappedBy(range_long31);
    boolean b36 = range_long14.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long37 = range_long14.getMaximum();
    boolean b38 = range_long2.containsRange(range_long14);
    boolean b40 = range_long14.isAfter((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.util.Comparator<java.lang.Long> comparator_long46 = range_long45.getComparator();
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)0L, comparator_long46);
    boolean b50 = range_long48.contains((java.lang.Long)10L);
    boolean b52 = range_long48.isEndedBy((java.lang.Long)(-1L));
    boolean b53 = range_long14.equals((java.lang.Object)range_long48);
    java.lang.String str55 = range_long14.toString("[-1..-1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    org.junit.Assert.assertTrue("'" + comparator_long11 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long11.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str22 + "' != '" + ""+ "'", str22.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long32 + "' != '" + 100L+ "'", long32.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    org.junit.Assert.assertTrue("'" + comparator_long46 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long46.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str55 + "' != '" + "[-1..-1]"+ "'", str55.equals("[-1..-1]"));

  }

  @Test
  public void test210() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test210"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isBefore((java.lang.Long)10L);
    java.lang.Long long25 = range_long16.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    java.lang.Long long30 = range_long28.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.lang.Long long38 = range_long37.getMaximum();
    boolean b39 = range_long33.isAfterRange(range_long37);
    java.lang.Long long40 = range_long33.getMaximum();
    java.lang.Long long41 = range_long33.getMaximum();
    boolean b43 = range_long33.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long44 = range_long28.intersectionWith(range_long33);
    boolean b46 = range_long44.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long49.isAfterRange(range_long53);
    boolean b57 = range_long53.contains((java.lang.Long)0L);
    boolean b59 = range_long53.contains((java.lang.Long)1L);
    java.lang.String str61 = range_long53.toString("");
    java.util.Comparator<java.lang.Long> comparator_long64 = null;
    Range<java.lang.Long> range_long65 = Range.is((java.lang.Long)100L, comparator_long64);
    java.util.Comparator<java.lang.Long> comparator_long66 = range_long65.getComparator();
    Range<java.lang.Long> range_long67 = Range.is((java.lang.Long)(-1L), comparator_long66);
    java.util.Comparator<java.lang.Long> comparator_long69 = null;
    Range<java.lang.Long> range_long70 = Range.is((java.lang.Long)100L, comparator_long69);
    java.lang.Long long71 = range_long70.getMaximum();
    boolean b72 = range_long67.isOverlappedBy(range_long70);
    boolean b73 = range_long53.isOverlappedBy(range_long70);
    boolean b74 = range_long44.isBeforeRange(range_long70);
    boolean b75 = range_long16.containsRange(range_long70);
    java.lang.String str76 = range_long16.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long44);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str61 + "' != '" + ""+ "'", str61.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    org.junit.Assert.assertTrue("'" + comparator_long66 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long66.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long67);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long70);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long71 + "' != '" + 100L+ "'", long71.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b75 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str76 + "' != '" + "[100..100]"+ "'", str76.equals("[100..100]"));

  }

  @Test
  public void test211() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test211"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    boolean b32 = range_long2.isBeforeRange(range_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long35.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long38 = null;
    Range<java.lang.Long> range_long39 = Range.is((java.lang.Long)100L, comparator_long38);
    java.lang.Long long40 = range_long39.getMaximum();
    boolean b41 = range_long35.isAfterRange(range_long39);
    boolean b43 = range_long35.isEndedBy((java.lang.Long)(-1L));
    boolean b45 = range_long35.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    boolean b50 = range_long48.isNaturalOrdering();
    boolean b52 = range_long48.equals((java.lang.Object)(byte)1);
    java.lang.String str53 = range_long48.toString();
    boolean b54 = range_long35.isAfterRange(range_long48);
    java.util.Comparator<java.lang.Long> comparator_long56 = null;
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)100L, comparator_long56);
    java.util.Comparator<java.lang.Long> comparator_long58 = range_long57.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long60 = null;
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)100L, comparator_long60);
    java.lang.Long long62 = range_long61.getMaximum();
    boolean b63 = range_long57.isAfterRange(range_long61);
    boolean b65 = range_long61.contains((java.lang.Long)0L);
    boolean b67 = range_long61.contains((java.lang.Long)1L);
    java.lang.String str69 = range_long61.toString("");
    java.util.Comparator<java.lang.Long> comparator_long72 = null;
    Range<java.lang.Long> range_long73 = Range.is((java.lang.Long)100L, comparator_long72);
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long73.getComparator();
    Range<java.lang.Long> range_long75 = Range.is((java.lang.Long)(-1L), comparator_long74);
    java.util.Comparator<java.lang.Long> comparator_long77 = null;
    Range<java.lang.Long> range_long78 = Range.is((java.lang.Long)100L, comparator_long77);
    java.lang.Long long79 = range_long78.getMaximum();
    boolean b80 = range_long75.isOverlappedBy(range_long78);
    boolean b81 = range_long61.isOverlappedBy(range_long78);
    boolean b83 = range_long61.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long84 = range_long61.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long85 = range_long61.getComparator();
    boolean b86 = range_long35.isBeforeRange(range_long61);
    boolean b87 = range_long31.isAfterRange(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str53 + "' != '" + "[100..100]"+ "'", str53.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    org.junit.Assert.assertTrue("'" + comparator_long58 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long58.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str69 + "' != '" + ""+ "'", str69.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long73);
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long78);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long79 + "' != '" + 100L+ "'", long79.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long84 + "' != '" + 100L+ "'", long84.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long85 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long85.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);

  }

  @Test
  public void test212() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test212"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    boolean b33 = range_long31.isNaturalOrdering();
    boolean b35 = range_long31.equals((java.lang.Object)(byte)1);
    java.lang.String str36 = range_long31.toString();
    java.util.Comparator<java.lang.Long> comparator_long38 = null;
    Range<java.lang.Long> range_long39 = Range.is((java.lang.Long)100L, comparator_long38);
    java.util.Comparator<java.lang.Long> comparator_long40 = range_long39.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long42 = null;
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)100L, comparator_long42);
    java.lang.Long long44 = range_long43.getMaximum();
    boolean b45 = range_long39.isAfterRange(range_long43);
    boolean b47 = range_long43.contains((java.lang.Long)0L);
    boolean b49 = range_long43.contains((java.lang.Long)1L);
    java.lang.String str51 = range_long43.toString("");
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    Range<java.lang.Long> range_long57 = Range.is((java.lang.Long)(-1L), comparator_long56);
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long57.isOverlappedBy(range_long60);
    boolean b63 = range_long43.isOverlappedBy(range_long60);
    boolean b65 = range_long43.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long66 = range_long43.getMaximum();
    boolean b67 = range_long31.containsRange(range_long43);
    boolean b69 = range_long43.isAfter((java.lang.Long)1L);
    boolean b71 = range_long43.contains((java.lang.Long)0L);
    Range<java.lang.Long> range_long72 = range_long22.intersectionWith(range_long43);
    boolean b74 = range_long43.isAfter((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + "[100..100]"+ "'", str36.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long39);
    org.junit.Assert.assertTrue("'" + comparator_long40 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long40.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L+ "'", long44.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str51 + "' != '" + ""+ "'", str51.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long57);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L+ "'", long66.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == true);

  }

  @Test
  public void test213() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test213"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    java.lang.String str16 = range_long5.toString();
    int i18 = range_long5.elementCompareTo((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str16 + "' != '" + "[100..100]"+ "'", str16.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i18 == (-1));

  }

  @Test
  public void test214() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test214"); }


    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.util.Comparator<java.lang.Long> comparator_long7 = range_long6.getComparator();
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)0L, comparator_long7);
    Range<java.lang.Long> range_long10 = Range.is((java.lang.Long)(-1L), comparator_long7);
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long7);
    java.lang.String str12 = range_long11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    org.junit.Assert.assertTrue("'" + comparator_long7 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long7.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long10);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str12 + "' != '" + "[-1..-1]"+ "'", str12.equals("[-1..-1]"));

  }

  @Test
  public void test215() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test215"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.lang.Long long10 = range_long2.getMaximum();
    boolean b12 = range_long2.isBefore((java.lang.Long)(-1L));
    boolean b14 = range_long2.isStartedBy((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.util.Comparator<java.lang.Long> comparator_long18 = range_long17.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long20 = null;
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)100L, comparator_long20);
    java.lang.Long long22 = range_long21.getMaximum();
    boolean b23 = range_long17.isAfterRange(range_long21);
    boolean b25 = range_long21.contains((java.lang.Long)0L);
    boolean b27 = range_long21.contains((java.lang.Long)1L);
    java.lang.String str29 = range_long21.toString("");
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)(-1L), comparator_long34);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.lang.Long long39 = range_long38.getMaximum();
    boolean b40 = range_long35.isOverlappedBy(range_long38);
    boolean b41 = range_long21.isOverlappedBy(range_long38);
    Range<java.lang.Long> range_long42 = range_long2.intersectionWith(range_long38);
    boolean b43 = range_long38.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long10 + "' != '" + 100L+ "'", long10.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    org.junit.Assert.assertTrue("'" + comparator_long18 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long18.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long22 + "' != '" + 100L+ "'", long22.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str29 + "' != '" + ""+ "'", str29.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long39 + "' != '" + 100L+ "'", long39.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == true);

  }

  @Test
  public void test216() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test216"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.lang.Long long17 = range_long16.getMaximum();
    boolean b18 = range_long12.isAfterRange(range_long16);
    boolean b20 = range_long16.contains((java.lang.Long)0L);
    boolean b21 = range_long2.isBeforeRange(range_long16);
    java.util.Comparator<java.lang.Long> comparator_long22 = range_long16.getComparator();
    boolean b24 = range_long16.isBefore((java.lang.Long)10L);
    boolean b26 = range_long16.isAfter((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long17 + "' != '" + 100L+ "'", long17.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    org.junit.Assert.assertTrue("'" + comparator_long22 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long22.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);

  }

  @Test
  public void test217() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test217"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    java.lang.Long long47 = range_long45.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long49 = null;
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)100L, comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long51 = range_long50.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long50.isAfterRange(range_long54);
    java.lang.Long long57 = range_long50.getMaximum();
    java.lang.Long long58 = range_long50.getMaximum();
    boolean b60 = range_long50.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long61 = range_long45.intersectionWith(range_long50);
    boolean b63 = range_long61.equals((java.lang.Object)(short)100);
    boolean b64 = range_long18.isOverlappedBy(range_long61);
    boolean b66 = range_long61.isEndedBy((java.lang.Long)100L);
    boolean b68 = range_long61.equals((java.lang.Object)(-1L));
    boolean b69 = range_long61.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long47 + "' != '" + 100L+ "'", long47.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    org.junit.Assert.assertTrue("'" + comparator_long51 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long51.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long58 + "' != '" + 100L+ "'", long58.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b69 == true);

  }

  @Test
  public void test218() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test218"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    boolean b23 = range_long15.contains((java.lang.Long)(-1L));
    boolean b25 = range_long15.isAfter((java.lang.Long)(-1L));
    java.lang.Long long26 = range_long15.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long28 = null;
    Range<java.lang.Long> range_long29 = Range.is((java.lang.Long)100L, comparator_long28);
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long32.getComparator();
    Range<java.lang.Long> range_long34 = range_long29.intersectionWith(range_long32);
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.util.Comparator<java.lang.Long> comparator_long38 = range_long37.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long40 = null;
    Range<java.lang.Long> range_long41 = Range.is((java.lang.Long)100L, comparator_long40);
    java.lang.Long long42 = range_long41.getMaximum();
    boolean b43 = range_long37.isAfterRange(range_long41);
    java.lang.Long long44 = range_long37.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long46 = null;
    Range<java.lang.Long> range_long47 = Range.is((java.lang.Long)100L, comparator_long46);
    java.util.Comparator<java.lang.Long> comparator_long48 = range_long47.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long50 = null;
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)100L, comparator_long50);
    java.lang.Long long52 = range_long51.getMaximum();
    boolean b53 = range_long47.isAfterRange(range_long51);
    boolean b55 = range_long51.contains((java.lang.Long)0L);
    boolean b56 = range_long37.isBeforeRange(range_long51);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long51.getComparator();
    boolean b58 = range_long34.isAfterRange(range_long51);
    java.util.Comparator<java.lang.Long> comparator_long60 = null;
    Range<java.lang.Long> range_long61 = Range.is((java.lang.Long)100L, comparator_long60);
    java.util.Comparator<java.lang.Long> comparator_long62 = range_long61.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long64 = null;
    Range<java.lang.Long> range_long65 = Range.is((java.lang.Long)100L, comparator_long64);
    java.lang.Long long66 = range_long65.getMaximum();
    boolean b67 = range_long61.isAfterRange(range_long65);
    java.lang.Long long68 = range_long61.getMaximum();
    java.lang.Long long69 = range_long61.getMaximum();
    boolean b70 = range_long51.isOverlappedBy(range_long61);
    java.lang.String str71 = range_long61.toString();
    java.lang.String str72 = range_long61.toString();
    boolean b73 = range_long15.containsRange(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long26 + "' != '" + 100L+ "'", long26.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    org.junit.Assert.assertTrue("'" + comparator_long38 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long38.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long41);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long42 + "' != '" + 100L+ "'", long42.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long44 + "' != '" + 100L+ "'", long44.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long47);
    org.junit.Assert.assertTrue("'" + comparator_long48 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long48.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long61);
    org.junit.Assert.assertTrue("'" + comparator_long62 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long62.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long66 + "' != '" + 100L+ "'", long66.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long68 + "' != '" + 100L+ "'", long68.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long69 + "' != '" + 100L+ "'", long69.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str71 + "' != '" + "[100..100]"+ "'", str71.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str72 + "' != '" + "[100..100]"+ "'", str72.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == true);

  }

  @Test
  public void test219() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test219"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.lang.Long long38 = range_long37.getMaximum();
    boolean b39 = range_long33.isAfterRange(range_long37);
    boolean b41 = range_long37.contains((java.lang.Long)0L);
    boolean b43 = range_long37.contains((java.lang.Long)1L);
    java.lang.String str45 = range_long37.toString("");
    java.util.Comparator<java.lang.Long> comparator_long48 = null;
    Range<java.lang.Long> range_long49 = Range.is((java.lang.Long)100L, comparator_long48);
    java.util.Comparator<java.lang.Long> comparator_long50 = range_long49.getComparator();
    Range<java.lang.Long> range_long51 = Range.is((java.lang.Long)(-1L), comparator_long50);
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.lang.Long long55 = range_long54.getMaximum();
    boolean b56 = range_long51.isOverlappedBy(range_long54);
    boolean b57 = range_long37.isOverlappedBy(range_long54);
    boolean b59 = range_long37.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long60 = range_long37.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long61 = range_long37.getComparator();
    java.lang.Long long62 = range_long37.getMaximum();
    boolean b64 = range_long37.contains((java.lang.Long)10L);
    Range<java.lang.Long> range_long65 = range_long6.intersectionWith(range_long37);
    boolean b67 = range_long37.isEndedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str45 + "' != '" + ""+ "'", str45.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long49);
    org.junit.Assert.assertTrue("'" + comparator_long50 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long50.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long51);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long55 + "' != '" + 100L+ "'", long55.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long61 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long61.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);

  }

  @Test
  public void test220() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test220"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long23.getComparator();
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    boolean b27 = range_long25.isEndedBy((java.lang.Long)0L);
    boolean b28 = range_long2.isOverlappedBy(range_long25);
    boolean b30 = range_long25.isAfter((java.lang.Long)10L);
    boolean b32 = range_long25.isBefore((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);

  }

  @Test
  public void test221() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test221"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b10 = range_long5.contains((java.lang.Long)0L);
    boolean b12 = range_long5.isEndedBy((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);

  }

  @Test
  public void test222() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test222"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b4 = range_long2.isNaturalOrdering();
    boolean b6 = range_long2.equals((java.lang.Object)(byte)1);
    boolean b8 = range_long2.isBefore((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long10 = null;
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)100L, comparator_long10);
    java.lang.Long long12 = range_long11.getMaximum();
    java.lang.Long long13 = range_long11.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long15 = null;
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long17 = range_long16.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.lang.Long long21 = range_long20.getMaximum();
    boolean b22 = range_long16.isAfterRange(range_long20);
    java.lang.Long long23 = range_long16.getMaximum();
    java.lang.Long long24 = range_long16.getMaximum();
    boolean b26 = range_long16.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long27 = range_long11.intersectionWith(range_long16);
    boolean b29 = range_long27.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long31 = null;
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)100L, comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long32.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long35 = null;
    Range<java.lang.Long> range_long36 = Range.is((java.lang.Long)100L, comparator_long35);
    java.lang.Long long37 = range_long36.getMaximum();
    boolean b38 = range_long32.isAfterRange(range_long36);
    boolean b40 = range_long36.contains((java.lang.Long)0L);
    boolean b42 = range_long36.contains((java.lang.Long)1L);
    java.lang.String str44 = range_long36.toString("");
    java.util.Comparator<java.lang.Long> comparator_long47 = null;
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long48.getComparator();
    Range<java.lang.Long> range_long50 = Range.is((java.lang.Long)(-1L), comparator_long49);
    java.util.Comparator<java.lang.Long> comparator_long52 = null;
    Range<java.lang.Long> range_long53 = Range.is((java.lang.Long)100L, comparator_long52);
    java.lang.Long long54 = range_long53.getMaximum();
    boolean b55 = range_long50.isOverlappedBy(range_long53);
    boolean b56 = range_long36.isOverlappedBy(range_long53);
    boolean b57 = range_long27.isBeforeRange(range_long53);
    boolean b59 = range_long27.isAfter((java.lang.Long)1L);
    boolean b60 = range_long2.isBeforeRange(range_long27);
    Range<java.lang.Long> range_long61 = null;
    boolean b62 = range_long2.isAfterRange(range_long61);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long12 + "' != '" + 100L+ "'", long12.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    org.junit.Assert.assertTrue("'" + comparator_long17 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long17.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + 100L+ "'", long21.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long36);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str44 + "' != '" + ""+ "'", str44.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long50);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long53);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long54 + "' != '" + 100L+ "'", long54.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);

  }

  @Test
  public void test223() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test223"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    java.util.Comparator<java.lang.Long> comparator_long27 = range_long23.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long33 = null;
    Range<java.lang.Long> range_long34 = Range.is((java.lang.Long)100L, comparator_long33);
    java.lang.Long long35 = range_long34.getMaximum();
    boolean b36 = range_long30.isAfterRange(range_long34);
    java.lang.Long long37 = range_long30.getMaximum();
    boolean b39 = range_long30.contains((java.lang.Long)0L);
    boolean b41 = range_long30.isEndedBy((java.lang.Long)1L);
    boolean b43 = range_long30.contains((java.lang.Long)10L);
    boolean b45 = range_long30.contains((java.lang.Long)10L);
    boolean b46 = range_long23.isBeforeRange(range_long30);
    boolean b48 = range_long23.contains((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long49 = range_long23.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    org.junit.Assert.assertTrue("'" + comparator_long27 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long27.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long34);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long35 + "' != '" + 100L+ "'", long35.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long37 + "' != '" + 100L+ "'", long37.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    org.junit.Assert.assertTrue("'" + comparator_long49 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long49.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test224() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test224"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)(-1L), comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.lang.Long long24 = range_long23.getMaximum();
    boolean b25 = range_long20.isOverlappedBy(range_long23);
    boolean b26 = range_long6.isOverlappedBy(range_long23);
    boolean b28 = range_long6.isStartedBy((java.lang.Long)(-1L));
    int i30 = range_long6.elementCompareTo((java.lang.Long)100L);
    java.lang.Object obj31 = null;
    boolean b32 = range_long6.equals(obj31);
    java.util.Comparator<java.lang.Long> comparator_long33 = range_long6.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long24 + "' != '" + 100L+ "'", long24.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i30 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    org.junit.Assert.assertTrue("'" + comparator_long33 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long33.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test225() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test225"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    int i4 = range_long2.elementCompareTo((java.lang.Long)100L);
    boolean b6 = range_long2.isAfter((java.lang.Long)100L);
    java.lang.String str7 = range_long2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str7 + "' != '" + "[100..100]"+ "'", str7.equals("[100..100]"));

  }

  @Test
  public void test226() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test226"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.lang.Long long3 = range_long2.getMaximum();
    java.lang.Long long4 = range_long2.getMinimum();
    boolean b5 = range_long2.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    java.lang.Long long15 = range_long8.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long22.contains((java.lang.Long)0L);
    boolean b27 = range_long8.isBeforeRange(range_long22);
    boolean b28 = range_long2.containsRange(range_long22);
    java.util.Comparator<java.lang.Long> comparator_long32 = null;
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)100L, comparator_long32);
    java.util.Comparator<java.lang.Long> comparator_long34 = range_long33.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long36 = null;
    Range<java.lang.Long> range_long37 = Range.is((java.lang.Long)100L, comparator_long36);
    java.lang.Long long38 = range_long37.getMaximum();
    boolean b39 = range_long33.isAfterRange(range_long37);
    java.lang.Long long40 = range_long33.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long33.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)10L, comparator_long41);
    Range<java.lang.Long> range_long43 = Range.is((java.lang.Long)0L, comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    boolean b49 = range_long46.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long51 = null;
    Range<java.lang.Long> range_long52 = Range.is((java.lang.Long)100L, comparator_long51);
    java.util.Comparator<java.lang.Long> comparator_long53 = range_long52.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.lang.Long long57 = range_long56.getMaximum();
    boolean b58 = range_long52.isAfterRange(range_long56);
    boolean b60 = range_long52.isEndedBy((java.lang.Long)(-1L));
    boolean b62 = range_long52.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long63 = range_long46.intersectionWith(range_long52);
    boolean b64 = range_long43.isAfterRange(range_long63);
    boolean b65 = range_long2.isAfterRange(range_long63);
    java.util.Comparator<java.lang.Long> comparator_long67 = null;
    Range<java.lang.Long> range_long68 = Range.is((java.lang.Long)1L, comparator_long67);
    java.util.Comparator<java.lang.Long> comparator_long69 = range_long68.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long72 = null;
    Range<java.lang.Long> range_long73 = Range.is((java.lang.Long)100L, comparator_long72);
    java.util.Comparator<java.lang.Long> comparator_long74 = range_long73.getComparator();
    Range<java.lang.Long> range_long75 = Range.is((java.lang.Long)100L, comparator_long74);
    java.util.Comparator<java.lang.Long> comparator_long78 = null;
    Range<java.lang.Long> range_long79 = Range.is((java.lang.Long)100L, comparator_long78);
    java.util.Comparator<java.lang.Long> comparator_long80 = range_long79.getComparator();
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)(-1L), comparator_long80);
    boolean b83 = range_long81.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long84 = range_long81.getComparator();
    boolean b85 = range_long75.equals((java.lang.Object)range_long81);
    boolean b87 = range_long81.contains((java.lang.Long)1L);
    java.lang.Long long88 = range_long81.getMinimum();
    boolean b89 = range_long68.isAfterRange(range_long81);
    boolean b91 = range_long68.contains((java.lang.Long)1L);
    boolean b92 = range_long63.equals((java.lang.Object)range_long68);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long3 + "' != '" + 100L+ "'", long3.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long4 + "' != '" + 100L+ "'", long4.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long15 + "' != '" + 100L+ "'", long15.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    org.junit.Assert.assertTrue("'" + comparator_long34 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long34.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long37);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long38 + "' != '" + 100L+ "'", long38.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + 100L+ "'", long40.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long43);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long52);
    org.junit.Assert.assertTrue("'" + comparator_long53 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long53.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long57 + "' != '" + 100L+ "'", long57.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b60 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long68);
    org.junit.Assert.assertTrue("'" + comparator_long69 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long69.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long73);
    org.junit.Assert.assertTrue("'" + comparator_long74 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long74.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long75);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long79);
    org.junit.Assert.assertTrue("'" + comparator_long80 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long80.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    org.junit.Assert.assertTrue("'" + comparator_long84 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long84.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long88 + "' != '" + (-1L)+ "'", long88.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b89 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);

  }

  @Test
  public void test227() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test227"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long6 = null;
    Range<java.lang.Long> range_long7 = Range.is((java.lang.Long)100L, comparator_long6);
    java.lang.Long long8 = range_long7.getMaximum();
    boolean b9 = range_long3.isAfterRange(range_long7);
    boolean b11 = range_long7.contains((java.lang.Long)0L);
    boolean b13 = range_long7.contains((java.lang.Long)1L);
    java.lang.String str15 = range_long7.toString("");
    java.util.Comparator<java.lang.Long> comparator_long18 = null;
    Range<java.lang.Long> range_long19 = Range.is((java.lang.Long)100L, comparator_long18);
    java.util.Comparator<java.lang.Long> comparator_long20 = range_long19.getComparator();
    Range<java.lang.Long> range_long21 = Range.is((java.lang.Long)(-1L), comparator_long20);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.lang.Long long25 = range_long24.getMaximum();
    boolean b26 = range_long21.isOverlappedBy(range_long24);
    boolean b27 = range_long7.isOverlappedBy(range_long24);
    boolean b29 = range_long7.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long30 = range_long7.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long7.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)0L, comparator_long31);
    boolean b34 = range_long32.isAfter((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long7);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long8 + "' != '" + 100L+ "'", long8.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str15 + "' != '" + ""+ "'", str15.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    org.junit.Assert.assertTrue("'" + comparator_long20 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long20.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long21);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long25 + "' != '" + 100L+ "'", long25.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == true);

  }

  @Test
  public void test228() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test228"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)(-1L), comparator_long4);
    boolean b7 = range_long5.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long8 = range_long5.getComparator();
    boolean b9 = range_long5.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long12.getComparator();
    boolean b15 = range_long12.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long18.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.lang.Long long23 = range_long22.getMaximum();
    boolean b24 = range_long18.isAfterRange(range_long22);
    boolean b26 = range_long18.isEndedBy((java.lang.Long)(-1L));
    boolean b28 = range_long18.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long29 = range_long12.intersectionWith(range_long18);
    java.util.Comparator<java.lang.Object> comparator_obj30 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj31 = Range.between((java.lang.Object)range_long5, (java.lang.Object)range_long18, comparator_obj30);
      org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.ClassCastException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.ClassCastException, got " + e.getClass().getCanonicalName());
      }
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b7 == false);
    org.junit.Assert.assertTrue("'" + comparator_long8 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long8.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long23 + "' != '" + 100L+ "'", long23.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long29);

  }

  @Test
  public void test229() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test229"); }


    Range<java.lang.String> range_str1 = Range.is("[-1..-1]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_str1);

  }

  @Test
  public void test230() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test230"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    boolean b17 = range_long11.isStartedBy((java.lang.Long)(-1L));
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)1L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long24 = null;
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    java.util.Comparator<java.lang.Long> comparator_long26 = range_long25.getComparator();
    Range<java.lang.Long> range_long27 = Range.is((java.lang.Long)100L, comparator_long26);
    java.util.Comparator<java.lang.Long> comparator_long30 = null;
    Range<java.lang.Long> range_long31 = Range.is((java.lang.Long)100L, comparator_long30);
    java.util.Comparator<java.lang.Long> comparator_long32 = range_long31.getComparator();
    Range<java.lang.Long> range_long33 = Range.is((java.lang.Long)(-1L), comparator_long32);
    boolean b35 = range_long33.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long36 = range_long33.getComparator();
    boolean b37 = range_long27.equals((java.lang.Object)range_long33);
    boolean b39 = range_long33.contains((java.lang.Long)1L);
    java.lang.Long long40 = range_long33.getMinimum();
    boolean b41 = range_long20.isAfterRange(range_long33);
    boolean b42 = range_long11.equals((java.lang.Object)range_long33);
    boolean b44 = range_long11.isStartedBy((java.lang.Long)10L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    org.junit.Assert.assertTrue("'" + comparator_long26 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long26.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long27);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long31);
    org.junit.Assert.assertTrue("'" + comparator_long32 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long32.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    org.junit.Assert.assertTrue("'" + comparator_long36 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long36.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long40 + "' != '" + (-1L)+ "'", long40.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);

  }

  @Test
  public void test231() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test231"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.lang.String str21 = range_long8.toString("[100..100]");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str21 + "' != '" + "[100..100]"+ "'", str21.equals("[100..100]"));

  }

  @Test
  public void test232() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test232"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    Range<java.lang.Long> range_long9 = null;
    boolean b10 = range_long6.isOverlappedBy(range_long9);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)(-1L), comparator_long15);
    boolean b18 = range_long16.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long19 = range_long16.getComparator();
    boolean b20 = range_long16.isNaturalOrdering();
    java.lang.Long long21 = range_long16.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long28.isNaturalOrdering();
    java.util.Comparator<java.lang.Long> comparator_long54 = range_long28.getComparator();
    boolean b55 = range_long16.isBeforeRange(range_long28);
    boolean b56 = range_long6.isAfterRange(range_long28);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.util.Comparator<java.lang.Long> comparator_long60 = range_long59.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long62 = null;
    Range<java.lang.Long> range_long63 = Range.is((java.lang.Long)100L, comparator_long62);
    java.lang.Long long64 = range_long63.getMaximum();
    boolean b65 = range_long59.isAfterRange(range_long63);
    java.util.Comparator<java.lang.Long> comparator_long67 = null;
    Range<java.lang.Long> range_long68 = Range.is((java.lang.Long)100L, comparator_long67);
    java.util.Comparator<java.lang.Long> comparator_long69 = range_long68.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.lang.Long long73 = range_long72.getMaximum();
    boolean b74 = range_long68.isAfterRange(range_long72);
    java.lang.Long long75 = range_long68.getMaximum();
    boolean b76 = range_long63.isAfterRange(range_long68);
    int i78 = range_long63.elementCompareTo((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long80 = null;
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)100L, comparator_long80);
    java.util.Comparator<java.lang.Long> comparator_long82 = range_long81.getComparator();
    boolean b83 = range_long63.equals((java.lang.Object)comparator_long82);
    boolean b84 = range_long28.isAfterRange(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    org.junit.Assert.assertTrue("'" + comparator_long19 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long19.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long21 + "' != '" + (-1L)+ "'", long21.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == true);
    org.junit.Assert.assertTrue("'" + comparator_long54 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long54.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    org.junit.Assert.assertTrue("'" + comparator_long60 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long60.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long63);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long64 + "' != '" + 100L+ "'", long64.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long68);
    org.junit.Assert.assertTrue("'" + comparator_long69 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long69.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long73 + "' != '" + 100L+ "'", long73.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long75 + "' != '" + 100L+ "'", long75.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i78 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    org.junit.Assert.assertTrue("'" + comparator_long82 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long82.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b84 == false);

  }

  @Test
  public void test233() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test233"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long2.isBeforeRange(range_long28);
    boolean b55 = range_long28.isBefore((java.lang.Long)(-1L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b55 == false);

  }

  @Test
  public void test234() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test234"); }


    java.lang.Object obj1 = null;
    java.util.Comparator<java.lang.Object> comparator_obj2 = null;
    // The following exception was thrown during execution in test generation
    try {
    Range<java.lang.Object> range_obj3 = Range.between((java.lang.Object)(byte)1, obj1, comparator_obj2);
      org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
      if (! e.getClass().getCanonicalName().equals("java.lang.IllegalArgumentException")) {
        org.junit.Assert.fail("Expected exception of type java.lang.IllegalArgumentException, got " + e.getClass().getCanonicalName());
      }
    }

  }

  @Test
  public void test235() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test235"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    boolean b5 = range_long2.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long7 = null;
    Range<java.lang.Long> range_long8 = Range.is((java.lang.Long)100L, comparator_long7);
    java.util.Comparator<java.lang.Long> comparator_long9 = range_long8.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long11 = null;
    Range<java.lang.Long> range_long12 = Range.is((java.lang.Long)100L, comparator_long11);
    java.lang.Long long13 = range_long12.getMaximum();
    boolean b14 = range_long8.isAfterRange(range_long12);
    boolean b16 = range_long8.isEndedBy((java.lang.Long)(-1L));
    boolean b18 = range_long8.isEndedBy((java.lang.Long)1L);
    Range<java.lang.Long> range_long19 = range_long2.intersectionWith(range_long8);
    java.util.Comparator<java.lang.Long> comparator_long22 = null;
    Range<java.lang.Long> range_long23 = Range.is((java.lang.Long)100L, comparator_long22);
    java.util.Comparator<java.lang.Long> comparator_long24 = range_long23.getComparator();
    Range<java.lang.Long> range_long25 = Range.is((java.lang.Long)100L, comparator_long24);
    boolean b27 = range_long25.isEndedBy((java.lang.Long)0L);
    boolean b28 = range_long2.isOverlappedBy(range_long25);
    boolean b30 = range_long25.isBefore((java.lang.Long)0L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long8);
    org.junit.Assert.assertTrue("'" + comparator_long9 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long9.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long12);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long13 + "' != '" + 100L+ "'", long13.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long19);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long23);
    org.junit.Assert.assertTrue("'" + comparator_long24 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long24.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long25);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);

  }

  @Test
  public void test236() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test236"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long2.isBeforeRange(range_long28);
    int i55 = range_long2.elementCompareTo((java.lang.Long)100L);
    java.util.Comparator<java.lang.Long> comparator_long57 = null;
    Range<java.lang.Long> range_long58 = Range.is((java.lang.Long)100L, comparator_long57);
    java.util.Comparator<java.lang.Long> comparator_long59 = range_long58.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long61 = null;
    Range<java.lang.Long> range_long62 = Range.is((java.lang.Long)100L, comparator_long61);
    java.lang.Long long63 = range_long62.getMaximum();
    boolean b64 = range_long58.isAfterRange(range_long62);
    java.lang.Long long65 = range_long58.getMaximum();
    boolean b67 = range_long58.contains((java.lang.Long)0L);
    boolean b68 = range_long2.isAfterRange(range_long58);
    boolean b70 = range_long2.isEndedBy((java.lang.Long)100L);
    boolean b72 = range_long2.contains((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i55 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long58);
    org.junit.Assert.assertTrue("'" + comparator_long59 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long59.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long62);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long63 + "' != '" + 100L+ "'", long63.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b72 == true);

  }

  @Test
  public void test237() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test237"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long2.isEndedBy((java.lang.Long)(-1L));
    boolean b12 = range_long2.isEndedBy((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long14 = null;
    Range<java.lang.Long> range_long15 = Range.is((java.lang.Long)100L, comparator_long14);
    java.util.Comparator<java.lang.Long> comparator_long16 = range_long15.getComparator();
    boolean b17 = range_long15.isNaturalOrdering();
    boolean b19 = range_long15.equals((java.lang.Object)(byte)1);
    java.lang.String str20 = range_long15.toString();
    boolean b21 = range_long2.isAfterRange(range_long15);
    java.util.Comparator<java.lang.Long> comparator_long23 = null;
    Range<java.lang.Long> range_long24 = Range.is((java.lang.Long)100L, comparator_long23);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long24.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long27 = null;
    Range<java.lang.Long> range_long28 = Range.is((java.lang.Long)100L, comparator_long27);
    java.lang.Long long29 = range_long28.getMaximum();
    boolean b30 = range_long24.isAfterRange(range_long28);
    boolean b32 = range_long28.contains((java.lang.Long)0L);
    boolean b34 = range_long28.contains((java.lang.Long)1L);
    java.lang.String str36 = range_long28.toString("");
    java.util.Comparator<java.lang.Long> comparator_long39 = null;
    Range<java.lang.Long> range_long40 = Range.is((java.lang.Long)100L, comparator_long39);
    java.util.Comparator<java.lang.Long> comparator_long41 = range_long40.getComparator();
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)(-1L), comparator_long41);
    java.util.Comparator<java.lang.Long> comparator_long44 = null;
    Range<java.lang.Long> range_long45 = Range.is((java.lang.Long)100L, comparator_long44);
    java.lang.Long long46 = range_long45.getMaximum();
    boolean b47 = range_long42.isOverlappedBy(range_long45);
    boolean b48 = range_long28.isOverlappedBy(range_long45);
    boolean b50 = range_long28.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long51 = range_long28.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long52 = range_long28.getComparator();
    boolean b53 = range_long2.isBeforeRange(range_long28);
    java.util.Comparator<java.lang.Long> comparator_long55 = null;
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)100L, comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long57 = range_long56.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long59 = null;
    Range<java.lang.Long> range_long60 = Range.is((java.lang.Long)100L, comparator_long59);
    java.lang.Long long61 = range_long60.getMaximum();
    boolean b62 = range_long56.isAfterRange(range_long60);
    boolean b64 = range_long60.contains((java.lang.Long)0L);
    boolean b66 = range_long60.contains((java.lang.Long)1L);
    java.lang.String str68 = range_long60.toString("");
    java.util.Comparator<java.lang.Long> comparator_long71 = null;
    Range<java.lang.Long> range_long72 = Range.is((java.lang.Long)100L, comparator_long71);
    java.util.Comparator<java.lang.Long> comparator_long73 = range_long72.getComparator();
    Range<java.lang.Long> range_long74 = Range.is((java.lang.Long)(-1L), comparator_long73);
    java.util.Comparator<java.lang.Long> comparator_long76 = null;
    Range<java.lang.Long> range_long77 = Range.is((java.lang.Long)100L, comparator_long76);
    java.lang.Long long78 = range_long77.getMaximum();
    boolean b79 = range_long74.isOverlappedBy(range_long77);
    boolean b80 = range_long60.isOverlappedBy(range_long77);
    boolean b82 = range_long60.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long83 = range_long60.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long84 = range_long60.getComparator();
    boolean b85 = range_long60.isNaturalOrdering();
    boolean b86 = range_long2.containsRange(range_long60);
    boolean b88 = range_long60.isBefore((java.lang.Long)100L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long15);
    org.junit.Assert.assertTrue("'" + comparator_long16 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long16.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str20 + "' != '" + "[100..100]"+ "'", str20.equals("[100..100]"));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long24);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long28);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str36 + "' != '" + ""+ "'", str36.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long40);
    org.junit.Assert.assertTrue("'" + comparator_long41 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long41.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long45);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long46 + "' != '" + 100L+ "'", long46.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long51 + "' != '" + 100L+ "'", long51.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long52 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long52.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    org.junit.Assert.assertTrue("'" + comparator_long57 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long57.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long60);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long61 + "' != '" + 100L+ "'", long61.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + ""+ "'", str68.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long72);
    org.junit.Assert.assertTrue("'" + comparator_long73 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long73.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long74);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long77);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long78 + "' != '" + 100L+ "'", long78.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b80 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b82 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long83 + "' != '" + 100L+ "'", long83.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long84 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long84.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b86 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b88 == false);

  }

  @Test
  public void test238() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test238"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    boolean b4 = range_long2.contains((java.lang.Long)1L);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b4 == false);

  }

  @Test
  public void test239() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test239"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    boolean b17 = range_long11.contains((java.lang.Long)1L);
    java.lang.Long long18 = range_long11.getMinimum();
    boolean b19 = range_long11.isNaturalOrdering();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + (-1L)+ "'", long18.equals((-1L)));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b19 == true);

  }

  @Test
  public void test240() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test240"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    int i10 = range_long2.elementCompareTo((java.lang.Long)1L);
    boolean b12 = range_long2.contains((java.lang.Long)1L);
    java.util.Comparator<java.lang.Long> comparator_long13 = range_long2.getComparator();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(i10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    org.junit.Assert.assertTrue("'" + comparator_long13 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long13.equals(Range.ComparableComparator.INSTANCE));

  }

  @Test
  public void test241() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test241"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    boolean b12 = range_long6.contains((java.lang.Long)1L);
    java.lang.String str14 = range_long6.toString("");
    java.util.Comparator<java.lang.Long> comparator_long16 = null;
    Range<java.lang.Long> range_long17 = Range.is((java.lang.Long)100L, comparator_long16);
    java.lang.Long long18 = range_long17.getMaximum();
    java.lang.Long long19 = range_long17.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long21 = null;
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)100L, comparator_long21);
    java.util.Comparator<java.lang.Long> comparator_long23 = range_long22.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long25 = null;
    Range<java.lang.Long> range_long26 = Range.is((java.lang.Long)100L, comparator_long25);
    java.lang.Long long27 = range_long26.getMaximum();
    boolean b28 = range_long22.isAfterRange(range_long26);
    java.lang.Long long29 = range_long22.getMaximum();
    java.lang.Long long30 = range_long22.getMaximum();
    boolean b32 = range_long22.isEndedBy((java.lang.Long)(-1L));
    Range<java.lang.Long> range_long33 = range_long17.intersectionWith(range_long22);
    boolean b35 = range_long33.equals((java.lang.Object)(short)100);
    java.util.Comparator<java.lang.Long> comparator_long37 = null;
    Range<java.lang.Long> range_long38 = Range.is((java.lang.Long)100L, comparator_long37);
    java.util.Comparator<java.lang.Long> comparator_long39 = range_long38.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long41 = null;
    Range<java.lang.Long> range_long42 = Range.is((java.lang.Long)100L, comparator_long41);
    java.lang.Long long43 = range_long42.getMaximum();
    boolean b44 = range_long38.isAfterRange(range_long42);
    boolean b46 = range_long42.contains((java.lang.Long)0L);
    boolean b48 = range_long42.contains((java.lang.Long)1L);
    java.lang.String str50 = range_long42.toString("");
    java.util.Comparator<java.lang.Long> comparator_long53 = null;
    Range<java.lang.Long> range_long54 = Range.is((java.lang.Long)100L, comparator_long53);
    java.util.Comparator<java.lang.Long> comparator_long55 = range_long54.getComparator();
    Range<java.lang.Long> range_long56 = Range.is((java.lang.Long)(-1L), comparator_long55);
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long56.isOverlappedBy(range_long59);
    boolean b62 = range_long42.isOverlappedBy(range_long59);
    boolean b63 = range_long33.isBeforeRange(range_long59);
    Range<java.lang.Long> range_long64 = range_long6.intersectionWith(range_long33);
    java.lang.Long long65 = range_long33.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long66 = range_long33.getComparator();
    java.lang.String str68 = range_long33.toString("hi!");
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str14 + "' != '" + ""+ "'", str14.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long17);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long18 + "' != '" + 100L+ "'", long18.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    org.junit.Assert.assertTrue("'" + comparator_long23 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long23.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long26);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long27 + "' != '" + 100L+ "'", long27.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long29 + "' != '" + 100L+ "'", long29.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long30 + "' != '" + 100L+ "'", long30.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long33);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long38);
    org.junit.Assert.assertTrue("'" + comparator_long39 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long39.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long42);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long43 + "' != '" + 100L+ "'", long43.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str50 + "' != '" + ""+ "'", str50.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long54);
    org.junit.Assert.assertTrue("'" + comparator_long55 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long55.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long56);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long64);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long65 + "' != '" + 100L+ "'", long65.equals(100L));
    org.junit.Assert.assertTrue("'" + comparator_long66 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long66.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str68 + "' != '" + "hi!"+ "'", str68.equals("hi!"));

  }

  @Test
  public void test242() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test242"); }


    java.util.Comparator<java.lang.Long> comparator_long2 = null;
    Range<java.lang.Long> range_long3 = Range.is((java.lang.Long)100L, comparator_long2);
    java.util.Comparator<java.lang.Long> comparator_long4 = range_long3.getComparator();
    Range<java.lang.Long> range_long5 = Range.is((java.lang.Long)100L, comparator_long4);
    java.util.Comparator<java.lang.Long> comparator_long8 = null;
    Range<java.lang.Long> range_long9 = Range.is((java.lang.Long)100L, comparator_long8);
    java.util.Comparator<java.lang.Long> comparator_long10 = range_long9.getComparator();
    Range<java.lang.Long> range_long11 = Range.is((java.lang.Long)(-1L), comparator_long10);
    boolean b13 = range_long11.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long14 = range_long11.getComparator();
    boolean b15 = range_long5.equals((java.lang.Object)range_long11);
    boolean b17 = range_long11.contains((java.lang.Long)1L);
    java.lang.String str18 = range_long11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long3);
    org.junit.Assert.assertTrue("'" + comparator_long4 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long4.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long5);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long9);
    org.junit.Assert.assertTrue("'" + comparator_long10 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long10.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long11);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b13 == false);
    org.junit.Assert.assertTrue("'" + comparator_long14 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long14.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str18 + "' != '" + "[-1..-1]"+ "'", str18.equals("[-1..-1]"));

  }

  @Test
  public void test243() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test243"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    boolean b10 = range_long6.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    Range<java.lang.Long> range_long16 = Range.is((java.lang.Long)100L, comparator_long15);
    java.util.Comparator<java.lang.Long> comparator_long19 = null;
    Range<java.lang.Long> range_long20 = Range.is((java.lang.Long)100L, comparator_long19);
    java.util.Comparator<java.lang.Long> comparator_long21 = range_long20.getComparator();
    Range<java.lang.Long> range_long22 = Range.is((java.lang.Long)(-1L), comparator_long21);
    boolean b24 = range_long22.contains((java.lang.Long)10L);
    java.util.Comparator<java.lang.Long> comparator_long25 = range_long22.getComparator();
    boolean b26 = range_long16.equals((java.lang.Object)range_long22);
    boolean b27 = range_long6.containsRange(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long16);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long20);
    org.junit.Assert.assertTrue("'" + comparator_long21 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long21.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long22);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    org.junit.Assert.assertTrue("'" + comparator_long25 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long25.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b27 == true);

  }

  @Test
  public void test244() throws Throwable {

    if (debug) { System.out.format("%n%s%n","RegressionTest0.test244"); }


    java.util.Comparator<java.lang.Long> comparator_long1 = null;
    Range<java.lang.Long> range_long2 = Range.is((java.lang.Long)100L, comparator_long1);
    java.util.Comparator<java.lang.Long> comparator_long3 = range_long2.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long5 = null;
    Range<java.lang.Long> range_long6 = Range.is((java.lang.Long)100L, comparator_long5);
    java.lang.Long long7 = range_long6.getMaximum();
    boolean b8 = range_long2.isAfterRange(range_long6);
    java.lang.Long long9 = range_long2.getMaximum();
    boolean b11 = range_long2.contains((java.lang.Long)0L);
    java.util.Comparator<java.lang.Long> comparator_long13 = null;
    Range<java.lang.Long> range_long14 = Range.is((java.lang.Long)100L, comparator_long13);
    java.util.Comparator<java.lang.Long> comparator_long15 = range_long14.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long17 = null;
    Range<java.lang.Long> range_long18 = Range.is((java.lang.Long)100L, comparator_long17);
    java.lang.Long long19 = range_long18.getMaximum();
    boolean b20 = range_long14.isAfterRange(range_long18);
    boolean b22 = range_long18.contains((java.lang.Long)0L);
    boolean b24 = range_long18.contains((java.lang.Long)1L);
    java.lang.String str26 = range_long18.toString("");
    java.util.Comparator<java.lang.Long> comparator_long29 = null;
    Range<java.lang.Long> range_long30 = Range.is((java.lang.Long)100L, comparator_long29);
    java.util.Comparator<java.lang.Long> comparator_long31 = range_long30.getComparator();
    Range<java.lang.Long> range_long32 = Range.is((java.lang.Long)(-1L), comparator_long31);
    java.util.Comparator<java.lang.Long> comparator_long34 = null;
    Range<java.lang.Long> range_long35 = Range.is((java.lang.Long)100L, comparator_long34);
    java.lang.Long long36 = range_long35.getMaximum();
    boolean b37 = range_long32.isOverlappedBy(range_long35);
    boolean b38 = range_long18.isOverlappedBy(range_long35);
    boolean b40 = range_long18.isStartedBy((java.lang.Long)(-1L));
    java.lang.Long long41 = range_long18.getMaximum();
    boolean b42 = range_long2.isOverlappedBy(range_long18);
    java.util.Comparator<java.lang.Long> comparator_long45 = null;
    Range<java.lang.Long> range_long46 = Range.is((java.lang.Long)100L, comparator_long45);
    java.util.Comparator<java.lang.Long> comparator_long47 = range_long46.getComparator();
    Range<java.lang.Long> range_long48 = Range.is((java.lang.Long)100L, comparator_long47);
    boolean b50 = range_long48.isEndedBy((java.lang.Long)0L);
    boolean b51 = range_long18.isAfterRange(range_long48);
    java.lang.Long long52 = range_long18.getMinimum();
    java.util.Comparator<java.lang.Long> comparator_long54 = null;
    Range<java.lang.Long> range_long55 = Range.is((java.lang.Long)100L, comparator_long54);
    java.util.Comparator<java.lang.Long> comparator_long56 = range_long55.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long58 = null;
    Range<java.lang.Long> range_long59 = Range.is((java.lang.Long)100L, comparator_long58);
    java.lang.Long long60 = range_long59.getMaximum();
    boolean b61 = range_long55.isAfterRange(range_long59);
    java.lang.Long long62 = range_long55.getMaximum();
    java.util.Comparator<java.lang.Long> comparator_long64 = null;
    Range<java.lang.Long> range_long65 = Range.is((java.lang.Long)100L, comparator_long64);
    java.util.Comparator<java.lang.Long> comparator_long66 = range_long65.getComparator();
    java.util.Comparator<java.lang.Long> comparator_long68 = null;
    Range<java.lang.Long> range_long69 = Range.is((java.lang.Long)100L, comparator_long68);
    java.lang.Long long70 = range_long69.getMaximum();
    boolean b71 = range_long65.isAfterRange(range_long69);
    boolean b73 = range_long69.contains((java.lang.Long)0L);
    boolean b74 = range_long55.isBeforeRange(range_long69);
    java.util.Comparator<java.lang.Long> comparator_long75 = range_long69.getComparator();
    boolean b77 = range_long69.isAfter((java.lang.Long)0L);
    boolean b78 = range_long18.containsRange(range_long69);
    java.util.Comparator<java.lang.Long> comparator_long80 = null;
    Range<java.lang.Long> range_long81 = Range.is((java.lang.Long)100L, comparator_long80);
    java.util.Comparator<java.lang.Long> comparator_long83 = null;
    Range<java.lang.Long> range_long84 = Range.is((java.lang.Long)100L, comparator_long83);
    java.util.Comparator<java.lang.Long> comparator_long85 = range_long84.getComparator();
    Range<java.lang.Long> range_long86 = range_long81.intersectionWith(range_long84);
    java.util.Comparator<java.lang.Long> comparator_long88 = null;
    Range<java.lang.Long> range_long89 = Range.is((java.lang.Long)1L, comparator_long88);
    boolean b91 = range_long89.isAfter((java.lang.Long)10L);
    boolean b92 = range_long84.containsRange(range_long89);
    boolean b94 = range_long84.isStartedBy((java.lang.Long)0L);
    boolean b95 = range_long69.containsRange(range_long84);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long2);
    org.junit.Assert.assertTrue("'" + comparator_long3 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long3.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long6);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long7 + "' != '" + 100L+ "'", long7.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long9 + "' != '" + 100L+ "'", long9.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long14);
    org.junit.Assert.assertTrue("'" + comparator_long15 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long15.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long18);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long19 + "' != '" + 100L+ "'", long19.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + str26 + "' != '" + ""+ "'", str26.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long30);
    org.junit.Assert.assertTrue("'" + comparator_long31 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long31.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long32);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long35);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long36 + "' != '" + 100L+ "'", long36.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b38 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long41 + "' != '" + 100L+ "'", long41.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long46);
    org.junit.Assert.assertTrue("'" + comparator_long47 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long47.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long48);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long52 + "' != '" + 100L+ "'", long52.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long55);
    org.junit.Assert.assertTrue("'" + comparator_long56 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long56.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long59);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long60 + "' != '" + 100L+ "'", long60.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long62 + "' != '" + 100L+ "'", long62.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long65);
    org.junit.Assert.assertTrue("'" + comparator_long66 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long66.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long69);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue("'" + long70 + "' != '" + 100L+ "'", long70.equals(100L));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b71 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b74 == false);
    org.junit.Assert.assertTrue("'" + comparator_long75 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long75.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b77 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b78 == true);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long81);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long84);
    org.junit.Assert.assertTrue("'" + comparator_long85 + "' != '" + Range.ComparableComparator.INSTANCE + "'", comparator_long85.equals(Range.ComparableComparator.INSTANCE));
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long86);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertNotNull(range_long89);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b91 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b94 == false);
    
    // Regression assertion (captures the current behavior of the code)
    org.junit.Assert.assertTrue(b95 == true);

  }

}
