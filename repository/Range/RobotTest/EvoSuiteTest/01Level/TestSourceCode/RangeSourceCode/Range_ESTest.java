/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:47:02 GMT 2023
 */

package RangeSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import RangeSourceCode.Range;
import java.util.Comparator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range<String> range0 = Range.is("!j/1M", (Comparator<String>) null);
      String string0 = range0.toString("!j/1M");
      assertEquals("!j/1M", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "5U@(Jgb", comparator0);
      String string0 = range0.toString();
      assertEquals("[..5U@(Jgb]", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Integer integer0 = new Integer(1719);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      boolean boolean0 = range0.isStartedBy(integer0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range<String> range0 = Range.is("!j/1M", (Comparator<String>) null);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-810));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "-=/:NsBd{g@8j#1a^", comparator0);
      boolean boolean0 = range0.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.between("", "", comparator0);
      boolean boolean0 = range0.isEndedBy("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-810));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "-=/:NsBd{g@8j#1a^", comparator0);
      boolean boolean0 = range0.isBeforeRange(range0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range<String> range0 = Range.is("!j/1M", (Comparator<String>) null);
      boolean boolean0 = range0.isBefore("!j/1M");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isAfterRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) "", comparator0);
      boolean boolean0 = range0.isAfter("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer((-810));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null).when(comparator0).toString();
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "-=/:NsBd{g@8j#1a^", comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) "-=/:NsBd{g@8j#1a^", comparator1);
      assertFalse(range1.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Integer integer0 = new Integer((-810));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) "-=/:NsBd{g@8j#1a^", comparator0);
      Range<Object> range1 = range0.intersectionWith(range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<String> range0 = Range.is("*Q0diQ[4e']");
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Range<String> range0 = Range.is("*Q0diQ[4e']");
      String string0 = range0.getMinimum();
      assertEquals("*Q0diQ[4e']", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(1719);
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      Object object0 = range0.getMaximum();
      assertEquals(1719, object0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Integer> range0 = Range.is(integer0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      Range<String> range0 = Range.between("Elements in a range must not be null: element1=", "");
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.contains("'hQ)i8zs0InRgi");
      assertFalse(boolean0);
  }
}
