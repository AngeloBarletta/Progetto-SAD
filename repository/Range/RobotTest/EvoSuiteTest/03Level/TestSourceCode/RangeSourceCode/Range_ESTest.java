/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:41:38 GMT 2023
 */

package RangeSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import RangeSourceCode.Range;
import java.util.Comparator;
import java.util.IllegalFormatConversionException;
import java.util.UnknownFormatConversionException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Range_ESTest extends Range_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Range<String> range0 = Range.between("FARz$m!", "Elements in a range must not be null: element1=");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.between("|A", "Elements in a range must not be null: element1=", comparator0);
      Range<String> range2 = range1.intersectionWith(range0);
      assertFalse(range1.equals((Object)range0));
      assertTrue(range2.equals((Object)range0));
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Range<String> range0 = Range.is("kuN)(=L)oz$tqni");
      Range<String> range1 = Range.between("kuN)(=L)oz$tqni", "");
      Range<String> range2 = range0.intersectionWith(range1);
      assertFalse(range2.equals((Object)range1));
      assertNotSame(range2, range0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("J_ Z\"N(Pf1HSng&Z~)T").when(comparator0).toString();
      doReturn((-2122), (-2122), (-14)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      Range<Object> range1 = Range.is(object0, comparator1);
      boolean boolean0 = range0.isBeforeRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is("e K4`*?", comparator0);
      boolean boolean0 = range1.isBefore("Element is null");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Integer integer0 = new Integer((-458));
      Range<Integer> range0 = Range.between(integer0, integer0, (Comparator<Integer>) null);
      Integer integer1 = new Integer(91);
      boolean boolean0 = range0.isEndedBy(integer1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Range<String> range0 = Range.between("J'$FfUlmw11Rp+fE", "J'$FfUlmw11Rp+fE");
      boolean boolean0 = range0.isStartedBy("mNa0*V r");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Integer integer0 = new Integer((-458));
      Range<Integer> range0 = Range.between(integer0, integer0, (Comparator<Integer>) null);
      Integer integer1 = new Integer(91);
      Range<Integer> range1 = Range.is(integer1, (Comparator<Integer>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range [91..91]
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "[1616..1616]", (Object) "", (Comparator<Object>) null);
      String string0 = range0.toString("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("J_ Z\"N(Pf1HSng&Z~)T").when(comparator0).toString();
      doReturn((-2122), (-2122), (-14), 17).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      boolean boolean0 = range0.contains(comparator1);
      Range.is(object0, comparator1);
      boolean boolean1 = range0.isBeforeRange(range0);
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Range<String> range0 = Range.is("WB5^Fv_5Sk");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is(" K4m2]-4gKi ", comparator0);
      boolean boolean0 = range0.isAfterRange(range1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Integer integer0 = new Integer(91);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.between((Object) integer0, (Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.toString("%V");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'V'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      Range<String> range0 = Range.between("ULEwz/%GH~", "");
      // Undeclared exception!
      try { 
        range0.toString("ULEwz/%GH~");
        fail("Expecting exception: IllegalFormatConversionException");
      
      } catch(IllegalFormatConversionException e) {
         //
         // g != java.lang.String
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      Range<String> range0 = Range.is("");
      // Undeclared exception!
      try { 
        range0.toString((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      Integer integer0 = Integer.valueOf(1616);
      Range<Object> range0 = Range.between((Object) "[1616..1616]", (Object) "", (Comparator<Object>) null);
      Comparator<Object> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range1.isStartedBy("[1616..1616]");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      Integer integer0 = new Integer(14);
      Range<Object> range0 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      Comparator<Object> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range1.isOverlappedBy(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Range<Object> range1 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range1.isAfter(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // RangeSourceCode.Range cannot be cast to java.lang.Comparable
         //
         verifyException("RangeSourceCode.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      Object object0 = new Object();
      // Undeclared exception!
      try { 
        Range.is(object0, (Comparator<Object>) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // java.lang.Object cannot be cast to java.lang.Comparable
         //
         verifyException("RangeSourceCode.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.is((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      Range<Object> range0 = Range.is((Object) "", (Comparator<Object>) null);
      Integer integer0 = new Integer(4250);
      Range<Object> range1 = Range.between((Object) integer0, (Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.intersectionWith(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<Object> range0 = Range.is((Object) integer0, (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.elementCompareTo(range0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // RangeSourceCode.Range cannot be cast to java.lang.Comparable
         //
         verifyException("RangeSourceCode.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      Integer integer0 = new Integer((-1));
      Range<Object> range0 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      Comparator<Object> comparator0 = range0.getComparator();
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      // Undeclared exception!
      try { 
        range0.containsRange(range1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      Integer integer0 = new Integer((-1178));
      Range<Object> range0 = Range.is((Object) "[-1178..-1178]", (Comparator<Object>) null);
      // Undeclared exception!
      try { 
        range0.contains(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("vRWa!a:>s>UJyqfP~", comparator0);
      Range<Object> range1 = Range.is((Object) "Cannot calculate intersection with non-overlapping range %s", (Comparator<Object>) null);
      Comparator<Object> comparator1 = range1.getComparator();
      // Undeclared exception!
      try { 
        Range.between((Object) range0, (Object) "Cannot calculate intersection with non-overlapping range %s", comparator1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // RangeSourceCode.Range cannot be cast to java.lang.Comparable
         //
         verifyException("RangeSourceCode.Range$ComparableComparator", e);
      }
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      Integer integer0 = new Integer(91);
      // Undeclared exception!
      try { 
        Range.between(integer0, (Integer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=91, element2=null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      Object object0 = new Object();
      Range<String> range0 = Range.is("qb6.R8");
      Comparator<String> comparator0 = range0.getComparator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator1).toString();
      doReturn(0, 0, 0, 0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between(object0, (Object) range0, comparator1);
      Comparator<Object> comparator2 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0).when(comparator2).compare(any() , any());
      Range<Object> range2 = Range.is((Object) comparator0, comparator2);
      Range<Object> range3 = range1.intersectionWith(range2);
      boolean boolean0 = range3.equals(range1);
      assertFalse(boolean0);
      assertFalse(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      Integer integer0 = new Integer(3311);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Range<String> range1 = Range.is("");
      Comparator<Range<Object>> comparator1 = (Comparator<Range<Object>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(nullable(RangeSourceCode.Range.class) , nullable(RangeSourceCode.Range.class));
      Range<Range<Object>> range2 = Range.is(range0, comparator1);
      boolean boolean0 = range2.equals(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      Object object0 = new Object();
      Range<String> range0 = Range.is("qb6.R8");
      Comparator<String> comparator0 = range0.getComparator();
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between(object0, (Object) range0, comparator1);
      boolean boolean0 = range1.equals(comparator0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      Integer integer0 = new Integer(3311);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Comparator<Integer> comparator1 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(anyInt() , anyInt());
      Range<Integer> range1 = Range.is(integer0, comparator1);
      boolean boolean0 = range1.equals(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      Range<String> range0 = Range.between("", "(j{4{! z|b=Dk%)^g");
      Range<String> range1 = Range.between("(j{4{! z|b=Dk%)^g", "(j{4{! z|b=Dk%)^g", (Comparator<String>) null);
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertFalse(range1.equals((Object)range0));
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      Integer integer0 = new Integer((-1178));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.isOverlappedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      Object object0 = new Object();
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("J_ Z\"N(Pf1HSng&Z~)T").when(comparator0).toString();
      doReturn((-2122), (-2122), (-14), 17).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is(object0, comparator0);
      Comparator<Object> comparator1 = range0.getComparator();
      boolean boolean0 = range0.contains(comparator1);
      Range<Object> range1 = Range.is(object0, comparator1);
      boolean boolean1 = range1.isBefore("K7>={6&GB");
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      Integer integer0 = new Integer((-792));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      Object object0 = new Object();
      boolean boolean0 = range0.isBefore(object0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      Range<String> range0 = Range.between("n)IQ0.k+J|DZp%xA", "n)IQ0.k+J|DZp%xA");
      boolean boolean0 = range0.isAfter("RCwsxC:c'3w n");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isAfter("");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      Range<String> range0 = Range.between("", "(j{4{! z|b=Dk%)^g");
      boolean boolean0 = range0.contains("9_skp)=b^ywp_lDlw");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      // Undeclared exception!
      try { 
        Range.between((String) null, (String) null, (Comparator<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      Range<String> range0 = Range.is("");
      String string0 = range0.toString();
      assertEquals("[..]", string0);
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is("", comparator0);
      Range<String> range2 = range1.intersectionWith(range0);
      assertSame(range2, range1);
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.equals((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Comparator<String> comparator0 = range0.getComparator();
      Integer integer0 = new Integer(0);
      Comparator<Object> comparator1 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator1).compare(any() , any());
      Range<Object> range1 = Range.between((Object) integer0, (Object) comparator0, comparator1);
      // Undeclared exception!
      try { 
        range1.intersectionWith((Range<Object>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Cannot calculate intersection with non-overlapping range null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      Integer integer0 = new Integer(1082);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2289).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isBeforeRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((String) null, (String) null, (String) null).when(comparator0).toString();
      doReturn(0, 0, 0, 0, 0).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      Integer integer1 = new Integer((-1435));
      Range<Integer> range1 = Range.is(integer1);
      Range<Integer> range2 = range0.intersectionWith(range1);
      assertFalse(range2.equals((Object)range0));
      assertNotSame(range2, range0);
      assertFalse(range2.equals((Object)range1));
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      Integer integer0 = new Integer((-1819));
      Range<Integer> range0 = Range.between(integer0, integer0, (Comparator<Integer>) null);
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn("", "", "", "").when(comparator0).toString();
      doReturn((-1897), (-1897), (-1897), 17, (-1819)).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.is((Object) integer0, comparator0);
      Comparator<Object> comparator1 = range1.getComparator();
      Range<Object> range2 = Range.between((Object) integer0, (Object) range0, comparator1);
      Range<Object> range3 = range2.intersectionWith(range1);
      assertFalse(range3.equals((Object)range1));
      assertNotSame(range3, range2);
      assertTrue(range3.equals((Object)range2));
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Range<String> range1 = range0.intersectionWith(range0);
      assertSame(range1, range0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isOverlappedBy((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      Integer integer0 = new Integer(1082);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(2289).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      boolean boolean0 = range0.isAfterRange((Range<Integer>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      Range<String> range1 = Range.between("", "L; y");
      boolean boolean0 = range0.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      Range<String> range0 = Range.between("1!fGfD$U:3U(WbM", "\"=N#0$JSNt?$F");
      Comparator<String> comparator0 = range0.getComparator();
      Range<String> range1 = Range.is("eB[>P#eN?I~T4:", comparator0);
      boolean boolean0 = range0.containsRange(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      Comparator<String> comparator0 = (Comparator<String>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(anyString() , anyString());
      Range<String> range0 = Range.is("vRWa!a:>s>UJyqfP~", comparator0);
      boolean boolean0 = range0.containsRange((Range<String>) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      Range<String> range0 = Range.is("", (Comparator<String>) null);
      boolean boolean0 = range0.containsRange(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      Range<Object> range0 = Range.is((Object) "", (Comparator<Object>) null);
      int int0 = range0.elementCompareTo("");
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      Range<String> range0 = Range.between("&k^,k@*Iw8$@@3-b", "&k^,k@*Iw8$@@3-b");
      // Undeclared exception!
      try { 
        range0.elementCompareTo((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // Element is null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isBefore((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      Integer integer0 = new Integer((-1819));
      Range<Integer> range0 = Range.between(integer0, integer0, (Comparator<Integer>) null);
      boolean boolean0 = range0.isEndedBy((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      Range<String> range0 = Range.is("");
      boolean boolean0 = range0.isEndedBy("");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      Integer integer0 = new Integer(14);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Range<Integer>> comparator0 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0, 0, (-47)).when(comparator0).compare(nullable(RangeSourceCode.Range.class) , nullable(RangeSourceCode.Range.class));
      Range<Range<Integer>> range1 = Range.between(range0, range0, comparator0);
      boolean boolean0 = range1.contains(range0);
      assertTrue(boolean0);
      
      boolean boolean1 = range1.isStartedBy(range0);
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      Integer integer0 = new Integer((-1819));
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-1897)).when(comparator0).compare(any() , any());
      Range<Object> range0 = Range.is((Object) integer0, comparator0);
      boolean boolean0 = range0.isStartedBy((Object) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      Integer integer0 = new Integer(14);
      Range<Integer> range0 = Range.between(integer0, integer0);
      Comparator<Range<Integer>> comparator0 = (Comparator<Range<Integer>>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0, 0).when(comparator0).compare(nullable(RangeSourceCode.Range.class) , nullable(RangeSourceCode.Range.class));
      Range<Range<Integer>> range1 = Range.between(range0, range0, comparator0);
      boolean boolean0 = range1.isStartedBy(range0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      Integer integer0 = new Integer(1057);
      Comparator<Integer> comparator0 = (Comparator<Integer>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn((-2804), (-856)).when(comparator0).compare(anyInt() , anyInt());
      Range<Integer> range0 = Range.is(integer0, comparator0);
      int int0 = range0.elementCompareTo(integer0);
      assertEquals((-1), int0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      Integer integer0 = new Integer(2938);
      Range<Integer> range0 = Range.is(integer0);
      boolean boolean0 = range0.isAfter((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      Range<String> range0 = Range.is("");
      int int0 = range0.elementCompareTo("xoW\"*\"`KKX;.\"R1z'");
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Range<String> range1 = Range.between("xoW\"*\"`KKX;.\"R1z'", "xoW\"*\"`KKX;.\"R1z'");
      boolean boolean0 = range0.isOverlappedBy(range1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      Integer integer0 = new Integer((-1178));
      Range<Integer> range0 = Range.between(integer0, integer0);
      boolean boolean0 = range0.contains((Integer) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      boolean boolean0 = range0.isNaturalOrdering();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test64()  throws Throwable  {
      Integer integer0 = new Integer(0);
      Range<String> range0 = Range.is("");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between((Object) range0, (Object) integer0, comparator0);
      boolean boolean0 = range1.isNaturalOrdering();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test65()  throws Throwable  {
      Range<String> range0 = Range.between(":3", "");
      boolean boolean0 = range0.isEndedBy("#%10Kelj71hpmz");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test66()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "", (Object) "", (Comparator<Object>) null);
      Comparator<Object> comparator0 = range0.getComparator();
      // Undeclared exception!
      try { 
        Range.is((Object) null, comparator0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Elements in a range must not be null: element1=null, element2=null
         //
         verifyException("RangeSourceCode.Range", e);
      }
  }

  @Test(timeout = 4000)
  public void test67()  throws Throwable  {
      Integer integer0 = new Integer((-2134));
      Range<Integer> range0 = Range.between(integer0, integer0);
      range0.hashCode();
      range0.hashCode();
  }

  @Test(timeout = 4000)
  public void test68()  throws Throwable  {
      Object object0 = new Object();
      Range<String> range0 = Range.is("qb6.R8");
      Comparator<Object> comparator0 = (Comparator<Object>) mock(Comparator.class, new ViolatedAssumptionAnswer());
      doReturn(0).when(comparator0).compare(any() , any());
      Range<Object> range1 = Range.between(object0, (Object) range0, comparator0);
      String string0 = range1.toString(":1/)a@");
      assertEquals(":1/)a@", string0);
  }

  @Test(timeout = 4000)
  public void test69()  throws Throwable  {
      Range<String> range0 = Range.is("qb6.R8");
      String string0 = range0.getMinimum();
      assertEquals("qb6.R8", string0);
  }

  @Test(timeout = 4000)
  public void test70()  throws Throwable  {
      Range<String> range0 = Range.is("");
      Object object0 = range0.getMaximum();
      assertEquals("", object0);
  }

  @Test(timeout = 4000)
  public void test71()  throws Throwable  {
      Range<Object> range0 = Range.between((Object) "..", (Object) "..", (Comparator<Object>) null);
      Integer integer0 = new Integer(2517);
      // Undeclared exception!
      try { 
        range0.isEndedBy(integer0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }
}
