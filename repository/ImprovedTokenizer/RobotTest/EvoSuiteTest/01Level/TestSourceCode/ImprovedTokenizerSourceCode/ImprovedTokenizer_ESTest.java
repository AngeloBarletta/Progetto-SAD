/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 22:42:46 GMT 2023
 */

package ImprovedTokenizerSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import ImprovedTokenizerSourceCode.ImprovedTokenizer;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedTokenizer_ESTest extends ImprovedTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      int int0 = improvedTokenizer0.stop();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      String string0 = improvedTokenizer0.previousDelimiter();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer((Reader) null, "");
      StringBuffer stringBuffer0 = new StringBuffer("");
      stringBuffer0.append(0);
      improvedTokenizer0.myBuffer = stringBuffer0;
      int int0 = improvedTokenizer0.afterToken('G');
      assertEquals(3, int0);
      
      String string0 = improvedTokenizer0.previousDelimiter();
      assertEquals("0", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.myPreviousDelimiter = "";
      String string0 = improvedTokenizer0.previousDelimiter();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      String string0 = improvedTokenizer0.next();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      StringReader stringReader0 = new StringReader("8Kn6tuiK+<zK\"$");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "*");
      String string0 = improvedTokenizer0.next();
      assertNotNull(string0);
      assertEquals("8Kn6tuiK+<zK\"$", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.myState = 4;
      improvedTokenizer0.myToken = "";
      String string0 = improvedTokenizer0.next();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xYG");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "\"wM?Ap<m");
      StringBuffer stringBuffer0 = new StringBuffer("xYG");
      improvedTokenizer0.myBuffer = stringBuffer0;
      int int0 = improvedTokenizer0.matchingToken('s');
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      StringReader stringReader0 = new StringReader("xYG");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "\"wM?Ap<m");
      boolean boolean0 = improvedTokenizer0.keepParsing(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.keepParsing(3414);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("L>$", "");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("gm>`|uQI-JR", "");
      int int0 = improvedTokenizer0.start('(');
      int int1 = improvedTokenizer0.beforeToken('P');
      assertEquals("(", improvedTokenizer0.previousDelimiter());
      assertTrue(int1 == int0);
      assertEquals(3, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      StringReader stringReader0 = new StringReader("rlgo");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "(E593vI:*");
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.advance();
      assertFalse(boolean0);
  }
}
