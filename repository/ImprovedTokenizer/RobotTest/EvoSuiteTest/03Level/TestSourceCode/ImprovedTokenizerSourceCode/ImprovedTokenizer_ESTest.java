/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 22:49:51 GMT 2023
 */

package ImprovedTokenizerSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import ImprovedTokenizerSourceCode.ImprovedTokenizer;
import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.InputStream;
import java.io.Reader;
import java.io.StringReader;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class ImprovedTokenizer_ESTest extends ImprovedTokenizer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      StringReader stringReader0 = new StringReader("Fr0/g");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "invalid state: ");
      improvedTokenizer0.myState = (-688);
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: -688
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", (String) null);
      improvedTokenizer0.hasNext();
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 1
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C)<^T}B~>d(");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "$fmotmm\u0000:9%i\"dU");
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
      
      String string0 = improvedTokenizer0.next();
      assertEquals("C)<^T}B~>", string0);
      
      String string1 = improvedTokenizer0.next();
      assertEquals("(", string1);
      assertNotNull(string1);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("oGt'8HWOA", "oGt'8HWOA");
      improvedTokenizer0.myDelimiters = "X";
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
      
      String string0 = improvedTokenizer0.next();
      assertEquals("oGt'8HWOA", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.myState = 3;
      // Undeclared exception!
      try { 
        improvedTokenizer0.next();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // invalid state: 3
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("N!;$IlB\"lDb,", "N!;$IlB\"lDb,");
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken('9');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      // Undeclared exception!
      try { 
        improvedTokenizer0.afterToken('|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      // Undeclared exception!
      try { 
        improvedTokenizer0.matchingToken('|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("(wZ$*:", "(wZ$*:");
      // Undeclared exception!
      try { 
        improvedTokenizer0.matchingToken('Q');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      // Undeclared exception!
      try { 
        improvedTokenizer0.beforeToken('\'');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      // Undeclared exception!
      try { 
        improvedTokenizer0.beforeToken('|');
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      int int0 = improvedTokenizer0.start('|');
      assertEquals(2, int0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      int int0 = improvedTokenizer0.start(':');
      assertEquals(3, int0);
      
      int int1 = improvedTokenizer0.afterToken('|');
      assertEquals(2, int1);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      improvedTokenizer0.myState = 3;
      // Undeclared exception!
      try { 
        improvedTokenizer0.stop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("J", "");
      int int0 = improvedTokenizer0.stop();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("oGt'8HWOA", "oGt'8HWOA");
      StringReader stringReader0 = new StringReader("oGt'8HWOA");
      improvedTokenizer0.initialize((Reader) stringReader0, "[HR7D0+V jY<$~");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
      
      String string0 = improvedTokenizer0.next();
      assertEquals("oGt'8", string0);
      assertNotNull(string0);
      
      int int0 = improvedTokenizer0.stop();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
      
      int int0 = improvedTokenizer0.stop();
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      StringReader stringReader0 = new StringReader("");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "");
      improvedTokenizer0.myState = (-3688);
      // Undeclared exception!
      try { 
        improvedTokenizer0.stop();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, -3688
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C)<^T~>d(");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "$fmotmm\u0000:9%i\"dU");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
      
      boolean boolean1 = improvedTokenizer0.advance();
      assertTrue(boolean1);
      assertEquals("d", improvedTokenizer0.previousDelimiter());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("J", "");
      improvedTokenizer0.myState = 2558;
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 2558
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C)<^T}B~>d(");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("$fmotmm\u0000:9%i\"dU", "$fmotmm\u0000:9%i\"dU");
      improvedTokenizer0.hasNext();
      improvedTokenizer0.myInput = (Reader) stringReader0;
      // Undeclared exception!
      try { 
        improvedTokenizer0.advance();
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // Invalid state, 1
         //
         verifyException("ImprovedTokenizerSourceCode.ImprovedTokenizer", e);
      }
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(".yRoa", ".yRoa");
      boolean boolean0 = improvedTokenizer0.advance();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("C)<^T}B~>d(", "$fmotmm\u0000:9%i\"dU");
      boolean boolean0 = improvedTokenizer0.keepParsing(2);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.keepParsing(0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.keepParsing(3);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.keepParsing(5);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      StringReader stringReader0 = new StringReader("C)<^T}B~>d(");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "$fmotmm\u0000:9%i\"dU");
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
      
      String string0 = improvedTokenizer0.next();
      assertEquals("C)<^T}B~>", string0);
      assertNotNull(string0);
      
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("%c5!", "");
      String string0 = improvedTokenizer0.next();
      assertEquals("%c5!", string0);
      assertNotNull(string0);
      
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
      
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertFalse(boolean1);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      improvedTokenizer0.myState = (-3443);
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      improvedTokenizer0.myState = 3;
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("ImprovedTokenizerSourceCode.ImproveTokenizer", "6G\"'<^v+");
      boolean boolean0 = improvedTokenizer0.advance();
      assertTrue(boolean0);
      
      boolean boolean1 = improvedTokenizer0.hasNext();
      assertTrue(boolean1);
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("!*mWH20&guV|;", "%dJJH= |*qTA?S");
      boolean boolean0 = improvedTokenizer0.hasNext();
      assertTrue(boolean0);
      
      int int0 = improvedTokenizer0.stop();
      assertEquals(5, int0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      StringReader stringReader0 = new StringReader("N(1N");
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer(stringReader0, "");
      byte[] byteArray0 = new byte[2];
      ByteArrayInputStream byteArrayInputStream0 = new ByteArrayInputStream(byteArray0);
      BufferedInputStream bufferedInputStream0 = new BufferedInputStream(byteArrayInputStream0);
      DataInputStream dataInputStream0 = new DataInputStream(bufferedInputStream0);
      improvedTokenizer0.initialize((InputStream) dataInputStream0, "N(1N");
      assertEquals(2, ImprovedTokenizer.STATE_BEFORE_TOKEN);
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      ImprovedTokenizer improvedTokenizer0 = new ImprovedTokenizer("", "");
      String string0 = improvedTokenizer0.previousDelimiter();
      assertNull(string0);
  }
}
