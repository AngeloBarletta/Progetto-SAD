/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:04:39 GMT 2023
 */

package InflectionSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import InflectionSourceCode.Inflection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Inflection_ESTest extends Inflection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      String string0 = Inflection.singularize("lfTjEs");
      assertEquals("lfTjE", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      String string0 = Inflection.singularize("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Inflection inflection0 = new Inflection("sheeh", "sheeh", false);
      String string0 = inflection0.replace("sheehs");
      assertEquals("sheehs", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Inflection inflection0 = new Inflection("", "");
      String string0 = inflection0.replace("");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      String string0 = Inflection.pluralize("sheeh");
      assertEquals("sheehs", string0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Inflection inflection0 = new Inflection("sheeh", "sheeh", false);
      boolean boolean0 = inflection0.match("sheeh");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Inflection inflection0 = new Inflection("(vert|ind)ices$");
      boolean boolean0 = inflection0.match("(vert|ind)ices$");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      boolean boolean0 = Inflection.isUncountable("money");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      boolean boolean0 = Inflection.isUncountable("3z");
      assertFalse(boolean0);
  }
}
