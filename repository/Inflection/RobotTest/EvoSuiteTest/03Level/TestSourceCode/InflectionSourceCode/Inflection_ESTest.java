/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 23:05:50 GMT 2023
 */

package InflectionSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import InflectionSourceCode.Inflection;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Inflection_ESTest extends Inflection_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      boolean boolean0 = Inflection.isUncountable("equipment");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      boolean boolean0 = Inflection.isUncountable((String) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      String string0 = Inflection.singularize("s");
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = Inflection.singularize("equipment");
      assertEquals("equipment", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = Inflection.singularize("0L~4(OT~@ENM.7");
      assertEquals("0L~4(OT~@ENM.7", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = Inflection.pluralize("rice");
      assertEquals("rice", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = Inflection.pluralize("");
      assertEquals("s", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Inflection inflection0 = new Inflection((String) null);
      // Undeclared exception!
      try { 
        inflection0.replace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Inflection inflection0 = new Inflection("", (String) null, false);
      // Undeclared exception!
      try { 
        inflection0.replace((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Inflection inflection0 = new Inflection("$1y", "q2OIcTwmFf'@~<VY", false);
      boolean boolean0 = inflection0.match("q2OIcTwmFf'@~<VY");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Inflection inflection0 = new Inflection("", "");
      boolean boolean0 = inflection0.match("");
      assertTrue(boolean0);
  }
}
