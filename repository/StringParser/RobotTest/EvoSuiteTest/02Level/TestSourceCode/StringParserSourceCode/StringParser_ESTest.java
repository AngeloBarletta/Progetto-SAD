/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 12 01:16:43 GMT 2023
 */

package StringParserSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import StringParserSourceCode.StringParser;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class StringParser_ESTest extends StringParser_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      String string0 = StringParser.buildString("=Wn\"RZ{/nK\\003OF)3)=", false);
      assertEquals("=Wn\"RZ{/nK\\003OF)3)=", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("G<]lQ8'%^");
      stringBuilder0.append("''");
      int int0 = StringParser.readString(stringBuilder0, stringBuilder0, 9, '\"');
      assertEquals("G<]lQ8'%^''''", stringBuilder0.toString());
      assertEquals(11, int0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("G<]lQ8'%^");
      int int0 = StringParser.readString(stringBuilder0, "Wn\"RZ{/nK\u0000OF)3)", 529, 'W');
      assertEquals(529, int0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      String string0 = StringParser.escapeString("\u0015\u0086?2;\\\\AV5f.!7I\u0086\u0015", '\u0015');
      assertEquals("\u0015\\u0015\\u0086?2;\\\\\\\\AV5f.!7I\\u0086\\u0015\u0015", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      String string0 = StringParser.escapeString("R%++'%hcj", '\'');
      assertEquals("'R%++\\'%hcj'", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      String string0 = StringParser.escapeString("\r?2;\\AV5f.!7I\r", '\r');
      assertEquals("\r\\r?2;\\\\AV5f.!7I\\r\r", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      String string0 = StringParser.escapeString("\f", 'k');
      assertEquals("k\\fk", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      String string0 = StringParser.escapeString("\n?2;\\AV5f.!7I\n", '\n');
      assertEquals("\n\\n?2;\\\\AV5f.!7I\\n\n", string0);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      String string0 = StringParser.escapeString("\t-\t", 'j');
      assertEquals("j\\t-\\tj", string0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      String string0 = StringParser.escapeString("\b\u0086?2;\\\\AV5f.!7I\u0086\b", '\b');
      assertEquals("\b\\b\\u0086?2;\\\\\\\\AV5f.!7I\\u0086\\b\b", string0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      String string0 = StringParser.escapeString((String) null, 'E');
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      String string0 = StringParser.escapeString("Wn\"RZ{/nK\u0000OF)3)", '=');
      assertNotNull(string0);
      assertEquals("=Wn\\\"RZ{/nKOF)3)=", string0);
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("=Wn\"RZ{/nK\\0OF)3)=");
      stringBuilder0.insert(9, (Object) "=Wn\"RZ{/nK\\0OF)3)=");
      int int0 = StringParser.readString(stringBuilder0, stringBuilder0, 9, '\"');
      assertEquals("=Wn\"RZ{/n=Wn\"RZ{/nK\\0OF)3)=K\\0OF)3)==Wn\"", stringBuilder0.toString());
      assertEquals(12, int0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      String string0 = StringParser.buildString("k\\fk", true);
      assertEquals("\\f", string0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      StringParser stringParser0 = new StringParser();
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      StringBuilder stringBuilder0 = new StringBuilder("=Wn\"RZ{/nK\\0OF)3)=");
      int int0 = StringParser.readString(stringBuilder0, stringBuilder0, 9, '\"');
      assertEquals("=Wn\"RZ{/nK\\0OF)3)=K\\0OF)3)=", stringBuilder0.toString());
      assertEquals(18, int0);
  }
}
