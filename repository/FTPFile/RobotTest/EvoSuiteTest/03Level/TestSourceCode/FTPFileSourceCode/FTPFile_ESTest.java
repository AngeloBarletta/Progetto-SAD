/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 13:19:01 GMT 2023
 */

package FTPFileSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import FTPFileSourceCode.FTPFile;
import java.util.Locale;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(818);
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals(818, fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("[@'%8qMG?8");
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertTrue(fTPFile0.isFile());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("9\"");
      fTPFile0.setType((-358));
      boolean boolean0 = fTPFile0.isFile();
      assertEquals((-358), fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("EW");
      fTPFile0.toString();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.toString();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      boolean boolean0 = fTPFile0.hasPermission(0, 0);
      assertTrue(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.setUser((String) null);
      fTPFile0.getUser();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("oC)<qwt");
      fTPFile0.setUser("1b1lL[t{p\b)]ZL%");
      fTPFile0.getUser();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("FTPFileSourceCode.FTPFile");
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      int int0 = fTPFile0.getType();
      assertTrue(fTPFile0.isFile());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("9\"");
      fTPFile0.setType((-358));
      int int0 = fTPFile0.getType();
      assertEquals((-358), int0);
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1695, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.setLenient(false);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("]KDej>Znaj#w");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1280));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1695, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      Locale locale0 = Locale.ITALY;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      mockGregorianCalendar0.setFirstDayOfWeek((-4569));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("FTPFileSourceCode.FTPFile");
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(0L);
      fTPFile0.getSize();
      assertFalse(fTPFile0.isSymbolicLink());
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setSize(195L);
      long long0 = fTPFile0.getSize();
      assertEquals(195L, long0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.getRawListing();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setRawListing("");
      fTPFile0.getRawListing();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setName("]4,Y24<R.9\"G@");
      fTPFile0.getName();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setName("");
      fTPFile0.getName();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("1YAcFS1v.#");
      fTPFile0.setLink("FTPFileSourceCode.FTPFile");
      fTPFile0.getLink();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setLink("");
      fTPFile0.getLink();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setHardLinkCount(2394);
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(2394, int0);
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setHardLinkCount((-749));
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals((-749), int0);
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.setGroup((String) null);
      fTPFile0.getGroup();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(" %1$tY-%1$tm-%1$td");
      fTPFile0.setGroup(" %1$tY-%1$tm-%1$td");
      fTPFile0.getGroup();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 1, 1, 2, 1, 0);
      mockGregorianCalendar0.set(0, (-2396));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      // Undeclared exception!
      try { 
        fTPFile0.toFormattedString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Invalid era
         //
         verifyException("java.util.GregorianCalendar", e);
      }
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      // Undeclared exception!
      try { 
        fTPFile0.setPermission((-500), 0, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("FTPFileSourceCode.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.setPermission(3220, 747, false);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 3220
         //
         verifyException("FTPFileSourceCode.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 0);
      mockGregorianCalendar0.clear();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals("?---------    0                         -1 1970-01-01 null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      Locale locale0 = Locale.TAIWAN;
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(locale0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString((String) null);
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(0, (-5598));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      boolean boolean0 = fTPFile0.isValid();
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isValid();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(":%1$tM");
      fTPFile0.getRawListing();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("1YAcFS1v.#");
      fTPFile0.getUser();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(" %1$tY-%1$tm-%1$td");
      fTPFile0.getGroup();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(0, int0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getTimestamp();
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("FTPFileSourceCode.FTPFile");
      long long0 = fTPFile0.getSize();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getName();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 2, true);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals("?--x------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 1, true);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals("?-w-------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals("?r--------    0                         -1 null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(2);
      fTPFile0.toFormattedString("|o");
      assertFalse(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(1);
      fTPFile0.toFormattedString();
      assertEquals(1, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      String string0 = fTPFile0.toFormattedString("|o");
      assertEquals("----------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 0);
      mockGregorianCalendar0.clear();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      mockGregorianCalendar0.set(1126, 1, 1126, (-2835), 0);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals("?---------    0                         -1 1128-11-03 21:00 GMT null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 2, 0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("gregory");
      assertEquals(3, fTPFile0.getType());
      assertEquals("?---------    0                         -1 0001-02-28 00:00:00 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(1695, "");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("|o");
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("<1");
      boolean boolean0 = fTPFile0.hasPermission(1, 1);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("%");
      String string0 = fTPFile0.toFormattedString("%");
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("%");
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("<1");
      assertFalse(fTPFile0.isSymbolicLink());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isUnknown();
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test55()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("<1");
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(2, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test56()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("%");
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test57()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isFile();
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test58()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("<1");
      assertFalse(fTPFile0.isDirectory());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals(1, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test59()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isDirectory();
      assertFalse(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test60()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      int int0 = fTPFile0.getType();
      assertEquals(3, int0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test61()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.toString();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test62()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test63()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isFile();
      assertEquals(0, fTPFile0.getType());
      assertTrue(boolean0);
  }
}
