/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 11:34:46 GMT 2023
 */

package FTPFileSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import FTPFileSourceCode.FTPFile;
import java.util.Calendar;
import java.util.SimpleTimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockCalendar;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(2, 2, true);
      String string0 = fTPFile0.toFormattedString("@8<nhqw>Q=$");
      assertEquals("?--------x    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      String string0 = fTPFile0.toFormattedString("_DPh2k0Fr");
      assertEquals("?r--------    0                         -1 null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(0);
      fTPFile0.toFormattedString("x{EMk,c[k");
      assertEquals(0, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(1);
      fTPFile0.toFormattedString("_DPh2k0Fr");
      assertEquals(1, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(2);
      fTPFile0.toFormattedString("|vt6[3uV7 O+;Z]di");
      assertEquals(2, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(0, 1, 1828);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString(" %1$tY-%1$tm-%1$td");
      assertEquals("?---------    0                         -1 0005-02-01 00:00:00 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.clear();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("");
      assertEquals("?---------    0                         -1 1970-01-01 null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      SimpleTimeZone simpleTimeZone0 = new SimpleTimeZone(0, ",6I_$BN$", 2, 0, 3, 2, 0, 3, 2, 0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(simpleTimeZone0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString(",6I_$BN$");
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      Calendar calendar0 = MockCalendar.getInstance();
      fTPFile0.setTimestamp(calendar0);
      String string0 = fTPFile0.toFormattedString((String) null);
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      String string0 = fTPFile0.toFormattedString("");
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      // Undeclared exception!
      try { 
        fTPFile0.hasPermission(4614, 2045);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 4614
         //
         verifyException("FTPFileSourceCode.FTPFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      boolean boolean0 = fTPFile0.hasPermission(1, 3);
      assertFalse(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("?/X>H_t");
      boolean boolean0 = fTPFile0.isValid();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isValid();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      boolean boolean0 = fTPFile0.isUnknown();
      assertTrue(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isUnknown();
      assertTrue(fTPFile0.isFile());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(2, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("gKAFn{4:");
      boolean boolean0 = fTPFile0.isFile();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("gKAFn{4:");
      boolean boolean0 = fTPFile0.isDirectory();
      assertFalse(boolean0);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isDirectory());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals(1, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.getRawListing();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("gKAFn{4:");
      fTPFile0.getUser();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.getGroup();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.setRawListing("K24~@(6");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("gKAFn{4:");
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, int0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.setUser("[Invalid: could not parse file entry]");
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      long long0 = fTPFile0.getSize();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.setName("7`~RklaB{");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      int int0 = fTPFile0.getType();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, int0);
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.setSize(68L);
      assertEquals(68L, fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isFile();
      assertEquals(0, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getLink();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      String string0 = fTPFile0.toFormattedString();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals("[Invalid: could not parse file entry]", string0);
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("7`~RklaB{");
      fTPFile0.setGroup((String) null);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setHardLinkCount((-1));
      assertEquals((-1), fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.toString();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setLink(" %1$tZ");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(1, 1, true);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?----w----    0                         -1 null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      fTPFile0.getName();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }
}
