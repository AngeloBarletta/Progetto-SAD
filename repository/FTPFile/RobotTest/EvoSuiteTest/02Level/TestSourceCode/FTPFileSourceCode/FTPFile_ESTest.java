/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 11 13:25:15 GMT 2023
 */

package FTPFileSourceCode;

import org.junit.Test;
import static org.junit.Assert.*;
import FTPFileSourceCode.FTPFile;
import java.time.ZoneId;
import java.time.ZoneOffset;
import java.util.TimeZone;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.util.MockGregorianCalendar;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class FTPFile_ESTest extends FTPFile_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString("p~U");
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("?---------    0                         -1 2014-02-14 20:21:21.320 GMT null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setRawListing((String) null);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(1, 2, true);
      String string0 = fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?-----x---    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 1, true);
      String string0 = fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isUnknown());
      assertEquals("?-w-------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      String string0 = fTPFile0.toFormattedString("!/l9KL1'v '|TnlH^:");
      assertEquals("?r--------    0                         -1 null", string0);
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(2);
      String string0 = fTPFile0.toFormattedString();
      assertEquals("l---------    0                         -1 null", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isDirectory());
      
      fTPFile0.setType(1);
      fTPFile0.toFormattedString();
      assertTrue(fTPFile0.isDirectory());
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setType(0);
      fTPFile0.toFormattedString((String) null);
      assertEquals(0, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.toString();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("U}*$0W");
      fTPFile0.toString();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.toString();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("daI2}6hFR");
      String string0 = fTPFile0.toFormattedString("");
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals("[Invalid: could not parse file entry]", string0);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isValid();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(boolean0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile((String) null);
      boolean boolean0 = fTPFile0.isValid();
      assertFalse(boolean0);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test15()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isUnknown();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test16()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isSymbolicLink());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isUnknown();
      assertTrue(fTPFile0.isSymbolicLink());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test17()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(".%1$tL");
      assertEquals(3, fTPFile0.getType());
      
      fTPFile0.setType(2);
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals(2, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test18()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isSymbolicLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test19()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertTrue(fTPFile0.isUnknown());
      
      fTPFile0.setType(0);
      boolean boolean0 = fTPFile0.isFile();
      assertEquals(0, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test20()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isFile();
      assertFalse(boolean0);
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test21()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isDirectory());
      
      fTPFile0.setType(1);
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals(1, fTPFile0.getType());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test22()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      boolean boolean0 = fTPFile0.isDirectory();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test23()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setPermission(0, 0, true);
      boolean boolean0 = fTPFile0.hasPermission(0, 0);
      assertTrue(boolean0);
      assertTrue(fTPFile0.isUnknown());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test24()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("+6CgX");
      boolean boolean0 = fTPFile0.hasPermission(2, 2);
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertFalse(boolean0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test25()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("U}*$0W");
      fTPFile0.setUser((String) null);
      fTPFile0.getUser();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test26()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setUser("%(8n9[");
      fTPFile0.getUser();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test27()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getUser();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test28()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertFalse(fTPFile0.isFile());
      
      fTPFile0.setType(0);
      int int0 = fTPFile0.getType();
      assertTrue(fTPFile0.isFile());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test29()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      int int0 = fTPFile0.getType();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, int0);
  }

  @Test(timeout = 4000)
  public void test30()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setType((-1420));
      int int0 = fTPFile0.getType();
      assertEquals((-1420), int0);
  }

  @Test(timeout = 4000)
  public void test31()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test32()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-1), 0, 0, 2, (-1484), 1324);
      mockGregorianCalendar0.setLenient(false);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test33()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("daI2}6hFR");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(1, 0, 1);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test34()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      ZoneOffset zoneOffset0 = ZoneOffset.MAX;
      TimeZone timeZone0 = TimeZone.getTimeZone((ZoneId) zoneOffset0);
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar(timeZone0);
      mockGregorianCalendar0.setMinimalDaysInFirstWeek((-1));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test35()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("2}J3X6kv");
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar((-110), 1, 2, 308, 2);
      mockGregorianCalendar0.setFirstDayOfWeek(0);
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test36()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      MockGregorianCalendar mockGregorianCalendar0 = new MockGregorianCalendar();
      mockGregorianCalendar0.setFirstDayOfWeek((-2087));
      fTPFile0.setTimestamp(mockGregorianCalendar0);
      fTPFile0.getTimestamp();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test37()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(0L);
      fTPFile0.getSize();
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test38()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      assertEquals((-1L), fTPFile0.getSize());
      
      fTPFile0.setSize(1L);
      long long0 = fTPFile0.getSize();
      assertEquals(1L, long0);
  }

  @Test(timeout = 4000)
  public void test39()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("@nf");
      long long0 = fTPFile0.getSize();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
      assertEquals((-1L), long0);
  }

  @Test(timeout = 4000)
  public void test40()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getRawListing();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test41()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("SMMya&I");
      fTPFile0.getRawListing();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test42()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getRawListing();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test43()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.getName();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test44()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile(":dd6y");
      fTPFile0.setName(":dd6y");
      fTPFile0.getName();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals(3, fTPFile0.getType());
  }

  @Test(timeout = 4000)
  public void test45()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setName("");
      fTPFile0.getName();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test46()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.getLink();
      assertEquals(3, fTPFile0.getType());
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test47()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setLink("g,b$F&XGWc9oxFF@@%z");
      fTPFile0.getLink();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test48()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      fTPFile0.setLink("");
      fTPFile0.getLink();
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
  }

  @Test(timeout = 4000)
  public void test49()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("");
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, int0);
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test50()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setHardLinkCount(1091);
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals(1091, int0);
  }

  @Test(timeout = 4000)
  public void test51()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setHardLinkCount((-849));
      int int0 = fTPFile0.getHardLinkCount();
      assertEquals((-849), int0);
  }

  @Test(timeout = 4000)
  public void test52()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile();
      fTPFile0.setGroup((String) null);
      fTPFile0.getGroup();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(3, fTPFile0.getType());
      assertEquals(0, fTPFile0.getHardLinkCount());
  }

  @Test(timeout = 4000)
  public void test53()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("SMMya&I");
      fTPFile0.setGroup("[Invalid: could not parse file entry]");
      fTPFile0.getGroup();
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertEquals((-1L), fTPFile0.getSize());
      assertTrue(fTPFile0.isUnknown());
  }

  @Test(timeout = 4000)
  public void test54()  throws Throwable  {
      FTPFile fTPFile0 = new FTPFile("@nf");
      fTPFile0.getGroup();
      assertEquals((-1L), fTPFile0.getSize());
      assertEquals(0, fTPFile0.getHardLinkCount());
      assertTrue(fTPFile0.isUnknown());
  }
}
